"""
This type stub file was generated by pyright.
"""

"""
This module contains the convolution and filter functionalities of astropy.

A few conceptual notes:
A filter kernel is mainly characterized by its response function. In the 1D
case we speak of "impulse response function", in the 2D case we call it "point
spread function". This response function is given for every kernel by an
astropy `FittableModel`, which is evaluated on a grid to obtain a filter array,
which can then be applied to binned data.

The model is centered on the array and should have an amplitude such that the array
integrates to one per default.

Currently only symmetric 2D kernels are supported.
"""
MAX_NORMALIZATION = ...
__all__ = ['Kernel', 'Kernel1D', 'Kernel2D', 'kernel_arithmetics']
class Kernel:
    """
    Convolution kernel base class.

    Parameters
    ----------
    array : ndarray
        Kernel array.
    """
    _separable = ...
    _is_bool = ...
    _model = ...
    def __init__(self, array) -> None:
        ...
    
    @property
    def truncation(self):
        """
        Deviation from the normalization to one.
        """
        ...
    
    @property
    def is_bool(self): # -> bool:
        """
        Indicates if kernel is bool.

        If the kernel is bool the multiplication in the convolution could
        be omitted, to increase the performance.
        """
        ...
    
    @property
    def model(self): # -> None:
        """
        Kernel response model.
        """
        ...
    
    @property
    def dimension(self):
        """
        Kernel dimension.
        """
        ...
    
    @property
    def center(self): # -> list[Unknown]:
        """
        Index of the kernel center.
        """
        ...
    
    def normalize(self, mode=...): # -> None:
        """
        Normalize the filter kernel.

        Parameters
        ----------
        mode : {'integral', 'peak'}
            One of the following modes:
                * 'integral' (default)
                    Kernel is normalized such that its integral = 1.
                * 'peak'
                    Kernel is normalized such that its peak = 1.
        """
        ...
    
    @property
    def shape(self):
        """
        Shape of the kernel array.
        """
        ...
    
    @property
    def separable(self): # -> bool:
        """
        Indicates if the filter kernel is separable.

        A 2D filter is separable, when its filter array can be written as the
        outer product of two 1D arrays.

        If a filter kernel is separable, higher dimension convolutions will be
        performed by applying the 1D filter array consecutively on every dimension.
        This is significantly faster, than using a filter array with the same
        dimension.
        """
        ...
    
    @property
    def array(self): # -> Unknown:
        """
        Filter kernel array.
        """
        ...
    
    def __add__(self, kernel): # -> Kernel1D | Kernel2D:
        """
        Add two filter kernels.
        """
        ...
    
    def __sub__(self, kernel): # -> Kernel1D | Kernel2D:
        """
        Subtract two filter kernels.
        """
        ...
    
    def __mul__(self, value): # -> Kernel1D | Kernel2D:
        """
        Multiply kernel with number or convolve two kernels.
        """
        ...
    
    def __rmul__(self, value): # -> Kernel1D | Kernel2D:
        """
        Multiply kernel with number or convolve two kernels.
        """
        ...
    
    def __array__(self): # -> Unknown:
        """
        Array representation of the kernel.
        """
        ...
    
    def __array_wrap__(self, array, context=...): # -> _NotImplementedType:
        """
        Wrapper for multiplication with numpy arrays.
        """
        ...
    


class Kernel1D(Kernel):
    """
    Base class for 1D filter kernels.

    Parameters
    ----------
    model : `~astropy.modeling.FittableModel`
        Model to be evaluated.
    x_size : int or None, optional
        Size of the kernel array. Default = ⌊8*width+1⌋.
        Only used if ``array`` is None.
    array : ndarray or None, optional
        Kernel array.
    width : number
        Width of the filter kernel.
    mode : str, optional
        One of the following discretization modes:
            * 'center' (default)
                Discretize model by taking the value
                at the center of the bin.
            * 'linear_interp'
                Discretize model by linearly interpolating
                between the values at the corners of the bin.
            * 'oversample'
                Discretize model by taking the average
                on an oversampled grid.
            * 'integrate'
                Discretize model by integrating the
                model over the bin.
    factor : number, optional
        Factor of oversampling. Default factor = 10.
    """
    def __init__(self, model=..., x_size=..., array=..., **kwargs) -> None:
        ...
    


class Kernel2D(Kernel):
    """
    Base class for 2D filter kernels.

    Parameters
    ----------
    model : `~astropy.modeling.FittableModel`
        Model to be evaluated.
    x_size : int, optional
        Size in x direction of the kernel array. Default = ⌊8*width + 1⌋.
        Only used if ``array`` is None.
    y_size : int, optional
        Size in y direction of the kernel array. Default = ⌊8*width + 1⌋.
        Only used if ``array`` is None,
    array : ndarray or None, optional
        Kernel array. Default is None.
    mode : str, optional
        One of the following discretization modes:
            * 'center' (default)
                Discretize model by taking the value
                at the center of the bin.
            * 'linear_interp'
                Discretize model by performing a bilinear interpolation
                between the values at the corners of the bin.
            * 'oversample'
                Discretize model by taking the average
                on an oversampled grid.
            * 'integrate'
                Discretize model by integrating the
                model over the bin.
    width : number
        Width of the filter kernel.
    factor : number, optional
        Factor of oversampling. Default factor = 10.
    """
    def __init__(self, model=..., x_size=..., y_size=..., array=..., **kwargs) -> None:
        ...
    


def kernel_arithmetics(kernel, value, operation): # -> Kernel1D | Kernel2D:
    """
    Add, subtract or multiply two kernels.

    Parameters
    ----------
    kernel : `astropy.convolution.Kernel`
        Kernel instance.
    value : `astropy.convolution.Kernel`, float, or int
        Value to operate with.
    operation : {'add', 'sub', 'mul'}
        One of the following operations:
            * 'add'
                Add two kernels
            * 'sub'
                Subtract two kernels
            * 'mul'
                Multiply kernel with number or convolve two kernels.
    """
    ...

