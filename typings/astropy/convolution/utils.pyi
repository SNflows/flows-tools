"""
This type stub file was generated by pyright.
"""

__all__ = ['discretize_model', 'KernelSizeError']
class DiscretizationError(Exception):
    """
    Called when discretization of models goes wrong.
    """
    ...


class KernelSizeError(Exception):
    """
    Called when size of kernels is even.
    """
    ...


def has_even_axis(array): # -> bool:
    ...

def raise_even_kernel_exception():
    ...

def add_kernel_arrays_1D(array_1, array_2):
    """
    Add two 1D kernel arrays of different size.

    The arrays are added with the centers lying upon each other.
    """
    ...

def add_kernel_arrays_2D(array_1, array_2):
    """
    Add two 2D kernel arrays of different size.

    The arrays are added with the centers lying upon each other.
    """
    ...

def discretize_model(model, x_range, y_range=..., mode=..., factor=...): # -> Any | Quantity | tuple[Quantity, ...] | NDArray[floating[Any]] | NDArray[Any] | NDArray[float64] | None:
    """
    Function to evaluate analytical model functions on a grid.

    So far the function can only deal with pixel coordinates.

    Parameters
    ----------
    model : `~astropy.modeling.Model` or callable.
        Analytic model function to be discretized. Callables, which are not an
        instances of `~astropy.modeling.Model` are passed to
        `~astropy.modeling.custom_model` and then evaluated.
    x_range : tuple
        x range in which the model is evaluated. The difference between the
        upper an lower limit must be a whole number, so that the output array
        size is well defined.
    y_range : tuple, optional
        y range in which the model is evaluated. The difference between the
        upper an lower limit must be a whole number, so that the output array
        size is well defined. Necessary only for 2D models.
    mode : str, optional
        One of the following modes:
            * ``'center'`` (default)
                Discretize model by taking the value
                at the center of the bin.
            * ``'linear_interp'``
                Discretize model by linearly interpolating
                between the values at the corners of the bin.
                For 2D models interpolation is bilinear.
            * ``'oversample'``
                Discretize model by taking the average
                on an oversampled grid.
            * ``'integrate'``
                Discretize model by integrating the model
                over the bin using `scipy.integrate.quad`.
                Very slow.
    factor : float or int
        Factor of oversampling. Default = 10.

    Returns
    -------
    array : `numpy.array`
        Model value array

    Notes
    -----
    The ``oversample`` mode allows to conserve the integral on a subpixel
    scale. Here is the example of a normalized Gaussian1D:

    .. plot::
        :include-source:

        import matplotlib.pyplot as plt
        import numpy as np
        from astropy.modeling.models import Gaussian1D
        from astropy.convolution.utils import discretize_model
        gauss_1D = Gaussian1D(1 / (0.5 * np.sqrt(2 * np.pi)), 0, 0.5)
        y_center = discretize_model(gauss_1D, (-2, 3), mode='center')
        y_corner = discretize_model(gauss_1D, (-2, 3), mode='linear_interp')
        y_oversample = discretize_model(gauss_1D, (-2, 3), mode='oversample')
        plt.plot(y_center, label='center sum = {0:3f}'.format(y_center.sum()))
        plt.plot(y_corner, label='linear_interp sum = {0:3f}'.format(y_corner.sum()))
        plt.plot(y_oversample, label='oversample sum = {0:3f}'.format(y_oversample.sum()))
        plt.xlabel('pixels')
        plt.ylabel('value')
        plt.legend()
        plt.show()


    """
    ...

def discretize_center_1D(model, x_range):
    """
    Discretize model by taking the value at the center of the bin.
    """
    ...

def discretize_center_2D(model, x_range, y_range):
    """
    Discretize model by taking the value at the center of the pixel.
    """
    ...

def discretize_linear_1D(model, x_range):
    """
    Discretize model by performing a linear interpolation.
    """
    ...

def discretize_bilinear_2D(model, x_range, y_range):
    """
    Discretize model by performing a bilinear interpolation.
    """
    ...

def discretize_oversample_1D(model, x_range, factor=...): # -> Any:
    """
    Discretize model by taking the average on an oversampled grid.
    """
    ...

def discretize_oversample_2D(model, x_range, y_range, factor=...): # -> Any:
    """
    Discretize model by taking the average on an oversampled grid.
    """
    ...

def discretize_integrate_1D(model, x_range): # -> NDArray[Any]:
    """
    Discretize model by integrating numerically the model over the bin.
    """
    ...

def discretize_integrate_2D(model, x_range, y_range): # -> NDArray[float64]:
    """
    Discretize model by integrating the model over the pixel.
    """
    ...

