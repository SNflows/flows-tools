"""
This type stub file was generated by pyright.
"""

"""
Utility functions and classes
"""
def internet_on(): # -> bool:
    ...

__all__ = ["SAMPMsgReplierWrapper"]
__doctest_skip__ = ...
def getattr_recursive(variable, attribute): # -> Any:
    """
    Get attributes recursively.
    """
    ...

class _ServerProxyPoolMethod:
    def __init__(self, proxies, name) -> None:
        ...
    
    def __getattr__(self, name): # -> _ServerProxyPoolMethod:
        ...
    
    def __call__(self, *args, **kwrds): # -> Any:
        ...
    


class ServerProxyPool:
    """
    A thread-safe pool of `xmlrpc.ServerProxy` objects.
    """
    def __init__(self, size, proxy_class, *args, **keywords) -> None:
        ...
    
    def __getattr__(self, name): # -> _ServerProxyPoolMethod:
        ...
    
    def shutdown(self): # -> None:
        """Shut down the proxy pool by closing all active connections."""
        ...
    


class SAMPMsgReplierWrapper:
    """
    Function decorator that allows to automatically grab errors and returned
    maps (if any) from a function bound to a SAMP call (or notify).

    Parameters
    ----------
    cli : :class:`~astropy.samp.SAMPIntegratedClient` or :class:`~astropy.samp.SAMPClient`
        SAMP client instance. Decorator initialization, accepting the instance
        of the client that receives the call or notification.
    """
    def __init__(self, cli) -> None:
        ...
    
    def __call__(self, f): # -> (*args: Unknown) -> None:
        ...
    


class _HubAsClient:
    def __init__(self, handler) -> None:
        ...
    
    def __getattr__(self, name): # -> _HubAsClientMethod:
        ...
    


class _HubAsClientMethod:
    def __init__(self, send, name) -> None:
        ...
    
    def __getattr__(self, name): # -> _HubAsClientMethod:
        ...
    
    def __call__(self, *args):
        ...
    


def get_num_args(f): # -> int:
    """
    Find the number of arguments a function or method takes (excluding ``self``).
    """
    ...

