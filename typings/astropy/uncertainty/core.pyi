"""
This type stub file was generated by pyright.
"""

import numpy as np

"""
Distribution class and associated machinery.
"""
__all__ = ['Distribution']
SMAD_SCALE_FACTOR = ...
class Distribution:
    """
    A scalar value or array values with associated uncertainty distribution.

    This object will take its exact type from whatever the ``samples`` argument
    is. In general this is expected to be an `~astropy.units.Quantity` or
    `numpy.ndarray`, although anything compatible with `numpy.asanyarray` is
    possible.

    See also: https://docs.astropy.org/en/stable/uncertainty/

    Parameters
    ----------
    samples : array-like
        The distribution, with sampling along the *leading* axis. If 1D, the
        sole dimension is used as the sampling axis (i.e., it is a scalar
        distribution).
    """
    _generated_subclasses = ...
    def __new__(cls, samples):
        ...
    
    @property
    def distribution(self):
        ...
    
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs): # -> list[Unknown]:
        ...
    
    @property
    def n_samples(self):
        """
        The number of samples of this distribution.  A single `int`.
        """
        ...
    
    def pdf_mean(self, dtype=..., out=...):
        """
        The mean of this distribution.

        Arguments are as for `numpy.mean`.
        """
        ...
    
    def pdf_std(self, dtype=..., out=..., ddof=...):
        """
        The standard deviation of this distribution.

        Arguments are as for `numpy.std`.
        """
        ...
    
    def pdf_var(self, dtype=..., out=..., ddof=...):
        """
        The variance of this distribution.

        Arguments are as for `numpy.var`.
        """
        ...
    
    def pdf_median(self, out=...): # -> Any:
        """
        The median of this distribution.

        Parameters
        ----------
        out : array, optional
            Alternative output array in which to place the result. It must
            have the same shape and buffer length as the expected output,
            but the type (of the output) will be cast if necessary.
        """
        ...
    
    def pdf_mad(self, out=...): # -> Any:
        """
        The median absolute deviation of this distribution.

        Parameters
        ----------
        out : array, optional
            Alternative output array in which to place the result. It must
            have the same shape and buffer length as the expected output,
            but the type (of the output) will be cast if necessary.
        """
        ...
    
    def pdf_smad(self, out=...): # -> Any:
        """
        The median absolute deviation of this distribution rescaled to match the
        standard deviation for a normal distribution.

        Parameters
        ----------
        out : array, optional
            Alternative output array in which to place the result. It must
            have the same shape and buffer length as the expected output,
            but the type (of the output) will be cast if necessary.
        """
        ...
    
    def pdf_percentiles(self, percentile, **kwargs): # -> Any:
        """
        Compute percentiles of this Distribution.

        Parameters
        ----------
        percentile : float or array of float or `~astropy.units.Quantity`
            The desired percentiles of the distribution (i.e., on [0,100]).
            `~astropy.units.Quantity` will be converted to percent, meaning
            that a ``dimensionless_unscaled`` `~astropy.units.Quantity` will
            be interpreted as a quantile.

        Additional keywords are passed into `numpy.percentile`.

        Returns
        -------
        percentiles : `~astropy.units.Quantity` ['dimensionless']
            The ``fracs`` percentiles of this distribution.
        """
        ...
    
    def pdf_histogram(self, **kwargs): # -> tuple[ndarray[Any, dtype[Unknown]], ndarray[Any, dtype[Unknown]]]:
        """
        Compute histogram over the samples in the distribution.

        Parameters
        ----------
        All keyword arguments are passed into `astropy.stats.histogram`. Note
        That some of these options may not be valid for some multidimensional
        distributions.

        Returns
        -------
        hist : array
            The values of the histogram. Trailing dimension is the histogram
            dimension.
        bin_edges : array of dtype float
            Return the bin edges ``(length(hist)+1)``. Trailing dimension is the
            bin histogram dimension.
        """
        ...
    


class ScalarDistribution(Distribution, np.void):
    """Scalar distribution.

    This class mostly exists to make `~numpy.array2print` possible for
    all subclasses.  It is a scalar element, still with n_samples samples.
    """
    ...


class ArrayDistribution(Distribution, np.ndarray):
    _samples_cls = np.ndarray
    def view(self, dtype=..., type=...): # -> ArrayDistribution | Distribution:
        """New view of array with the same data.

        Like `~numpy.ndarray.view` except that the result will always be a new
        `~astropy.uncertainty.Distribution` instance.  If the requested
        ``type`` is a `~astropy.uncertainty.Distribution`, then no change in
        ``dtype`` is allowed.

        """
        ...
    
    def __getitem__(self, item): # -> _samples_cls | Any:
        ...
    


class _DistributionRepr:
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class NdarrayDistribution(_DistributionRepr, ArrayDistribution):
    ...


