"""
This type stub file was generated by pyright.
"""

from .core import Model

"""
Implements rotations, including spherical rotations as defined in WCS Paper II
[1]_

`RotateNative2Celestial` and `RotateCelestial2Native` follow the convention in
WCS Paper II to rotate to/from a native sphere and the celestial sphere.

The implementation uses `EulerAngleRotation`. The model parameters are
three angles: the longitude (``lon``) and latitude (``lat``) of the fiducial point
in the celestial system (``CRVAL`` keywords in FITS), and the longitude of the celestial
pole in the native system (``lon_pole``). The Euler angles are ``lon+90``, ``90-lat``
and ``-(lon_pole-90)``.


References
----------
.. [1] Calabretta, M.R., Greisen, E.W., 2002, A&A, 395, 1077 (Paper II)
"""
__all__ = ['RotateCelestial2Native', 'RotateNative2Celestial', 'Rotation2D', 'EulerAngleRotation', 'RotationSequence3D', 'SphericalRotationSequence']
def spherical2cartesian(alpha, delta): # -> NDArray[Any]:
    ...

def cartesian2spherical(x, y, z): # -> tuple[Any, Any]:
    ...

class RotationSequence3D(Model):
    """
    Perform a series of rotations about different axis in 3D space.

    Positive angles represent a counter-clockwise rotation.

    Parameters
    ----------
    angles : array-like
        Angles of rotation in deg in the order of axes_order.
    axes_order : str
        A sequence of 'x', 'y', 'z' corresponding to axis of rotation.

    Examples
    --------
    >>> model = RotationSequence3D([1.1, 2.1, 3.1, 4.1], axes_order='xyzx')

    """
    standard_broadcasting = ...
    _separable = ...
    n_inputs = ...
    n_outputs = ...
    angles = ...
    def __init__(self, angles, axes_order, name=...) -> None:
        ...
    
    @property
    def inverse(self): # -> Self@RotationSequence3D:
        """Inverse rotation."""
        ...
    
    def evaluate(self, x, y, z, angles): # -> tuple[Any, Any, Any]:
        """
        Apply the rotation to a set of 3D Cartesian coordinates.
        """
        ...
    


class SphericalRotationSequence(RotationSequence3D):
    """
    Perform a sequence of rotations about arbitrary number of axes
    in spherical coordinates.

    Parameters
    ----------
    angles : list
        A sequence of angles (in deg).
    axes_order : str
        A sequence of characters ('x', 'y', or 'z') corresponding to the
        axis of rotation and matching the order in ``angles``.

    """
    def __init__(self, angles, axes_order, name=..., **kwargs) -> None:
        ...
    
    @property
    def n_inputs(self): # -> int:
        ...
    
    @property
    def n_outputs(self): # -> int:
        ...
    
    def evaluate(self, lon, lat, angles): # -> tuple[Any, Any]:
        ...
    


class _EulerRotation:
    """
    Base class which does the actual computation.
    """
    _separable = ...
    def evaluate(self, alpha, delta, phi, theta, psi, axes_order): # -> tuple[Any, Any]:
        ...
    
    _input_units_strict = ...
    _input_units_allow_dimensionless = ...
    @property
    def input_units(self): # -> dict[Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Input units. """
        ...
    
    @property
    def return_units(self): # -> dict[Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Output units. """
        ...
    


class EulerAngleRotation(_EulerRotation, Model):
    """
    Implements Euler angle intrinsic rotations.

    Rotates one coordinate system into another (fixed) coordinate system.
    All coordinate systems are right-handed. The sign of the angles is
    determined by the right-hand rule..

    Parameters
    ----------
    phi, theta, psi : float or `~astropy.units.Quantity` ['angle']
        "proper" Euler angles in deg.
        If floats, they should be in deg.
    axes_order : str
        A 3 character string, a combination of 'x', 'y' and 'z',
        where each character denotes an axis in 3D space.
    """
    n_inputs = ...
    n_outputs = ...
    phi = ...
    theta = ...
    psi = ...
    def __init__(self, phi, theta, psi, axes_order, **kwargs) -> None:
        ...
    
    @property
    def inverse(self): # -> Self@EulerAngleRotation:
        ...
    
    def evaluate(self, alpha, delta, phi, theta, psi): # -> tuple[Any, Any]:
        ...
    


class _SkyRotation(_EulerRotation, Model):
    """
    Base class for RotateNative2Celestial and RotateCelestial2Native.
    """
    lon = ...
    lat = ...
    lon_pole = ...
    def __init__(self, lon, lat, lon_pole, **kwargs) -> None:
        ...
    


class RotateNative2Celestial(_SkyRotation):
    """
    Transform from Native to Celestial Spherical Coordinates.

    Parameters
    ----------
    lon : float or `~astropy.units.Quantity` ['angle']
        Celestial longitude of the fiducial point.
    lat : float or `~astropy.units.Quantity` ['angle']
        Celestial latitude of the fiducial point.
    lon_pole : float or `~astropy.units.Quantity` ['angle']
        Longitude of the celestial pole in the native system.

    Notes
    -----
    If ``lon``, ``lat`` and ``lon_pole`` are numerical values they
    should be in units of deg. Inputs are angles on the native sphere.
    Outputs are angles on the celestial sphere.
    """
    n_inputs = ...
    n_outputs = ...
    @property
    def input_units(self): # -> dict[str | Any | Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Input units. """
        ...
    
    @property
    def return_units(self): # -> dict[str | Any | Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Output units. """
        ...
    
    def __init__(self, lon, lat, lon_pole, **kwargs) -> None:
        ...
    
    def evaluate(self, phi_N, theta_N, lon, lat, lon_pole): # -> tuple[Any, Any]:
        """
        Parameters
        ----------
        phi_N, theta_N : float or `~astropy.units.Quantity` ['angle']
            Angles in the Native coordinate system.
            it is assumed that numerical only inputs are in degrees.
            If float, assumed in degrees.
        lon, lat, lon_pole : float or `~astropy.units.Quantity` ['angle']
            Parameter values when the model was initialized.
            If float, assumed in degrees.

        Returns
        -------
        alpha_C, delta_C : float or `~astropy.units.Quantity` ['angle']
            Angles on the Celestial sphere.
            If float, in degrees.
        """
        ...
    
    @property
    def inverse(self): # -> RotateCelestial2Native:
        ...
    


class RotateCelestial2Native(_SkyRotation):
    """
    Transform from Celestial to Native Spherical Coordinates.

    Parameters
    ----------
    lon : float or `~astropy.units.Quantity` ['angle']
        Celestial longitude of the fiducial point.
    lat : float or `~astropy.units.Quantity` ['angle']
        Celestial latitude of the fiducial point.
    lon_pole : float or `~astropy.units.Quantity` ['angle']
        Longitude of the celestial pole in the native system.

    Notes
    -----
    If ``lon``, ``lat`` and ``lon_pole`` are numerical values they should be
    in units of deg. Inputs are angles on the celestial sphere.
    Outputs are angles on the native sphere.
    """
    n_inputs = ...
    n_outputs = ...
    @property
    def input_units(self): # -> dict[str | Any | Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Input units. """
        ...
    
    @property
    def return_units(self): # -> dict[str | Any | Unknown, Unit | IrreducibleUnit | ((H0: Unknown | None = None) -> Equivalency)]:
        """ Output units. """
        ...
    
    def __init__(self, lon, lat, lon_pole, **kwargs) -> None:
        ...
    
    def evaluate(self, alpha_C, delta_C, lon, lat, lon_pole): # -> tuple[Any, Any]:
        """
        Parameters
        ----------
        alpha_C, delta_C : float or `~astropy.units.Quantity` ['angle']
            Angles in the Celestial coordinate frame.
            If float, assumed in degrees.
        lon, lat, lon_pole : float or `~astropy.units.Quantity` ['angle']
            Parameter values when the model was initialized.
            If float, assumed in degrees.

        Returns
        -------
        phi_N, theta_N : float or `~astropy.units.Quantity` ['angle']
            Angles on the Native sphere.
            If float, in degrees.

        """
        ...
    
    @property
    def inverse(self): # -> RotateNative2Celestial:
        ...
    


class Rotation2D(Model):
    """
    Perform a 2D rotation given an angle.

    Positive angles represent a counter-clockwise rotation and vice-versa.

    Parameters
    ----------
    angle : float or `~astropy.units.Quantity` ['angle']
        Angle of rotation (if float it should be in deg).
    """
    n_inputs = ...
    n_outputs = ...
    _separable = ...
    angle = ...
    def __init__(self, angle=..., **kwargs) -> None:
        ...
    
    @property
    def inverse(self): # -> Self@Rotation2D:
        """Inverse rotation."""
        ...
    
    @classmethod
    def evaluate(cls, x, y, angle): # -> tuple[Quantity, Quantity] | tuple[Any, Any]:
        """
        Rotate (x, y) about ``angle``.

        Parameters
        ----------
        x, y : array-like
            Input quantities
        angle : float or `~astropy.units.Quantity` ['angle']
            Angle of rotations.
            If float, assumed in degrees.

        """
        ...
    


