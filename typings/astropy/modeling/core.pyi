"""
This type stub file was generated by pyright.
"""

import abc
from astropy.utils import sharedmethod

"""
This module defines base classes for all models.  The base class of all
models is `~astropy.modeling.Model`. `~astropy.modeling.FittableModel` is
the base class for all fittable models. Fittable models can be linear or
nonlinear in a regression analysis sense.

All models provide a `__call__` method which performs the transformation in
a purely mathematical way, i.e. the models are unitless.  Model instances can
represent either a single model, or a "model set" representing multiple copies
of the same type of model, but with potentially different values of the
parameters in each model making up the set.
"""
__all__ = ['Model', 'FittableModel', 'Fittable1DModel', 'Fittable2DModel', 'CompoundModel', 'fix_inputs', 'custom_model', 'ModelDefinitionError', 'bind_bounding_box', 'bind_compound_bounding_box']
class ModelDefinitionError(TypeError):
    """Used for incorrect models definitions."""
    ...


class _ModelMeta(abc.ABCMeta):
    """
    Metaclass for Model.

    Currently just handles auto-generating the param_names list based on
    Parameter descriptors declared at the class-level of Model subclasses.
    """
    _is_dynamic = ...
    def __new__(mcls, name, bases, members, **kwds): # -> Self@_ModelMeta:
        ...
    
    def __init__(cls, name, bases, members, **kwds) -> None:
        ...
    
    def __repr__(cls): # -> str:
        """
        Custom repr for Model subclasses.
        """
        ...
    
    def __reduce__(cls): # -> str | tuple[Type[Self@_ModelMeta], tuple[str, tuple[type, ...], dict[str, Any]]]:
        ...
    
    @property
    def name(cls): # -> str:
        """
        The name of this model class--equivalent to ``cls.__name__``.

        This attribute is provided for symmetry with the `Model.name` attribute
        of model instances.
        """
        ...
    
    def rename(cls, name=..., inputs=..., outputs=...): # -> Any:
        """
        Creates a copy of this model class with a new name, inputs or outputs.

        The new class is technically a subclass of the original class, so that
        instance and type checks will still work.  For example::

            >>> from astropy.modeling.models import Rotation2D
            >>> SkyRotation = Rotation2D.rename('SkyRotation')
            >>> SkyRotation
            <class 'astropy.modeling.core.SkyRotation'>
            Name: SkyRotation (Rotation2D)
            N_inputs: 2
            N_outputs: 2
            Fittable parameters: ('angle',)
            >>> issubclass(SkyRotation, Rotation2D)
            True
            >>> r = SkyRotation(90)
            >>> isinstance(r, Rotation2D)
            True
        """
        ...
    
    __add__ = ...
    __sub__ = ...
    __mul__ = ...
    __truediv__ = ...
    __pow__ = ...
    __or__ = ...
    __and__ = ...
    _fix_inputs = ...


class Model(metaclass=_ModelMeta):
    """
    Base class for all models.

    This is an abstract class and should not be instantiated directly.

    The following initialization arguments apply to the majority of Model
    subclasses by default (exceptions include specialized utility models
    like `~astropy.modeling.mappings.Mapping`).  Parametric models take all
    their parameters as arguments, followed by any of the following optional
    keyword arguments:

    Parameters
    ----------
    name : str, optional
        A human-friendly name associated with this model instance
        (particularly useful for identifying the individual components of a
        compound model).

    meta : dict, optional
        An optional dict of user-defined metadata to attach to this model.
        How this is used and interpreted is up to the user or individual use
        case.

    n_models : int, optional
        If given an integer greater than 1, a *model set* is instantiated
        instead of a single model.  This affects how the parameter arguments
        are interpreted.  In this case each parameter must be given as a list
        or array--elements of this array are taken along the first axis (or
        ``model_set_axis`` if specified), such that the Nth element is the
        value of that parameter for the Nth model in the set.

        See the section on model sets in the documentation for more details.

    model_set_axis : int, optional
        This argument only applies when creating a model set (i.e. ``n_models >
        1``).  It changes how parameter values are interpreted.  Normally the
        first axis of each input parameter array (properly the 0th axis) is
        taken as the axis corresponding to the model sets.  However, any axis
        of an input array may be taken as this "model set axis".  This accepts
        negative integers as well--for example use ``model_set_axis=-1`` if the
        last (most rapidly changing) axis should be associated with the model
        sets. Also, ``model_set_axis=False`` can be used to tell that a given
        input should be used to evaluate all the models in the model set.

    fixed : dict, optional
        Dictionary ``{parameter_name: bool}`` setting the fixed constraint
        for one or more parameters.  `True` means the parameter is held fixed
        during fitting and is prevented from updates once an instance of the
        model has been created.

        Alternatively the `~astropy.modeling.Parameter.fixed` property of a
        parameter may be used to lock or unlock individual parameters.

    tied : dict, optional
        Dictionary ``{parameter_name: callable}`` of parameters which are
        linked to some other parameter. The dictionary values are callables
        providing the linking relationship.

        Alternatively the `~astropy.modeling.Parameter.tied` property of a
        parameter may be used to set the ``tied`` constraint on individual
        parameters.

    bounds : dict, optional
        A dictionary ``{parameter_name: value}`` of lower and upper bounds of
        parameters. Keys are parameter names. Values are a list or a tuple
        of length 2 giving the desired range for the parameter.

        Alternatively the `~astropy.modeling.Parameter.min` and
        `~astropy.modeling.Parameter.max` or
        ~astropy.modeling.Parameter.bounds` properties of a parameter may be
        used to set bounds on individual parameters.

    eqcons : list, optional
        List of functions of length n such that ``eqcons[j](x0, *args) == 0.0``
        in a successfully optimized problem.

    ineqcons : list, optional
        List of functions of length n such that ``ieqcons[j](x0, *args) >=
        0.0`` is a successfully optimized problem.

    Examples
    --------
    >>> from astropy.modeling import models
    >>> def tie_center(model):
    ...         mean = 50 * model.stddev
    ...         return mean
    >>> tied_parameters = {'mean': tie_center}

    Specify that ``'mean'`` is a tied parameter in one of two ways:

    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,
    ...                        tied=tied_parameters)

    or

    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)
    >>> g1.mean.tied
    False
    >>> g1.mean.tied = tie_center
    >>> g1.mean.tied
    <function tie_center at 0x...>

    Fixed parameters:

    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,
    ...                        fixed={'stddev': True})
    >>> g1.stddev.fixed
    True

    or

    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)
    >>> g1.stddev.fixed
    False
    >>> g1.stddev.fixed = True
    >>> g1.stddev.fixed
    True
    """
    parameter_constraints = ...
    model_constraints = ...
    param_names = ...
    n_inputs = ...
    n_outputs = ...
    standard_broadcasting = ...
    fittable = ...
    linear = ...
    _separable = ...
    meta = ...
    _inverse = ...
    _user_inverse = ...
    _bounding_box = ...
    _user_bounding_box = ...
    _has_inverse_bounding_box = ...
    _n_models = ...
    _input_units_strict = ...
    _input_units_allow_dimensionless = ...
    input_units_equivalencies = ...
    _cov_matrix = ...
    _stds = ...
    def __init_subclass__(cls, **kwargs): # -> None:
        ...
    
    def __init__(self, *args, meta=..., name=..., **kwargs) -> None:
        ...
    
    @property
    def inputs(self): # -> tuple[Literal['x']] | tuple[Literal['x'], Literal['y']] | tuple[str, ...] | tuple[()]:
        ...
    
    @inputs.setter
    def inputs(self, val): # -> None:
        ...
    
    @property
    def outputs(self): # -> tuple[Literal['y']] | tuple[Literal['z']] | tuple[str, ...] | tuple[()]:
        ...
    
    @outputs.setter
    def outputs(self, val): # -> None:
        ...
    
    @property
    def n_inputs(self): # -> int | property:
        ...
    
    @property
    def n_outputs(self): # -> int | property:
        ...
    
    @property
    def input_units_strict(self): # -> dict[str | Unknown, bool] | dict[str, bool]:
        """
        Enforce strict units on inputs to evaluate. If this is set to True,
        input values to evaluate will be in the exact units specified by
        input_units. If the input quantities are convertible to input_units,
        they are converted. If this is a dictionary then it should map input
        name to a bool to set strict input units for that parameter.
        """
        ...
    
    @property
    def input_units_allow_dimensionless(self): # -> dict[str | Unknown, bool] | dict[str, bool]:
        """
        Allow dimensionless input (and corresponding output). If this is True,
        input values to evaluate will gain the units specified in input_units. If
        this is a dictionary then it should map input name to a bool to allow
        dimensionless numbers for that input.
        Only has an effect if input_units is defined.
        """
        ...
    
    @property
    def uses_quantity(self): # -> bool:
        """
        True if this model has been created with `~astropy.units.Quantity`
        objects or if there are no parameters.

        This can be used to determine if this model should be evaluated with
        `~astropy.units.Quantity` or regular floats.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __len__(self): # -> int | integer[Unknown] | Any:
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    
    def get_bounding_box(self, with_bbox=...): # -> ModelBoundingBox | dict[Unknown, Unknown] | CompoundBoundingBox | _NotImplementedType | None:
        """
        Return the ``bounding_box`` of a model if it exists or ``None``
        otherwise.

        Parameters
        ----------
        with_bbox :
            The value of the ``with_bounding_box`` keyword argument
            when calling the model. Default is `True` for usage when
            looking up the model's ``bounding_box`` without risk of error.
        """
        ...
    
    def input_shape(self, inputs): # -> tuple[()] | tuple[Unknown, ...]:
        """Get input shape for bounding_box evaluation"""
        ...
    
    @property
    def bbox_with_units(self): # -> bool:
        ...
    
    def __call__(self, *args, **kwargs): # -> Quantity | tuple[Quantity, ...]:
        """
        Evaluate this model using the given input(s) and the parameter values
        that were specified when the model was instantiated.
        """
        ...
    
    @property
    def name(self): # -> None:
        """User-provided name for this model instance."""
        ...
    
    @name.setter
    def name(self, val): # -> None:
        """Assign a (new) name to this model."""
        ...
    
    @property
    def model_set_axis(self): # -> int | bool:
        """
        The index of the model set axis--that is the axis of a parameter array
        that pertains to which model a parameter value pertains to--as
        specified when the model was initialized.

        See the documentation on :ref:`astropy:modeling-model-sets`
        for more details.
        """
        ...
    
    @property
    def param_sets(self): # -> NDArray[Any] | NDArray[Unknown]:
        """
        Return parameters as a pset.

        This is a list with one item per parameter set, which is an array of
        that parameter's values across all parameter sets, with the last axis
        associated with the parameter set.
        """
        ...
    
    @property
    def parameters(self): # -> NDArray[float64]:
        """
        A flattened array of all parameter values in all parameter sets.

        Fittable parameters maintain this list and fitters modify it.
        """
        ...
    
    @parameters.setter
    def parameters(self, value): # -> None:
        """
        Assigning to this attribute updates the parameters array rather than
        replacing it.
        """
        ...
    
    @property
    def sync_constraints(self): # -> bool:
        '''
        This is a boolean property that indicates whether or not accessing constraints
        automatically check the constituent models current values. It defaults to True
        on creation of a model, but for fitting purposes it should be set to False
        for performance reasons.
        '''
        ...
    
    @sync_constraints.setter
    def sync_constraints(self, value): # -> None:
        ...
    
    @property
    def fixed(self): # -> _ConstraintsDict:
        """
        A ``dict`` mapping parameter names to their fixed constraint.
        """
        ...
    
    @property
    def bounds(self): # -> _ConstraintsDict:
        """
        A ``dict`` mapping parameter names to their upper and lower bounds as
        ``(min, max)`` tuples or ``[min, max]`` lists.
        """
        ...
    
    @property
    def tied(self): # -> _ConstraintsDict:
        """
        A ``dict`` mapping parameter names to their tied constraint.
        """
        ...
    
    @property
    def eqcons(self):
        """List of parameter equality constraints."""
        ...
    
    @property
    def ineqcons(self):
        """List of parameter inequality constraints."""
        ...
    
    def has_inverse(self): # -> bool:
        """
        Returns True if the model has an analytic or user
        inverse defined.
        """
        ...
    
    @property
    def inverse(self): # -> Model:
        """
        Returns a new `~astropy.modeling.Model` instance which performs the
        inverse transform, if an analytic inverse is defined for this model.

        Even on models that don't have an inverse defined, this property can be
        set with a manually-defined inverse, such a pre-computed or
        experimentally determined inverse (often given as a
        `~astropy.modeling.polynomial.PolynomialModel`, but not by
        requirement).

        A custom inverse can be deleted with ``del model.inverse``.  In this
        case the model's inverse is reset to its default, if a default exists
        (otherwise the default is to raise `NotImplementedError`).

        Note to authors of `~astropy.modeling.Model` subclasses:  To define an
        inverse for a model simply override this property to return the
        appropriate model representing the inverse.  The machinery that will
        make the inverse manually-overridable is added automatically by the
        base class.
        """
        ...
    
    @inverse.setter
    def inverse(self, value): # -> None:
        ...
    
    @inverse.deleter
    def inverse(self): # -> None:
        """
        Resets the model's inverse to its default (if one exists, otherwise
        the model will have no inverse).
        """
        ...
    
    @property
    def has_user_inverse(self): # -> bool:
        """
        A flag indicating whether or not a custom inverse model has been
        assigned to this model by a user, via assignment to ``model.inverse``.
        """
        ...
    
    @property
    def bounding_box(self): # -> CompoundBoundingBox | ModelBoundingBox | _NotImplementedType | dict[Unknown, Unknown]:
        r"""
        A `tuple` of length `n_inputs` defining the bounding box limits, or
        raise `NotImplementedError` for no bounding_box.

        The default limits are given by a ``bounding_box`` property or method
        defined in the class body of a specific model.  If not defined then
        this property just raises `NotImplementedError` by default (but may be
        assigned a custom value by a user).  ``bounding_box`` can be set
        manually to an array-like object of shape ``(model.n_inputs, 2)``. For
        further usage, see :ref:`astropy:bounding-boxes`

        The limits are ordered according to the `numpy` ``'C'`` indexing
        convention, and are the reverse of the model input order,
        e.g. for inputs ``('x', 'y', 'z')``, ``bounding_box`` is defined:

        * for 1D: ``(x_low, x_high)``
        * for 2D: ``((y_low, y_high), (x_low, x_high))``
        * for 3D: ``((z_low, z_high), (y_low, y_high), (x_low, x_high))``

        Examples
        --------

        Setting the ``bounding_box`` limits for a 1D and 2D model:

        >>> from astropy.modeling.models import Gaussian1D, Gaussian2D
        >>> model_1d = Gaussian1D()
        >>> model_2d = Gaussian2D(x_stddev=1, y_stddev=1)
        >>> model_1d.bounding_box = (-5, 5)
        >>> model_2d.bounding_box = ((-6, 6), (-5, 5))

        Setting the bounding_box limits for a user-defined 3D `custom_model`:

        >>> from astropy.modeling.models import custom_model
        >>> def const3d(x, y, z, amp=1):
        ...    return amp
        ...
        >>> Const3D = custom_model(const3d)
        >>> model_3d = Const3D()
        >>> model_3d.bounding_box = ((-6, 6), (-5, 5), (-4, 4))

        To reset ``bounding_box`` to its default limits just delete the
        user-defined value--this will reset it back to the default defined
        on the class:

        >>> del model_1d.bounding_box

        To disable the bounding box entirely (including the default),
        set ``bounding_box`` to `None`:

        >>> model_1d.bounding_box = None
        >>> model_1d.bounding_box  # doctest: +IGNORE_EXCEPTION_DETAIL
        Traceback (most recent call last):
        NotImplementedError: No bounding box is defined for this model
        (note: the bounding box was explicitly disabled for this model;
        use `del model.bounding_box` to restore the default bounding box,
        if one is defined for this model).
        """
        ...
    
    @bounding_box.setter
    def bounding_box(self, bounding_box): # -> None:
        """
        Assigns the bounding box limits.
        """
        ...
    
    def set_slice_args(self, *args): # -> None:
        ...
    
    @bounding_box.deleter
    def bounding_box(self): # -> None:
        ...
    
    @property
    def has_user_bounding_box(self): # -> bool:
        """
        A flag indicating whether or not a custom bounding_box has been
        assigned to this model by a user, via assignment to
        ``model.bounding_box``.
        """
        ...
    
    @property
    def cov_matrix(self): # -> None:
        """
        Fitter should set covariance matrix, if available.
        """
        ...
    
    @cov_matrix.setter
    def cov_matrix(self, cov): # -> None:
        ...
    
    @property
    def stds(self): # -> None:
        """
        Standard deviation of parameters, if covariance matrix is available.
        """
        ...
    
    @stds.setter
    def stds(self, stds): # -> None:
        ...
    
    @property
    def separable(self):
        """ A flag indicating whether a model is separable."""
        ...
    
    def without_units_for_data(self, **kwargs): # -> CompoundModel | Self@Model:
        """
        Return an instance of the model for which the parameter values have
        been converted to the right units for the data, then the units have
        been stripped away.

        The input and output Quantity objects should be given as keyword
        arguments.

        Notes
        -----

        This method is needed in order to be able to fit models with units in
        the parameters, since we need to temporarily strip away the units from
        the model during the fitting (which might be done by e.g. scipy
        functions).

        The units that the parameters should be converted to are not
        necessarily the units of the input data, but are derived from them.
        Model subclasses that want fitting to work in the presence of
        quantities need to define a ``_parameter_units_for_data_units`` method
        that takes the input and output units (as two dictionaries) and
        returns a dictionary giving the target units for each parameter.

        """
        ...
    
    def output_units(self, **kwargs): # -> dict[str, Any | CompositeUnit] | Any:
        """
        Return a dictionary of output units for this model given a dictionary
        of fitting inputs and outputs

        The input and output Quantity objects should be given as keyword
        arguments.

        Notes
        -----

        This method is needed in order to be able to fit models with units in
        the parameters, since we need to temporarily strip away the units from
        the model during the fitting (which might be done by e.g. scipy
        functions).

        This method will force extra model evaluations, which maybe computationally
        expensive. To avoid this, one can add a return_units property to the model,
        see :ref:`astropy:models_return_units`.
        """
        ...
    
    def strip_units_from_tree(self): # -> None:
        ...
    
    def with_units_from_data(self, **kwargs): # -> Self@Model:
        """
        Return an instance of the model which has units for which the parameter
        values are compatible with the data units specified.

        The input and output Quantity objects should be given as keyword
        arguments.

        Notes
        -----

        This method is needed in order to be able to fit models with units in
        the parameters, since we need to temporarily strip away the units from
        the model during the fitting (which might be done by e.g. scipy
        functions).

        The units that the parameters will gain are not necessarily the units
        of the input data, but are derived from them. Model subclasses that
        want fitting to work in the presence of quantities need to define a
        ``_parameter_units_for_data_units`` method that takes the input and output
        units (as two dictionaries) and returns a dictionary giving the target
        units for each parameter.
        """
        ...
    
    @abc.abstractmethod
    def evaluate(self, *args, **kwargs): # -> None:
        """Evaluate the model on some input variables."""
        ...
    
    def sum_of_implicit_terms(self, *args, **kwargs): # -> None:
        """
        Evaluate the sum of any implicit model terms on some input variables.
        This includes any fixed terms used in evaluating a linear model that
        do not have corresponding parameters exposed to the user. The
        prototypical case is `astropy.modeling.functional_models.Shift`, which
        corresponds to a function y = a + bx, where b=1 is intrinsically fixed
        by the type of model, such that sum_of_implicit_terms(x) == x. This
        method is needed by linear fitters to correct the dependent variable
        for the implicit term(s) when solving for the remaining terms
        (ie. a = y - bx).
        """
        ...
    
    def render(self, out=..., coords=...): # -> Quantity | tuple[Quantity, ...] | NDArray[float64]:
        """
        Evaluate a model at fixed positions, respecting the ``bounding_box``.

        The key difference relative to evaluating the model directly is that
        this method is limited to a bounding box if the `Model.bounding_box`
        attribute is set.

        Parameters
        ----------
        out : `numpy.ndarray`, optional
            An array that the evaluated model will be added to.  If this is not
            given (or given as ``None``), a new array will be created.
        coords : array-like, optional
            An array to be used to translate from the model's input coordinates
            to the ``out`` array. It should have the property that
            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is
            not specified, ``coords`` will be used to determine the shape of
            the returned array. If this is not provided (or None), the model
            will be evaluated on a grid determined by `Model.bounding_box`.

        Returns
        -------
        out : `numpy.ndarray`
            The model added to ``out`` if  ``out`` is not ``None``, or else a
            new array from evaluating the model over ``coords``.
            If ``out`` and ``coords`` are both `None`, the returned array is
            limited to the `Model.bounding_box` limits. If
            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be
            passed.

        Raises
        ------
        ValueError
            If ``coords`` are not given and the the `Model.bounding_box` of
            this model is not set.

        Examples
        --------
        :ref:`astropy:bounding-boxes`
        """
        ...
    
    @property
    def input_units(self): # -> dict[str | Unknown, Any] | None:
        """
        This property is used to indicate what units or sets of units the
        evaluate method expects, and returns a dictionary mapping inputs to
        units (or `None` if any units are accepted).

        Model sub-classes can also use function annotations in evaluate to
        indicate valid input units, in which case this property should
        not be overridden since it will return the input units based on the
        annotations.
        """
        ...
    
    @property
    def return_units(self): # -> Any | None:
        """
        This property is used to indicate what units or sets of units the
        output of evaluate should be in, and returns a dictionary mapping
        outputs to units (or `None` if any units are accepted).

        Model sub-classes can also use function annotations in evaluate to
        indicate valid output units, in which case this property should not be
        overridden since it will return the return units based on the
        annotations.
        """
        ...
    
    def prepare_inputs(self, *inputs, model_set_axis=..., equivalencies=..., **kwargs): # -> tuple[Unknown, tuple[list[Unknown]]] | tuple[list[Unknown], tuple[list[Unknown]]]:
        """
        This method is used in `~astropy.modeling.Model.__call__` to ensure
        that all the inputs to the model can be broadcast into compatible
        shapes (if one or both of them are input as arrays), particularly if
        there are more than one parameter sets. This also makes sure that (if
        applicable) the units of the input will be compatible with the evaluate
        method.
        """
        ...
    
    def prepare_outputs(self, broadcasted_shapes, *outputs, **kwargs): # -> tuple[Unknown, ...]:
        ...
    
    def copy(self): # -> Self@Model:
        """
        Return a copy of this model.

        Uses a deep copy so that all model attributes, including parameter
        values, are copied as well.
        """
        ...
    
    def deepcopy(self): # -> Self@Model:
        """
        Return a deep copy of this model.

        """
        ...
    
    @sharedmethod
    def rename(self, name): # -> Self@Model:
        """
        Return a copy of this model with a new name.
        """
        ...
    
    def coerce_units(self, input_units=..., return_units=..., input_units_equivalencies=..., input_units_allow_dimensionless=...): # -> Self@Model:
        """
        Attach units to this (unitless) model.

        Parameters
        ----------
        input_units : dict or tuple, optional
            Input units to attach.  If dict, each key is the name of a model input,
            and the value is the unit to attach.  If tuple, the elements are units
            to attach in order corresponding to `Model.inputs`.
        return_units : dict or tuple, optional
            Output units to attach.  If dict, each key is the name of a model output,
            and the value is the unit to attach.  If tuple, the elements are units
            to attach in order corresponding to `Model.outputs`.
        input_units_equivalencies : dict, optional
            Default equivalencies to apply to input values.  If set, this should be a
            dictionary where each key is a string that corresponds to one of the
            model inputs.
        input_units_allow_dimensionless : bool or dict, optional
            Allow dimensionless input. If this is True, input values to evaluate will
            gain the units specified in input_units. If this is a dictionary then it
            should map input name to a bool to allow dimensionless numbers for that
            input.

        Returns
        -------
        `CompoundModel`
            A `CompoundModel` composed of the current model plus
            `~astropy.modeling.mappings.UnitsMapping` model(s) that attach the units.

        Raises
        ------
        ValueError
            If the current model already has units.

        Examples
        --------

        Wrapping a unitless model to require and convert units:

        >>> from astropy.modeling.models import Polynomial1D
        >>> from astropy import units as u
        >>> poly = Polynomial1D(1, c0=1, c1=2)
        >>> model = poly.coerce_units((u.m,), (u.s,))
        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP
        <Quantity 21. s>
        >>> model(u.Quantity(1000, u.cm))  # doctest: +FLOAT_CMP
        <Quantity 21. s>
        >>> model(u.Quantity(10, u.cm))  # doctest: +FLOAT_CMP
        <Quantity 1.2 s>

        Wrapping a unitless model but still permitting unitless input:

        >>> from astropy.modeling.models import Polynomial1D
        >>> from astropy import units as u
        >>> poly = Polynomial1D(1, c0=1, c1=2)
        >>> model = poly.coerce_units((u.m,), (u.s,), input_units_allow_dimensionless=True)
        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP
        <Quantity 21. s>
        >>> model(10)  # doctest: +FLOAT_CMP
        <Quantity 21. s>
        """
        ...
    
    @property
    def n_submodels(self): # -> Literal[1]:
        """
        Return the number of components in a single model, which is
        obviously 1.
        """
        ...
    


class FittableModel(Model):
    """
    Base class for models that can be fitted using the built-in fitting
    algorithms.
    """
    linear = ...
    fit_deriv = ...
    col_fit_deriv = ...
    fittable = ...


class Fittable1DModel(FittableModel):
    """
    Base class for one-dimensional fittable models.

    This class provides an easier interface to defining new models.
    Examples can be found in `astropy.modeling.functional_models`.
    """
    n_inputs = ...
    n_outputs = ...
    _separable = ...


class Fittable2DModel(FittableModel):
    """
    Base class for two-dimensional fittable models.

    This class provides an easier interface to defining new models.
    Examples can be found in `astropy.modeling.functional_models`.
    """
    n_inputs = ...
    n_outputs = ...


BINARY_OPERATORS = ...
SPECIAL_OPERATORS = ...
class CompoundModel(Model):
    '''
    Base class for compound models.

    While it can be used directly, the recommended way
    to combine models is through the model operators.
    '''
    def __init__(self, op, left, right, name=...) -> None:
        ...
    
    def evaluate(self, *args, **kw): # -> tuple[Unknown, ...] | Any | tuple[Unknown, Unknown]:
        ...
    
    @property
    def n_submodels(self): # -> int:
        ...
    
    @property
    def submodel_names(self): # -> tuple[Unknown, ...]:
        """ Return the names of submodels in a ``CompoundModel``."""
        ...
    
    def both_inverses_exist(self): # -> bool:
        """
        if both members of this compound model have inverses return True
        """
        ...
    
    @property
    def param_names(self): # -> tuple[Unknown, ...] | list[Unknown]:
        """ An ordered list of parameter names."""
        ...
    
    def __getattr__(self, name): # -> Any:
        """
        If someone accesses an attribute not already defined, map the
        parameters, and then see if the requested attribute is one of
        the parameters
        """
        ...
    
    def __getitem__(self, index):
        ...
    
    @property
    def n_inputs(self):
        """ The number of inputs of a model."""
        ...
    
    @n_inputs.setter
    def n_inputs(self, value): # -> None:
        ...
    
    @property
    def n_outputs(self):
        """ The number of outputs of a model."""
        ...
    
    @n_outputs.setter
    def n_outputs(self, value): # -> None:
        ...
    
    @property
    def eqcons(self):
        ...
    
    @eqcons.setter
    def eqcons(self, value): # -> None:
        ...
    
    @property
    def ineqcons(self):
        ...
    
    @ineqcons.setter
    def ineqcons(self, value): # -> None:
        ...
    
    def traverse_postorder(self, include_operator=...): # -> list[Unknown]:
        """ Postorder traversal of the CompoundModel tree."""
        ...
    
    def __str__(self) -> str:
        ...
    
    def rename(self, name): # -> Self@CompoundModel:
        ...
    
    @property
    def isleaf(self): # -> Literal[False]:
        ...
    
    @property
    def inverse(self): # -> _NotImplementedType:
        ...
    
    @property
    def fittable(self): # -> bool:
        """ Set the fittable attribute on a compound model."""
        ...
    
    __add__ = ...
    __sub__ = ...
    __mul__ = ...
    __truediv__ = ...
    __pow__ = ...
    __or__ = ...
    __and__ = ...
    def inputs_map(self): # -> dict[str | Unknown, tuple[Self@CompoundModel, str | Unknown]]:
        """
        Map the names of the inputs to this ExpressionTree to the inputs to the leaf models.
        """
        ...
    
    @property
    def input_units(self): # -> dict[str | Unknown, Unknown] | None:
        ...
    
    @property
    def input_units_equivalencies(self): # -> dict[str | Unknown, Unknown] | None:
        ...
    
    @property
    def input_units_allow_dimensionless(self): # -> dict[str | Unknown, Unknown]:
        ...
    
    @property
    def input_units_strict(self): # -> dict[str | Unknown, Unknown]:
        ...
    
    @property
    def return_units(self): # -> dict[str | Unknown, Unknown]:
        ...
    
    def outputs_map(self): # -> dict[str | Unknown, tuple[Self@CompoundModel, str | Unknown]]:
        """
        Map the names of the outputs to this ExpressionTree to the outputs to the leaf models.
        """
        ...
    
    @property
    def has_user_bounding_box(self): # -> bool:
        """
        A flag indicating whether or not a custom bounding_box has been
        assigned to this model by a user, via assignment to
        ``model.bounding_box``.
        """
        ...
    
    def render(self, out=..., coords=...): # -> Quantity | tuple[Quantity, ...] | NDArray[float64]:
        """
        Evaluate a model at fixed positions, respecting the ``bounding_box``.

        The key difference relative to evaluating the model directly is that
        this method is limited to a bounding box if the `Model.bounding_box`
        attribute is set.

        Parameters
        ----------
        out : `numpy.ndarray`, optional
            An array that the evaluated model will be added to.  If this is not
            given (or given as ``None``), a new array will be created.
        coords : array-like, optional
            An array to be used to translate from the model's input coordinates
            to the ``out`` array. It should have the property that
            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is
            not specified, ``coords`` will be used to determine the shape of
            the returned array. If this is not provided (or None), the model
            will be evaluated on a grid determined by `Model.bounding_box`.

        Returns
        -------
        out : `numpy.ndarray`
            The model added to ``out`` if  ``out`` is not ``None``, or else a
            new array from evaluating the model over ``coords``.
            If ``out`` and ``coords`` are both `None`, the returned array is
            limited to the `Model.bounding_box` limits. If
            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be
            passed.

        Raises
        ------
        ValueError
            If ``coords`` are not given and the the `Model.bounding_box` of
            this model is not set.

        Examples
        --------
        :ref:`astropy:bounding-boxes`
        """
        ...
    
    def replace_submodel(self, name, model): # -> CompoundModel:
        """
        Construct a new `~astropy.modeling.CompoundModel` instance from an
        existing CompoundModel, replacing the named submodel with a new model.

        In order to ensure that inverses and names are kept/reconstructed, it's
        necessary to rebuild the CompoundModel from the replaced node all the
        way back to the base. The original CompoundModel is left untouched.

        Parameters
        ----------
        name : str
            name of submodel to be replaced
        model : `~astropy.modeling.Model`
            replacement model
        """
        ...
    
    def without_units_for_data(self, **kwargs): # -> tuple[Self@CompoundModel, dict[Unknown, Unknown], dict[Unknown, Unknown]] | CompoundModel:
        """
        See `~astropy.modeling.Model.without_units_for_data` for overview
        of this method.

        Notes
        -----
        This modifies the behavior of the base method to account for the
        case where the sub-models of a compound model have different output
        units. This is only valid for compound * and / compound models as
        in that case it is reasonable to mix the output units. It does this
        by modifying the output units of each sub model by using the output
        units of the other sub model so that we can apply the original function
        and get the desired result.

        Additional data has to be output in the mixed output unit case
        so that the units can be properly rebuilt by
        `~astropy.modeling.CompoundModel.with_units_from_data`.

        Outside the mixed output units, this method is identical to the
        base method.
        """
        ...
    
    def with_units_from_data(self, **kwargs): # -> Self@CompoundModel | CompoundModel:
        """
        See `~astropy.modeling.Model.with_units_from_data` for overview
        of this method.

        Notes
        -----
        This modifies the behavior of the base method to account for the
        case where the sub-models of a compound model have different output
        units. This is only valid for compound * and / compound models as
        in that case it is reasonable to mix the output units. In order to
        do this it requires some additional information output by
        `~astropy.modeling.CompoundModel.without_units_for_data` passed as
        keyword arguments under the keywords ``_left_kwargs`` and ``_right_kwargs``.

        Outside the mixed output units, this method is identical to the
        base method.
        """
        ...
    


def binary_operation(binoperator, left, right): # -> tuple[Unknown, ...]:
    '''
    Perform binary operation. Operands may be matching tuples of operands.
    '''
    ...

def get_ops(tree, opset): # -> None:
    """
    Recursive function to collect operators used.
    """
    ...

def make_subtree_dict(tree, nodepath, tdict, leaflist): # -> None:
    '''
    Traverse a tree noting each node by a key that indicates all the
    left/right choices necessary to reach that node. Each key will
    reference a tuple that contains:

    - reference to the compound model for that node.
    - left most index contained within that subtree
       (relative to all indices for the whole tree)
    - right most index contained within that subtree
    '''
    ...

_ORDER_OF_OPERATORS = ...
OPERATOR_PRECEDENCE = ...
def fix_inputs(modelinstance, values, bounding_boxes=..., selector_args=...): # -> CompoundModel:
    """
    This function creates a compound model with one or more of the input
    values of the input model assigned fixed values (scalar or array).

    Parameters
    ----------
    modelinstance : `~astropy.modeling.Model` instance
        This is the model that one or more of the
        model input values will be fixed to some constant value.
    values : dict
        A dictionary where the key identifies which input to fix
        and its value is the value to fix it at. The key may either be the
        name of the input or a number reflecting its order in the inputs.

    Examples
    --------

    >>> from astropy.modeling.models import Gaussian2D
    >>> g = Gaussian2D(1, 2, 3, 4, 5)
    >>> gv = fix_inputs(g, {0: 2.5})

    Results in a 1D function equivalent to Gaussian2D(1, 2, 3, 4, 5)(x=2.5, y)
    """
    ...

def bind_bounding_box(modelinstance, bounding_box, ignored=..., order=...): # -> None:
    """
    Set a validated bounding box to a model instance.

    Parameters
    ----------
    modelinstance : `~astropy.modeling.Model` instance
        This is the model that the validated bounding box will be set on.
    bounding_box : tuple
        A bounding box tuple, see :ref:`astropy:bounding-boxes` for details
    ignored : list
        List of the inputs to be ignored by the bounding box.
    order : str, optional
        The ordering of the bounding box tuple, can be either ``'C'`` or
        ``'F'``.
    """
    ...

def bind_compound_bounding_box(modelinstance, bounding_boxes, selector_args, create_selector=..., ignored=..., order=...): # -> None:
    """
    Add a validated compound bounding box to a model instance.

    Parameters
    ----------
    modelinstance : `~astropy.modeling.Model` instance
        This is the model that the validated compound bounding box will be set on.
    bounding_boxes : dict
        A dictionary of bounding box tuples, see :ref:`astropy:bounding-boxes`
        for details.
    selector_args : list
        List of selector argument tuples to define selection for compound
        bounding box, see :ref:`astropy:bounding-boxes` for details.
    create_selector : callable, optional
        An optional callable with interface (selector_value, model) which
        can generate a bounding box based on a selector value and model if
        there is no bounding box in the compound bounding box listed under
        that selector value. Default is ``None``, meaning new bounding
        box entries will not be automatically generated.
    ignored : list
        List of the inputs to be ignored by the bounding box.
    order : str, optional
        The ordering of the bounding box tuple, can be either ``'C'`` or
        ``'F'``.
    """
    ...

def custom_model(*args, fit_deriv=...): # -> Any | partial[Any]:
    """
    Create a model from a user defined function. The inputs and parameters of
    the model will be inferred from the arguments of the function.

    This can be used either as a function or as a decorator.  See below for
    examples of both usages.

    The model is separable only if there is a single input.

    .. note::

        All model parameters have to be defined as keyword arguments with
        default values in the model function.  Use `None` as a default argument
        value if you do not want to have a default value for that parameter.

        The standard settable model properties can be configured by default
        using keyword arguments matching the name of the property; however,
        these values are not set as model "parameters". Moreover, users
        cannot use keyword arguments matching non-settable model properties,
        with the exception of ``n_outputs`` which should be set to the number of
        outputs of your function.

    Parameters
    ----------
    func : function
        Function which defines the model.  It should take N positional
        arguments where ``N`` is dimensions of the model (the number of
        independent variable in the model), and any number of keyword arguments
        (the parameters).  It must return the value of the model (typically as
        an array, but can also be a scalar for scalar inputs).  This
        corresponds to the `~astropy.modeling.Model.evaluate` method.
    fit_deriv : function, optional
        Function which defines the Jacobian derivative of the model. I.e., the
        derivative with respect to the *parameters* of the model.  It should
        have the same argument signature as ``func``, but should return a
        sequence where each element of the sequence is the derivative
        with respect to the corresponding argument. This corresponds to the
        :meth:`~astropy.modeling.FittableModel.fit_deriv` method.

    Examples
    --------
    Define a sinusoidal model function as a custom 1D model::

        >>> from astropy.modeling.models import custom_model
        >>> import numpy as np
        >>> def sine_model(x, amplitude=1., frequency=1.):
        ...     return amplitude * np.sin(2 * np.pi * frequency * x)
        >>> def sine_deriv(x, amplitude=1., frequency=1.):
        ...     return 2 * np.pi * amplitude * np.cos(2 * np.pi * frequency * x)
        >>> SineModel = custom_model(sine_model, fit_deriv=sine_deriv)

    Create an instance of the custom model and evaluate it::

        >>> model = SineModel()
        >>> model(0.25)
        1.0

    This model instance can now be used like a usual astropy model.

    The next example demonstrates a 2D Moffat function model, and also
    demonstrates the support for docstrings (this example could also include
    a derivative, but it has been omitted for simplicity)::

        >>> @custom_model
        ... def Moffat2D(x, y, amplitude=1.0, x_0=0.0, y_0=0.0, gamma=1.0,
        ...            alpha=1.0):
        ...     \"\"\"Two dimensional Moffat function.\"\"\"
        ...     rr_gg = ((x - x_0) ** 2 + (y - y_0) ** 2) / gamma ** 2
        ...     return amplitude * (1 + rr_gg) ** (-alpha)
        ...
        >>> print(Moffat2D.__doc__)
        Two dimensional Moffat function.
        >>> model = Moffat2D()
        >>> model(1, 1)  # doctest: +FLOAT_CMP
        0.3333333333333333
    """
    ...

def render_model(model, arr=..., coords=...): # -> NDArray[float64]:
    """
    Evaluates a model on an input array. Evaluation is limited to
    a bounding box if the `Model.bounding_box` attribute is set.

    Parameters
    ----------
    model : `Model`
        Model to be evaluated.
    arr : `numpy.ndarray`, optional
        Array on which the model is evaluated.
    coords : array-like, optional
        Coordinate arrays mapping to ``arr``, such that
        ``arr[coords] == arr``.

    Returns
    -------
    array : `numpy.ndarray`
        The model evaluated on the input ``arr`` or a new array from
        ``coords``.
        If ``arr`` and ``coords`` are both `None`, the returned array is
        limited to the `Model.bounding_box` limits. If
        `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be passed.

    Examples
    --------
    :ref:`astropy:bounding-boxes`
    """
    ...

def hide_inverse(model):
    """
    This is a convenience function intended to disable automatic generation
    of the inverse in compound models by disabling one of the constituent
    model's inverse. This is to handle cases where user provided inverse
    functions are not compatible within an expression.

    Example:
        compound_model.inverse = hide_inverse(m1) + m2 + m3

    This will insure that the defined inverse itself won't attempt to
    build its own inverse, which would otherwise fail in this example
    (e.g., m = m1 + m2 + m3 happens to raises an exception for this
    reason.)

    Note that this permanently disables it. To prevent that either copy
    the model or restore the inverse later.
    """
    ...

