"""
This type stub file was generated by pyright.
"""

import abc
import numpy as np
from typing import Any, Callable, Dict, List, Tuple

"""
This module is to contain an improved bounding box
"""
__all__ = ['ModelBoundingBox', 'CompoundBoundingBox']
_BaseInterval = ...
class _Interval(_BaseInterval):
    """
    A single input's bounding box interval.

    Parameters
    ----------
    lower : float
        The lower bound of the interval

    upper : float
        The upper bound of the interval

    Methods
    -------
    validate :
        Contructs a valid interval

    outside :
        Determine which parts of an input array are outside the interval.

    domain :
        Contructs a discretization of the points inside the interval.
    """
    def __repr__(self): # -> str:
        ...
    
    def copy(self): # -> Self@_Interval:
        ...
    
    @classmethod
    def validate(cls, interval): # -> Self@_Interval:
        """
        Construct and validate an interval

        Parameters
        ----------
        interval : iterable
            A representation of the interval.

        Returns
        -------
        A validated interval.
        """
        ...
    
    def outside(self, _input: np.ndarray): # -> Any:
        """
        Parameters
        ----------
        _input : np.ndarray
            The evaluation input in the form of an array.

        Returns
        -------
        Boolean array indicating which parts of _input are outside the interval:
            True  -> position outside interval
            False -> position inside  interval
        """
        ...
    
    def domain(self, resolution): # -> NDArray[signedinteger[Any]]:
        ...
    


_ignored_interval = ...
def get_index(model, key) -> int:
    """
    Get the input index corresponding to the given key.
        Can pass in either:
            the string name of the input or
            the input index itself.
    """
    ...

def get_name(model, index: int):
    """Get the input name corresponding to the input index"""
    ...

class _BoundingDomain(abc.ABC):
    """
    Base class for ModelBoundingBox and CompoundBoundingBox.
        This is where all the `~astropy.modeling.core.Model` evaluation
        code for evaluating with a bounding box is because it is common
        to both types of bounding box.

    Parameters
    ----------
    model : `~astropy.modeling.Model`
        The Model this bounding domain is for.

    prepare_inputs :
        Generates the necessary input information so that model can
        be evaluated only for input points entirely inside bounding_box.
        This needs to be implemented by a subclass. Note that most of
        the implementation is in ModelBoundingBox.

    prepare_outputs :
        Fills the output values in for any input points outside the
        bounding_box.

    evaluate :
        Performs a complete model evaluation while enforcing the bounds
        on the inputs and returns a complete output.
    """
    def __init__(self, model, ignored: List[int] = ..., order: str = ...) -> None:
        ...
    
    @property
    def model(self):
        ...
    
    @property
    def order(self) -> str:
        ...
    
    @property
    def ignored(self) -> List[int]:
        ...
    
    @property
    def ignored_inputs(self) -> List[str]:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    
    @abc.abstractmethod
    def fix_inputs(self, model, fixed_inputs: dict):
        """
        Fix the bounding_box for a `fix_inputs` compound model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The new model for which this will be a bounding_box
        fixed_inputs : dict
            Dictionary of inputs which have been fixed by this bounding box.
        """
        ...
    
    @abc.abstractmethod
    def prepare_inputs(self, input_shape, inputs) -> Tuple[Any, Any, Any]:
        """
        Get prepare the inputs with respect to the bounding box.

        Parameters
        ----------
        input_shape : tuple
            The shape that all inputs have be reshaped/broadcasted into
        inputs : list
            List of all the model inputs

        Returns
        -------
        valid_inputs : list
            The inputs reduced to just those inputs which are all inside
            their respective bounding box intervals
        valid_index : array_like
            array of all indices inside the bounding box
        all_out: bool
            if all of the inputs are outside the bounding_box
        """
        ...
    
    def prepare_outputs(self, valid_outputs, valid_index, input_shape, fill_value): # -> list[Unknown]:
        """
        Fill in all the outputs of the model corresponding to inputs
        outside the bounding_box, adjusting any single output model so that
        its output becomes a list of containing that output.

        Parameters
        ----------
        valid_outputs : list
            The list of outputs from the model corresponding to inputs
            inside the bounding box
        valid_index : array_like
            array of all indices of inputs inside the bounding box
        input_shape : tuple
            The shape that all inputs have be reshaped/broadcasted into
        fill_value : float
            The value which will be assigned to inputs which are outside
            the bounding box
        """
        ...
    
    def evaluate(self, evaluate: Callable, inputs, fill_value): # -> tuple[Quantity | Any | Unknown, ...]:
        """
        Perform full model evaluation steps:
            prepare_inputs -> evaluate -> prepare_outputs -> set output units

        Parameters
        ----------
        evaluate : callable
            callable which takes in the valid inputs to evaluate model
        valid_inputs : list
            The inputs reduced to just those inputs which are all inside
            their respective bounding box intervals
        valid_index : array_like
            array of all indices inside the bounding box
        fill_value : float
            The value which will be assigned to inputs which are outside
            the bounding box
        """
        ...
    


class ModelBoundingBox(_BoundingDomain):
    """
    A model's bounding box

    Parameters
    ----------
    intervals : dict
        A dictionary containing all the intervals for each model input
            keys   -> input index
            values -> interval for that index

    model : `~astropy.modeling.Model`
        The Model this bounding_box is for.

    ignored : list
        A list containing all the inputs (index) which will not be
        checked for whether or not their elements are in/out of an interval.

    order : optional, str
        The ordering that is assumed for the tuple representation of this
        bounding_box. Options: 'C': C/Python order, e.g. z, y, x.
        (default), 'F': Fortran/mathematical notation order, e.g. x, y, z.
    """
    def __init__(self, intervals: Dict[int, _Interval], model, ignored: List[int] = ..., order: str = ...) -> None:
        ...
    
    def copy(self, ignored=...): # -> ModelBoundingBox:
        ...
    
    @property
    def intervals(self) -> Dict[int, _Interval]:
        """Return bounding_box labeled using input positions"""
        ...
    
    @property
    def named_intervals(self) -> Dict[str, _Interval]:
        """Return bounding_box labeled using input names"""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> List[int] | bool:
        ...
    
    def has_interval(self, key): # -> bool:
        ...
    
    def __getitem__(self, key): # -> _Interval:
        """Get bounding_box entries by either input name or input index"""
        ...
    
    def bounding_box(self, order: str = ...): # -> tuple[Unknown, ...] | tuple[tuple[Unknown, ...], ...]:
        """
        Return the old tuple of tuples representation of the bounding_box
            order='C' corresponds to the old bounding_box ordering
            order='F' corresponds to the gwcs bounding_box ordering.
        """
        ...
    
    def __eq__(self, value) -> bool:
        """Note equality can be either with old representation or new one."""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Validate and store interval under key (input index or input name)."""
        ...
    
    def __delitem__(self, key): # -> None:
        """Delete stored interval"""
        ...
    
    @classmethod
    def validate(cls, model, bounding_box, ignored: list = ..., order: str = ..., _preserve_ignore: bool = ..., **kwargs): # -> Self@ModelBoundingBox:
        """
        Construct a valid bounding box for a model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The model for which this will be a bounding_box
        bounding_box : dict, tuple
            A possible representation of the bounding box
        order : optional, str
            The order that a tuple representation will be assumed to be
                Default: 'C'
        """
        ...
    
    def fix_inputs(self, model, fixed_inputs: dict, _keep_ignored=...): # -> ModelBoundingBox:
        """
        Fix the bounding_box for a `fix_inputs` compound model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The new model for which this will be a bounding_box
        fixed_inputs : dict
            Dictionary of inputs which have been fixed by this bounding box.
        keep_ignored : bool
            Keep the ignored inputs of the bounding box (internal argument only)
        """
        ...
    
    @property
    def dimension(self): # -> int:
        ...
    
    def domain(self, resolution, order: str = ...): # -> list[NDArray[signedinteger[Any]] | Unknown]:
        ...
    
    def prepare_inputs(self, input_shape, inputs) -> Tuple[Any, Any, Any]:
        """
        Get prepare the inputs with respect to the bounding box.

        Parameters
        ----------
        input_shape : tuple
            The shape that all inputs have be reshaped/broadcasted into
        inputs : list
            List of all the model inputs

        Returns
        -------
        valid_inputs : list
            The inputs reduced to just those inputs which are all inside
            their respective bounding box intervals
        valid_index : array_like
            array of all indices inside the bounding box
        all_out: bool
            if all of the inputs are outside the bounding_box
        """
        ...
    


_BaseSelectorArgument = ...
class _SelectorArgument(_BaseSelectorArgument):
    """
    Contains a single CompoundBoundingBox slicing input.

    Parameters
    ----------
    index : int
        The index of the input in the input list

    ignore : bool
        Whether or not this input will be ignored by the bounding box.

    Methods
    -------
    validate :
        Returns a valid SelectorArgument for a given model.

    get_selector :
        Returns the value of the input for use in finding the correct
        bounding_box.

    get_fixed_value :
        Gets the slicing value from a fix_inputs set of values.
    """
    def __new__(cls, index, ignore): # -> Self@_SelectorArgument:
        ...
    
    @classmethod
    def validate(cls, model, argument, ignored: bool = ...): # -> Self@_SelectorArgument:
        """
        Construct a valid selector argument for a CompoundBoundingBox.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The model for which this will be an argument for.
        argument : int or str
            A representation of which evaluation input to use
        ignored : optional, bool
            Whether or not to ignore this argument in the ModelBoundingBox.

        Returns
        -------
        Validated selector_argument
        """
        ...
    
    def get_selector(self, *inputs): # -> tuple[Unknown, ...]:
        """
        Get the selector value corresponding to this argument

        Parameters
        ----------
        *inputs :
            All the processed model evaluation inputs.
        """
        ...
    
    def name(self, model) -> str:
        """
        Get the name of the input described by this selector argument

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model this selector argument is for.
        """
        ...
    
    def pretty_repr(self, model): # -> str:
        """
        Get a pretty-print representation of this object

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model this selector argument is for.
        """
        ...
    
    def get_fixed_value(self, model, values: dict):
        """
        Gets the value fixed input corresponding to this argument

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model this selector argument is for.

        values : dict
            Dictionary of fixed inputs.
        """
        ...
    
    def is_argument(self, model, argument) -> bool:
        """
        Determine if passed argument is described by this selector argument

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model this selector argument is for.

        argument : int or str
            A representation of which evaluation input is being used
        """
        ...
    
    def named_tuple(self, model): # -> tuple[str, Unknown]:
        """
        Get a tuple representation of this argument using the input
        name from the model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model this selector argument is for.
        """
        ...
    


class _SelectorArguments(tuple):
    """
    Contains the CompoundBoundingBox slicing description

    Parameters
    ----------
    input_ :
        The SelectorArgument values

    Methods
    -------
    validate :
        Returns a valid SelectorArguments for its model.

    get_selector :
        Returns the selector a set of inputs corresponds to.

    is_selector :
        Determines if a selector is correctly formatted for this CompoundBoundingBox.

    get_fixed_value :
        Gets the selector from a fix_inputs set of values.
    """
    _kept_ignore = ...
    def __new__(cls, input_: Tuple[_SelectorArgument], kept_ignore: List = ...): # -> Self@_SelectorArguments:
        ...
    
    def pretty_repr(self, model): # -> str:
        """
        Get a pretty-print representation of this object

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.
        """
        ...
    
    @property
    def ignore(self): # -> list[Unknown]:
        """Get the list of ignored inputs"""
        ...
    
    @property
    def kept_ignore(self): # -> None:
        """The arguments to persist in ignoring"""
        ...
    
    @classmethod
    def validate(cls, model, arguments, kept_ignore: List = ...): # -> Self@_SelectorArguments:
        """
        Construct a valid Selector description for a CompoundBoundingBox.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        arguments :
            The individual argument informations

        kept_ignore :
            Arguments to persist as ignored
        """
        ...
    
    def get_selector(self, *inputs): # -> tuple[Unknown, ...]:
        """
        Get the selector corresponding to these inputs

        Parameters
        ----------
        *inputs :
            All the processed model evaluation inputs.
        """
        ...
    
    def is_selector(self, _selector): # -> bool:
        """
        Determine if this is a reasonable selector

        Parameters
        ----------
        _selector : tuple
            The selector to check
        """
        ...
    
    def get_fixed_values(self, model, values: dict): # -> tuple[Unknown, ...]:
        """
        Gets the value fixed input corresponding to this argument

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        values : dict
            Dictionary of fixed inputs.
        """
        ...
    
    def is_argument(self, model, argument) -> bool:
        """
        Determine if passed argument is one of the selector arguments

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        argument : int or str
            A representation of which evaluation input is being used
        """
        ...
    
    def selector_index(self, model, argument): # -> int:
        """
        Get the index of the argument passed in the selector tuples

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        argument : int or str
            A representation of which argument is being used
        """
        ...
    
    def reduce(self, model, argument): # -> _SelectorArguments:
        """
        Reduce the selector arguments by the argument given

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        argument : int or str
            A representation of which argument is being used
        """
        ...
    
    def add_ignore(self, model, argument): # -> _SelectorArguments:
        """
        Add argument to the kept_ignore list

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.

        argument : int or str
            A representation of which argument is being used
        """
        ...
    
    def named_tuple(self, model): # -> tuple[Unknown, ...]:
        """
        Get a tuple of selector argument tuples using input names

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The Model these selector arguments are for.
        """
        ...
    


class CompoundBoundingBox(_BoundingDomain):
    """
    A model's compound bounding box

    Parameters
    ----------
    bounding_boxes : dict
        A dictionary containing all the ModelBoundingBoxes that are possible
            keys   -> _selector (extracted from model inputs)
            values -> ModelBoundingBox

    model : `~astropy.modeling.Model`
        The Model this compound bounding_box is for.

    selector_args : _SelectorArguments
        A description of how to extract the selectors from model inputs.

    create_selector : optional
        A method which takes in the selector and the model to return a
        valid bounding corresponding to that selector. This can be used
        to construct new bounding_boxes for previously undefined selectors.
        These new boxes are then stored for future lookups.

    order : optional, str
        The ordering that is assumed for the tuple representation of the
        bounding_boxes.
    """
    def __init__(self, bounding_boxes: Dict[Any, ModelBoundingBox], model, selector_args: _SelectorArguments, create_selector: Callable = ..., ignored: List[int] = ..., order: str = ...) -> None:
        ...
    
    def copy(self): # -> CompoundBoundingBox:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def bounding_boxes(self) -> Dict[Any, ModelBoundingBox]:
        ...
    
    @property
    def selector_args(self) -> _SelectorArguments:
        ...
    
    @selector_args.setter
    def selector_args(self, value): # -> None:
        ...
    
    @property
    def named_selector_tuple(self) -> tuple:
        ...
    
    @property
    def create_selector(self): # -> (...) -> Unknown:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __eq__(self, value) -> bool:
        ...
    
    @classmethod
    def validate(cls, model, bounding_box: dict, selector_args=..., create_selector=..., ignored: list = ..., order: str = ..., _preserve_ignore: bool = ..., **kwarg): # -> Self@CompoundBoundingBox:
        """
        Construct a valid compound bounding box for a model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The model for which this will be a bounding_box
        bounding_box : dict
            Dictionary of possible bounding_box respresentations
        selector_args : optional
            Description of the selector arguments
        create_selector : optional, callable
            Method for generating new selectors
        order : optional, str
            The order that a tuple representation will be assumed to be
                Default: 'C'
        """
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __getitem__(self, key):
        ...
    
    def prepare_inputs(self, input_shape, inputs) -> Tuple[Any, Any, Any]:
        """
        Get prepare the inputs with respect to the bounding box.

        Parameters
        ----------
        input_shape : tuple
            The shape that all inputs have be reshaped/broadcasted into
        inputs : list
            List of all the model inputs

        Returns
        -------
        valid_inputs : list
            The inputs reduced to just those inputs which are all inside
            their respective bounding box intervals
        valid_index : array_like
            array of all indices inside the bounding box
        all_out: bool
            if all of the inputs are outside the bounding_box
        """
        ...
    
    def fix_inputs(self, model, fixed_inputs: dict): # -> CompoundBoundingBox | ModelBoundingBox:
        """
        Fix the bounding_box for a `fix_inputs` compound model.

        Parameters
        ----------
        model : `~astropy.modeling.Model`
            The new model for which this will be a bounding_box
        fixed_inputs : dict
            Dictionary of inputs which have been fixed by this bounding box.
        """
        ...
    


