"""
This type stub file was generated by pyright.
"""

import abc
from .core import FittableModel

"""Spline models and fitters."""
__all__ = ['Spline1D', 'SplineInterpolateFitter', 'SplineSmoothingFitter', 'SplineExactKnotsFitter', 'SplineSplrepFitter']
__doctest_requires__ = ...
class _Spline(FittableModel):
    """Base class for spline models"""
    _knot_names = ...
    _coeff_names = ...
    optional_inputs = ...
    def __init__(self, knots=..., coeffs=..., degree=..., bounds=..., n_models=..., model_set_axis=..., name=..., meta=...) -> None:
        ...
    
    @property
    def param_names(self): # -> tuple[Any, ...]:
        """
        Coefficient names generated based on the spline's degree and
        number of knots.
        """
        ...
    
    def evaluate(self, *args, **kwargs): # -> dict[str, Unknown]:
        """ Extract the optional kwargs passed to call """
        ...
    
    def __call__(self, *args, **kwargs): # -> Quantity | tuple[Quantity, ...]:
        """
        Make model callable to model evaluation
        """
        ...
    


class Spline1D(_Spline):
    """
    One dimensional Spline Model

    Parameters
    ----------
    knots :  optional
        Define the knots for the spline. Can be 1) the number of interior
        knots for the spline, 2) the array of all knots for the spline, or
        3) If both bounds are defined, the interior knots for the spline
    coeffs : optional
        The array of knot coefficients for the spline
    degree : optional
        The degree of the spline. It must be 1 <= degree <= 5, default is 3.
    bounds : optional
        The upper and lower bounds of the spline.

    Notes
    -----
    Much of the functionality of this model is provided by
    `scipy.interpolate.BSpline` which can be directly accessed via the
    bspline property.

    Fitting for this model is provided by wrappers for:
    `scipy.interpolate.UnivariateSpline`,
    `scipy.interpolate.InterpolatedUnivariateSpline`,
    and `scipy.interpolate.LSQUnivariateSpline`.

    If one fails to define any knots/coefficients, no parameters will
    be added to this model until a fitter is called. This is because
    some of the fitters for splines vary the number of parameters and so
    we cannot define the parameter set until after fitting in these cases.

    Since parameters are not necessarily known at model initialization,
    setting model parameters directly via the model interface has been
    disabled.

    Direct constructors are provided for this model which incorporate the
    fitting to data directly into model construction.

    Knot parameters are declared as "fixed" parameters by default to
    enable the use of other `astropy.modeling` fitters to be used to
    fit this model.

    Examples
    --------
    >>> import numpy as np
    >>> from astropy.modeling.models import Spline1D
    >>> from astropy.modeling import fitting
    >>> np.random.seed(42)
    >>> x = np.linspace(-3, 3, 50)
    >>> y = np.exp(-x**2) + 0.1 * np.random.randn(50)
    >>> xs = np.linspace(-3, 3, 1000)

    A 1D interpolating spline can be fit to data:

    >>> fitter = fitting.SplineInterpolateFitter()
    >>> spl = fitter(Spline1D(), x, y)

    Similarly, a smoothing spline can be fit to data:

    >>> fitter = fitting.SplineSmoothingFitter()
    >>> spl = fitter(Spline1D(), x, y, s=0.5)

    Similarly, a spline can be fit to data using an exact set of interior knots:

    >>> t = [-1, 0, 1]
    >>> fitter = fitting.SplineExactKnotsFitter()
    >>> spl = fitter(Spline1D(), x, y, t=t)
    """
    n_inputs = ...
    n_outputs = ...
    _separable = ...
    optional_inputs = ...
    def __init__(self, knots=..., coeffs=..., degree=..., bounds=..., n_models=..., model_set_axis=..., name=..., meta=...) -> None:
        ...
    
    @property
    def t(self): # -> NDArray[float64] | NDArray[Any] | NDArray[Unknown]:
        """
        The knots vector
        """
        ...
    
    @t.setter
    def t(self, value): # -> None:
        ...
    
    @property
    def t_interior(self): # -> ndarray[Any, dtype[float64]] | ndarray[Any, dtype[Any]] | ndarray[Any, dtype[Unknown]]:
        """
        The interior knots
        """
        ...
    
    @property
    def c(self): # -> NDArray[float64] | NDArray[Unknown]:
        """
        The coefficients vector
        """
        ...
    
    @c.setter
    def c(self, value): # -> None:
        ...
    
    @property
    def degree(self):
        """
        The degree of the spline polynomials
        """
        ...
    
    @property
    def tck(self): # -> tuple[NDArray[float64] | Unknown | NDArray[Any] | NDArray[Unknown], NDArray[float64] | Unknown | NDArray[Unknown], Unknown]:
        """
        Scipy 'tck' tuple representation
        """
        ...
    
    @tck.setter
    def tck(self, value): # -> None:
        ...
    
    @property
    def bspline(self):
        """
        Scipy bspline object representation
        """
        ...
    
    @bspline.setter
    def bspline(self, value): # -> None:
        ...
    
    @property
    def knots(self): # -> list[Any]:
        """
        Dictionary of knot parameters
        """
        ...
    
    @property
    def user_knots(self): # -> bool:
        """If the knots have been supplied by the user"""
        ...
    
    @user_knots.setter
    def user_knots(self, value): # -> None:
        ...
    
    @property
    def coeffs(self): # -> list[Any]:
        """
        Dictionary of coefficient parameters
        """
        ...
    
    def evaluate(self, *args, **kwargs):
        """
        Evaluate the spline.

        Parameters
        ----------
        x :
            (positional) The points where the model is evaluating the spline at
        nu : optional
            (kwarg) The derivative of the spline for evaluation, 0 <= nu <= degree + 1.
            Default: 0.
        """
        ...
    
    def derivative(self, nu=...): # -> Spline1D:
        """
        Create a spline that is the derivative of this one

        Parameters
        ----------
        nu : int, optional
            Derivative order, default is 1.
        """
        ...
    
    def antiderivative(self, nu=...): # -> Spline1D:
        """
        Create a spline that is an antiderivative of this one

        Parameters
        ----------
        nu : int, optional
            Antiderivative order, default is 1.

        Notes
        -----
        Assumes constant of integration is 0
        """
        ...
    


class _SplineFitter(abc.ABC):
    """
    Base Spline Fitter
    """
    def __init__(self) -> None:
        ...
    
    def __call__(self, model, x, y, z=..., **kwargs): # -> Spline1D:
        ...
    


class SplineInterpolateFitter(_SplineFitter):
    """
    Fit an interpolating spline
    """
    ...


class SplineSmoothingFitter(_SplineFitter):
    """
    Fit a smoothing spline
    """
    ...


class SplineExactKnotsFitter(_SplineFitter):
    """
    Fit a spline using least-squares regression.
    """
    ...


class SplineSplrepFitter(_SplineFitter):
    """
    Fit a spline using the `scipy.interpolate.splrep` function interface.
    """
    def __init__(self) -> None:
        ...
    


