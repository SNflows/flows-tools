"""
This type stub file was generated by pyright.
"""

from .transforms import CurvedTransform

__all__ = ['transform_coord_meta_from_wcs', 'WCSWorld2PixelTransform', 'WCSPixel2WorldTransform']
IDENTITY = ...
def transform_coord_meta_from_wcs(wcs, frame_class, slices=...):
    ...

def apply_slices(wcs, slices): # -> tuple[SlicedLowLevelWCS | Unknown, Unknown | Literal[False], tuple[int, ...] | list[int]]:
    """
    Take the input WCS and slices and return a sliced WCS for the transform and
    a mapping of world axes in the sliced WCS to the input WCS.
    """
    ...

def wcsapi_to_celestial_frame(wcs): # -> BaseCoordinateFrame | None:
    ...

class WCSWorld2PixelTransform(CurvedTransform):
    """
    WCS transformation from world to pixel coordinates
    """
    has_inverse = ...
    frame_in = ...
    def __init__(self, wcs, invert_xy=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @property
    def input_dims(self):
        ...
    
    def transform(self, world): # -> NDArray[float64]:
        ...
    
    transform_non_affine = ...
    def inverted(self): # -> WCSPixel2WorldTransform:
        """
        Return the inverse of the transform
        """
        ...
    


class WCSPixel2WorldTransform(CurvedTransform):
    """
    WCS transformation from pixel to world coordinates
    """
    has_inverse = ...
    def __init__(self, wcs, invert_xy=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @property
    def output_dims(self):
        ...
    
    def transform(self, pixel): # -> NDArray[float64]:
        ...
    
    transform_non_affine = ...
    def inverted(self): # -> WCSWorld2PixelTransform:
        """
        Return the inverse of the transform
        """
        ...
    


