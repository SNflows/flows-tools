"""
This type stub file was generated by pyright.
"""

__version__ = ...
__tabversion__ = ...
_is_identifier = ...
class LexError(Exception):
    def __init__(self, message, s) -> None:
        ...
    


class LexToken:
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class PlyLogger:
    def __init__(self, f) -> None:
        ...
    
    def critical(self, msg, *args, **kwargs): # -> None:
        ...
    
    def warning(self, msg, *args, **kwargs): # -> None:
        ...
    
    def error(self, msg, *args, **kwargs): # -> None:
        ...
    
    info = ...
    debug = ...


class NullLogger:
    def __getattribute__(self, name): # -> Self@NullLogger:
        ...
    
    def __call__(self, *args, **kwargs): # -> Self@NullLogger:
        ...
    


class Lexer:
    def __init__(self) -> None:
        ...
    
    def clone(self, object=...): # -> Self@Lexer:
        ...
    
    def writetab(self, lextab, outputdir=...): # -> None:
        ...
    
    def readtab(self, tabfile, fdict): # -> None:
        ...
    
    def input(self, s): # -> None:
        ...
    
    def begin(self, state): # -> None:
        ...
    
    def push_state(self, state): # -> None:
        ...
    
    def pop_state(self): # -> None:
        ...
    
    def current_state(self): # -> str:
        ...
    
    def skip(self, n): # -> None:
        ...
    
    def token(self): # -> LexToken | None:
        ...
    
    def __iter__(self): # -> Self@Lexer:
        ...
    
    def next(self): # -> LexToken:
        ...
    
    __next__ = ...


def get_caller_module_dict(levels): # -> dict[str, Any]:
    ...

class LexerReflect:
    def __init__(self, ldict, log=..., reflags=...) -> None:
        ...
    
    def get_all(self): # -> None:
        ...
    
    def validate_all(self): # -> bool:
        ...
    
    def get_tokens(self): # -> None:
        ...
    
    def validate_tokens(self): # -> None:
        ...
    
    def get_literals(self): # -> None:
        ...
    
    def validate_literals(self): # -> None:
        ...
    
    def get_states(self): # -> None:
        ...
    
    def get_rules(self): # -> None:
        ...
    
    def validate_rules(self): # -> None:
        ...
    
    def validate_module(self, module): # -> None:
        ...
    


def lex(module=..., object=..., debug=..., optimize=..., lextab=..., reflags=..., nowarn=..., outputdir=..., debuglog=..., errorlog=...):
    ...

def runmain(lexer=..., data=...): # -> None:
    ...

def TOKEN(r): # -> (f: Unknown) -> Unknown:
    ...

Token = ...
