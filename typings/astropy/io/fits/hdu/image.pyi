"""
This type stub file was generated by pyright.
"""

from .base import ExtensionHDU, _ValidHDU
from astropy.utils import lazyproperty

__all__ = ["Section", "PrimaryHDU", "ImageHDU"]
class _ImageBaseHDU(_ValidHDU):
    """FITS image HDU base class.

    Attributes
    ----------
    header
        image header

    data
        image data
    """
    standard_keyword_comments = ...
    def __init__(self, data=..., header=..., do_not_scale_image_data=..., uint=..., scale_back=..., ignore_blank=..., **kwargs) -> None:
        ...
    
    @classmethod
    def match_header(cls, header):
        """
        _ImageBaseHDU is sort of an abstract class for HDUs containing image
        data (as opposed to table data) and should never be used directly.
        """
        ...
    
    @property
    def is_image(self): # -> Literal[True]:
        ...
    
    @property
    def section(self): # -> Section:
        """
        Access a section of the image array without loading the entire array
        into memory.  The :class:`Section` object returned by this attribute is
        not meant to be used directly by itself.  Rather, slices of the section
        return the appropriate slice of the data, and loads *only* that section
        into memory.

        Sections are mostly obsoleted by memmap support, but should still be
        used to deal with very large scaled images.  See the
        :ref:`astropy:data-sections` section of the Astropy documentation for
        more details.
        """
        ...
    
    @property
    def shape(self): # -> tuple[int, ...]:
        """
        Shape of the image array--should be equivalent to ``self.data.shape``.
        """
        ...
    
    @property
    def header(self): # -> Header:
        ...
    
    @header.setter
    def header(self, header): # -> None:
        ...
    
    @lazyproperty
    def data(self): # -> ndarray[Unknown, Unknown] | NDArray[int8 | uint16 | uint32 | uint64 | float64 | float32] | None:
        """
        Image/array data as a `~numpy.ndarray`.

        Please remember that the order of axes on an Numpy array are opposite
        of the order specified in the FITS file.  For example for a 2D image
        the "rows" or y-axis are the first dimension, and the "columns" or
        x-axis are the second dimension.

        If the data is scaled using the BZERO and BSCALE parameters, this
        attribute returns the data scaled to its physical values unless the
        file was opened with ``do_not_scale_image_data=True``.
        """
        ...
    
    @data.setter
    def data(self, data): # -> NDArray[Unknown] | ndarray[Unknown, Unknown] | None:
        ...
    
    def update_header(self): # -> None:
        """
        Update the header keywords to agree with the data.
        """
        ...
    
    def scale(self, type=..., option=..., bscale=..., bzero=...): # -> None:
        """
        Scale image data by using ``BSCALE``/``BZERO``.

        Call to this method will scale `data` and update the keywords of
        ``BSCALE`` and ``BZERO`` in the HDU's header.  This method should only
        be used right before writing to the output file, as the data will be
        scaled and is therefore not very usable after the call.

        Parameters
        ----------
        type : str, optional
            destination data type, use a string representing a numpy
            dtype name, (e.g. ``'uint8'``, ``'int16'``, ``'float32'``
            etc.).  If is `None`, use the current data type.

        option : str, optional
            How to scale the data: ``"old"`` uses the original ``BSCALE`` and
            ``BZERO`` values from when the data was read/created (defaulting to
            1 and 0 if they don't exist). For integer data only, ``"minmax"``
            uses the minimum and maximum of the data to scale. User-specified
            ``bscale``/``bzero`` values always take precedence.

        bscale, bzero : int, optional
            User-specified ``BSCALE`` and ``BZERO`` values
        """
        ...
    


class Section:
    """
    Image section.

    Slices of this object load the corresponding section of an image array from
    the underlying FITS file on disk, and applies any BSCALE/BZERO factors.

    Section slices cannot be assigned to, and modifications to a section are
    not saved back to the underlying file.

    See the :ref:`astropy:data-sections` section of the Astropy documentation
    for more details.
    """
    def __init__(self, hdu) -> None:
        ...
    
    def __getitem__(self, key): # -> Any | ndarray[Any, dtype[Unknown]] | ndarray[Any, dtype[Any]]:
        ...
    


class PrimaryHDU(_ImageBaseHDU):
    """
    FITS primary HDU class.
    """
    _default_name = ...
    def __init__(self, data=..., header=..., do_not_scale_image_data=..., ignore_blank=..., uint=..., scale_back=...) -> None:
        """
        Construct a primary HDU.

        Parameters
        ----------
        data : array or ``astropy.io.fits.hdu.base.DELAYED``, optional
            The data in the HDU.

        header : `~astropy.io.fits.Header`, optional
            The header to be used (as a template).  If ``header`` is `None`, a
            minimal header will be provided.

        do_not_scale_image_data : bool, optional
            If `True`, image data is not scaled using BSCALE/BZERO values
            when read. (default: False)

        ignore_blank : bool, optional
            If `True`, the BLANK header keyword will be ignored if present.
            Otherwise, pixels equal to this value will be replaced with
            NaNs. (default: False)

        uint : bool, optional
            Interpret signed integer data where ``BZERO`` is the
            central value and ``BSCALE == 1`` as unsigned integer
            data.  For example, ``int16`` data with ``BZERO = 32768``
            and ``BSCALE = 1`` would be treated as ``uint16`` data.
            (default: True)

        scale_back : bool, optional
            If `True`, when saving changes to a file that contained scaled
            image data, restore the data to the original type and reapply the
            original BSCALE/BZERO values.  This could lead to loss of accuracy
            if scaling back to integer values after performing floating point
            operations on the data.  Pseudo-unsigned integers are automatically
            rescaled unless scale_back is explicitly set to `False`.
            (default: None)
        """
        ...
    
    @classmethod
    def match_header(cls, header):
        ...
    
    def update_header(self): # -> None:
        ...
    


class ImageHDU(_ImageBaseHDU, ExtensionHDU):
    """
    FITS image extension HDU class.
    """
    _extension = ...
    def __init__(self, data=..., header=..., name=..., do_not_scale_image_data=..., uint=..., scale_back=..., ver=...) -> None:
        """
        Construct an image HDU.

        Parameters
        ----------
        data : array
            The data in the HDU.

        header : `~astropy.io.fits.Header`
            The header to be used (as a template).  If ``header`` is
            `None`, a minimal header will be provided.

        name : str, optional
            The name of the HDU, will be the value of the keyword
            ``EXTNAME``.

        do_not_scale_image_data : bool, optional
            If `True`, image data is not scaled using BSCALE/BZERO values
            when read. (default: False)

        uint : bool, optional
            Interpret signed integer data where ``BZERO`` is the
            central value and ``BSCALE == 1`` as unsigned integer
            data.  For example, ``int16`` data with ``BZERO = 32768``
            and ``BSCALE = 1`` would be treated as ``uint16`` data.
            (default: True)

        scale_back : bool, optional
            If `True`, when saving changes to a file that contained scaled
            image data, restore the data to the original type and reapply the
            original BSCALE/BZERO values.  This could lead to loss of accuracy
            if scaling back to integer values after performing floating point
            operations on the data.  Pseudo-unsigned integers are automatically
            rescaled unless scale_back is explicitly set to `False`.
            (default: None)

        ver : int > 0 or None, optional
            The ver of the HDU, will be the value of the keyword ``EXTVER``.
            If not given or None, it defaults to the value of the ``EXTVER``
            card of the ``header`` or 1.
            (default: None)
        """
        ...
    
    @classmethod
    def match_header(cls, header): # -> bool:
        ...
    


class _IndexInfo:
    def __init__(self, indx, naxis) -> None:
        ...
    


