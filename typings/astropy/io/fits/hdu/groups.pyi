"""
This type stub file was generated by pyright.
"""

from .image import PrimaryHDU
from .table import _TableLikeHDU
from astropy.io.fits.fitsrec import FITS_rec, FITS_record
from astropy.utils import lazyproperty

class Group(FITS_record):
    """
    One group of the random group data.
    """
    def __init__(self, input, row=..., start=..., end=..., step=..., base=...) -> None:
        ...
    
    @property
    def parnames(self):
        ...
    
    @property
    def data(self): # -> Self@Group:
        ...
    
    def par(self, parname):
        """
        Get the group parameter value.
        """
        ...
    
    def setpar(self, parname, value): # -> None:
        """
        Set the group parameter value.
        """
        ...
    


class GroupData(FITS_rec):
    """
    Random groups data object.

    Allows structured access to FITS Group data in a manner analogous
    to tables.
    """
    _record_type = Group
    def __new__(cls, input=..., bitpix=..., pardata=..., parnames=..., bscale=..., bzero=..., parbscales=..., parbzeros=...): # -> recarray[Any, dtype[Any]]:
        """
        Parameters
        ----------
        input : array or FITS_rec instance
            input data, either the group data itself (a
            `numpy.ndarray`) or a record array (`FITS_rec`) which will
            contain both group parameter info and the data.  The rest
            of the arguments are used only for the first case.

        bitpix : int
            data type as expressed in FITS ``BITPIX`` value (8, 16, 32,
            64, -32, or -64)

        pardata : sequence of array
            parameter data, as a list of (numeric) arrays.

        parnames : sequence of str
            list of parameter names.

        bscale : int
            ``BSCALE`` of the data

        bzero : int
            ``BZERO`` of the data

        parbscales : sequence of int
            list of bscales for the parameters

        parbzeros : sequence of int
            list of bzeros for the parameters
        """
        ...
    
    def __array_finalize__(self, obj): # -> None:
        ...
    
    def __getitem__(self, key): # -> GroupData | Any | NDArray[Any] | _VLF | _record_type:
        ...
    
    @property
    def data(self): # -> NDArray[Any] | _VLF:
        """
        The raw group data represented as a multi-dimensional `numpy.ndarray`
        array.
        """
        ...
    
    def par(self, parname): # -> NDArray[Any] | _VLF | NDArray[bool_]:
        """
        Get the group parameter values.
        """
        ...
    


class GroupsHDU(PrimaryHDU, _TableLikeHDU):
    """
    FITS Random Groups HDU class.

    See the :ref:`astropy:random-groups` section in the Astropy documentation
    for more details on working with this type of HDU.
    """
    _bitpix2tform = ...
    _data_type = GroupData
    _data_field = ...
    def __init__(self, data=..., header=...) -> None:
        ...
    
    @classmethod
    def match_header(cls, header): # -> bool:
        ...
    
    @lazyproperty
    def data(self): # -> _data_type | None:
        """
        The data of a random group FITS file will be like a binary table's
        data.
        """
        ...
    
    @lazyproperty
    def parnames(self): # -> list[Header | _HeaderCommentaryCards | Unknown | None]:
        """The names of the group parameters as described by the header."""
        ...
    
    @lazyproperty
    def columns(self): # -> Any | ColDefs | None:
        ...
    
    @property
    def is_image(self): # -> Literal[False]:
        ...
    
    @property
    def size(self): # -> Literal[0]:
        """
        Returns the size (in bytes) of the HDU's data part.
        """
        ...
    
    def update_header(self): # -> None:
        ...
    


