"""
This type stub file was generated by pyright.
"""

from .low_level_api import BaseLowLevelWCS
from .high_level_api import HighLevelWCSMixin
from .wrappers import SlicedLowLevelWCS

__all__ = ['custom_ctype_to_ucd_mapping', 'SlicedFITSWCS', 'FITSWCSAPIMixin']
C_SI = ...
VELOCITY_FRAMES = ...
CTYPE_TO_UCD1 = ...
CTYPE_TO_UCD1_CUSTOM = ...
class custom_ctype_to_ucd_mapping:
    """
    A context manager that makes it possible to temporarily add new CTYPE to
    UCD1+ mapping used by :attr:`FITSWCSAPIMixin.world_axis_physical_types`.

    Parameters
    ----------
    mapping : dict
        A dictionary mapping a CTYPE value to a UCD1+ value

    Examples
    --------

    Consider a WCS with the following CTYPE::

        >>> from astropy.wcs import WCS
        >>> wcs = WCS(naxis=1)
        >>> wcs.wcs.ctype = ['SPAM']

    By default, :attr:`FITSWCSAPIMixin.world_axis_physical_types` returns `None`,
    but this can be overridden::

        >>> wcs.world_axis_physical_types
        [None]
        >>> with custom_ctype_to_ucd_mapping({'SPAM': 'food.spam'}):
        ...     wcs.world_axis_physical_types
        ['food.spam']
    """
    def __init__(self, mapping) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type, value, tb): # -> None:
        ...
    


class SlicedFITSWCS(SlicedLowLevelWCS, HighLevelWCSMixin):
    ...


class FITSWCSAPIMixin(BaseLowLevelWCS, HighLevelWCSMixin):
    """
    A mix-in class that is intended to be inherited by the
    :class:`~astropy.wcs.WCS` class and provides the low- and high-level WCS API
    """
    @property
    def pixel_n_dim(self):
        ...
    
    @property
    def world_n_dim(self): # -> int:
        ...
    
    @property
    def array_shape(self): # -> tuple[int, ...] | None:
        ...
    
    @array_shape.setter
    def array_shape(self, value): # -> None:
        ...
    
    @property
    def pixel_shape(self): # -> tuple[int, ...] | None:
        ...
    
    @pixel_shape.setter
    def pixel_shape(self, value): # -> None:
        ...
    
    @property
    def pixel_bounds(self): # -> list[Unknown]:
        ...
    
    @pixel_bounds.setter
    def pixel_bounds(self, value): # -> None:
        ...
    
    @property
    def world_axis_physical_types(self): # -> list[Unknown]:
        ...
    
    @property
    def world_axis_units(self): # -> list[Unknown]:
        ...
    
    @property
    def world_axis_names(self): # -> list[Unknown]:
        ...
    
    @property
    def axis_correlation_matrix(self): # -> NDArray[Any]:
        ...
    
    def pixel_to_world_values(self, *pixel_arrays): # -> tuple[Unknown, ...]:
        ...
    
    def world_to_pixel_values(self, *world_arrays): # -> tuple[Unknown, ...]:
        ...
    
    @property
    def world_axis_object_components(self):
        ...
    
    @property
    def world_axis_object_classes(self): # -> dict[Unknown, Unknown]:
        ...
    
    @property
    def serialized_classes(self): # -> Literal[False]:
        ...
    


