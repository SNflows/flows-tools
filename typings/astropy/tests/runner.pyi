"""
This type stub file was generated by pyright.
"""

"""Implements the Astropy TestRunner which is a thin wrapper around pytest."""
__all__ = ['TestRunner', 'TestRunnerBase', 'keyword']
class keyword:
    """
    A decorator to mark a method as keyword argument for the ``TestRunner``.

    Parameters
    ----------
    default_value : `object`
        The default value for the keyword argument. (Default: `None`)

    priority : `int`
        keyword argument methods are executed in order of descending priority.
    """
    def __init__(self, default_value=..., priority=...) -> None:
        ...
    
    def __call__(self, f): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
        ...
    


class TestRunnerBase:
    """
    The base class for the TestRunner.

    A test runner can be constructed by creating a subclass of this class and
    defining 'keyword' methods. These are methods that have the
    :class:`~astropy.tests.runner.keyword` decorator, these methods are used to
    construct allowed keyword arguments to the
    ``run_tests`` method as a way to allow
    customization of individual keyword arguments (and associated logic)
    without having to re-implement the whole
    ``run_tests`` method.

    Examples
    --------

    A simple keyword method::

        class MyRunner(TestRunnerBase):

            @keyword('default_value'):
            def spam(self, spam, kwargs):
                \"\"\"
                spam : `str`
                    The parameter description for the run_tests docstring.
                \"\"\"
                # Return value must be a list with a CLI parameter for pytest.
                return ['--spam={}'.format(spam)]
    """
    def __init__(self, base_path) -> None:
        ...
    
    def __new__(cls, *args, **kwargs): # -> Self@TestRunnerBase:
        ...
    
    RUN_TESTS_DOCSTRING = ...
    _required_dependencies = ...
    _missing_dependancy_error = ...
    def run_tests(self, **kwargs): # -> int | ExitCode:
        ...
    
    @classmethod
    def make_test_runner_in(cls, path): # -> (**kwargs: Unknown) -> (int | ExitCode):
        """
        Constructs a `TestRunner` to run in the given path, and returns a
        ``test()`` function which takes the same arguments as
        ``TestRunner.run_tests``.

        The returned ``test()`` function will be defined in the module this
        was called from.  This is used to implement the ``astropy.test()``
        function (or the equivalent for affiliated packages).
        """
        ...
    


class TestRunner(TestRunnerBase):
    """
    A test runner for astropy tests
    """
    def packages_path(self, packages, base_path, error=..., warning=...): # -> list[Unknown]:
        """
        Generates the path for multiple packages.

        Parameters
        ----------
        packages : str
            Comma separated string of packages.
        base_path : str
            Base path to the source code or documentation.
        error : str
            Error message to be raised as ``ValueError``. Individual package
            name and path can be accessed by ``{name}`` and ``{path}``
            respectively. No error is raised if `None`. (Default: `None`)
        warning : str
            Warning message to be issued. Individual package
            name and path can be accessed by ``{name}`` and ``{path}``
            respectively. No warning is issues if `None`. (Default: `None`)

        Returns
        -------
        paths : list of str
            List of strings of existing package paths.
        """
        ...
    
    @keyword(priority=1000)
    def coverage(self, coverage, kwargs): # -> list[Unknown]:
        ...
    
    @keyword(priority=1)
    def package(self, package, kwargs): # -> list[Unknown]:
        """
        package : str, optional
            The name of a specific package to test, e.g. 'io.fits' or
            'utils'. Accepts comma separated string to specify multiple
            packages. If nothing is specified all default tests are run.
        """
        ...
    
    @keyword()
    def test_path(self, test_path, kwargs): # -> list[Unknown]:
        """
        test_path : str, optional
            Specify location to test by path. May be a single file or
            directory. Must be specified absolutely or relative to the
            calling directory.
        """
        ...
    
    @keyword()
    def args(self, args, kwargs): # -> list[str]:
        """
        args : str, optional
            Additional arguments to be passed to ``pytest.main`` in the ``args``
            keyword argument.
        """
        ...
    
    @keyword(default_value=[])
    def plugins(self, plugins, kwargs): # -> list[Unknown]:
        """
        plugins : list, optional
            Plugins to be passed to ``pytest.main`` in the ``plugins`` keyword
            argument.
        """
        ...
    
    @keyword()
    def verbose(self, verbose, kwargs): # -> list[str]:
        """
        verbose : bool, optional
            Convenience option to turn on verbose output from pytest. Passing
            True is the same as specifying ``-v`` in ``args``.
        """
        ...
    
    @keyword()
    def pastebin(self, pastebin, kwargs): # -> list[str]:
        """
        pastebin : ('failed', 'all', None), optional
            Convenience option for turning on pytest pastebin output. Set to
            'failed' to upload info for failed tests, or 'all' to upload info
            for all tests.
        """
        ...
    
    @keyword(default_value='none')
    def remote_data(self, remote_data, kwargs): # -> list[str]:
        """
        remote_data : {'none', 'astropy', 'any'}, optional
            Controls whether to run tests marked with @pytest.mark.remote_data. This can be
            set to run no tests with remote data (``none``), only ones that use
            data from http://data.astropy.org (``astropy``), or all tests that
            use remote data (``any``). The default is ``none``.
        """
        ...
    
    @keyword()
    def pep8(self, pep8, kwargs): # -> list[str]:
        """
        pep8 : bool, optional
            Turn on PEP8 checking via the pytest-pep8 plugin and disable normal
            tests. Same as specifying ``--pep8 -k pep8`` in ``args``.
        """
        ...
    
    @keyword()
    def pdb(self, pdb, kwargs): # -> list[str]:
        """
        pdb : bool, optional
            Turn on PDB post-mortem analysis for failing tests. Same as
            specifying ``--pdb`` in ``args``.
        """
        ...
    
    @keyword()
    def open_files(self, open_files, kwargs): # -> list[str]:
        """
        open_files : bool, optional
            Fail when any tests leave files open.  Off by default, because
            this adds extra run time to the test suite.  Requires the
            ``psutil`` package.
        """
        ...
    
    @keyword(0)
    def parallel(self, parallel, kwargs): # -> list[str]:
        """
        parallel : int or 'auto', optional
            When provided, run the tests in parallel on the specified
            number of CPUs.  If parallel is ``'auto'``, it will use the all
            the cores on the machine.  Requires the ``pytest-xdist`` plugin.
        """
        ...
    
    @keyword()
    def docs_path(self, docs_path, kwargs): # -> list[Unknown]:
        """
        docs_path : str, optional
            The path to the documentation .rst files.
        """
        ...
    
    @keyword()
    def skip_docs(self, skip_docs, kwargs): # -> list[Unknown]:
        """
        skip_docs : `bool`, optional
            When `True`, skips running the doctests in the .rst files.
        """
        ...
    
    @keyword()
    def repeat(self, repeat, kwargs): # -> list[str]:
        """
        repeat : `int`, optional
            If set, specifies how many times each test should be run. This is
            useful for diagnosing sporadic failures.
        """
        ...
    
    def run_tests(self, **kwargs): # -> int | ExitCode:
        ...
    


