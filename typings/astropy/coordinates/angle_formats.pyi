"""
This type stub file was generated by pyright.
"""

from astropy.utils.decorators import deprecated

"""
This module contains formatting functions that are for internal use in
astropy.coordinates.angles. Mainly they are conversions from one format
of data to another.
"""
class _AngleParser:
    """
    Parses the various angle formats including:

       * 01:02:30.43 degrees
       * 1 2 0 hours
       * 1°2′3″
       * 1d2m3s
       * -1h2m3s
       * 1°2′3″N

    This class should not be used directly.  Use `parse_angle`
    instead.
    """
    _thread_local = ...
    def __init__(self) -> None:
        ...
    
    def parse(self, angle, unit, debug=...): # -> tuple[Any, Any]:
        ...
    


def check_hms_ranges(h, m, s): # -> None:
    """
    Checks that the given hour, minute and second are all within
    reasonable range.
    """
    ...

def parse_angle(angle, unit=..., debug=...): # -> tuple[Any, Any]:
    """
    Parses an input string value into an angle value.

    Parameters
    ----------
    angle : str
        A string representing the angle.  May be in one of the following forms:

            * 01:02:30.43 degrees
            * 1 2 0 hours
            * 1°2′3″
            * 1d2m3s
            * -1h2m3s

    unit : `~astropy.units.UnitBase` instance, optional
        The unit used to interpret the string.  If ``unit`` is not
        provided, the unit must be explicitly represented in the
        string, either at the end or as number separators.

    debug : bool, optional
        If `True`, print debugging information from the parser.

    Returns
    -------
    value, unit : tuple
        ``value`` is the value as a floating point number or three-part
        tuple, and ``unit`` is a `Unit` instance which is either the
        unit passed in or the one explicitly mentioned in the input
        string.
    """
    ...

def degrees_to_dms(d): # -> tuple[Any, Any, Any]:
    """
    Convert a floating-point degree value into a ``(degree, arcminute,
    arcsecond)`` tuple.
    """
    ...

@deprecated("dms_to_degrees (or creating an Angle with a tuple) has ambiguous " "behavior when the degree value is 0", alternative="another way of creating angles instead (e.g. a less " "ambiguous string like '-0d1m2.3s'")
def dms_to_degrees(d, m, s=...): # -> Any:
    """
    Convert degrees, arcminute, arcsecond to a float degrees value.
    """
    ...

@deprecated("hms_to_hours (or creating an Angle with a tuple) has ambiguous " "behavior when the hour value is 0", alternative="another way of creating angles instead (e.g. a less " "ambiguous string like '-0h1m2.3s'")
def hms_to_hours(h, m, s=...): # -> Any:
    """
    Convert hour, minute, second to a float hour value.
    """
    ...

def hms_to_degrees(h, m, s): # -> Any:
    """
    Convert hour, minute, second to a float degrees value.
    """
    ...

def hms_to_radians(h, m, s): # -> float | Any:
    """
    Convert hour, minute, second to a float radians value.
    """
    ...

def hms_to_dms(h, m, s): # -> tuple[Any, Any, Any]:
    """
    Convert degrees, arcminutes, arcseconds to an ``(hour, minute, second)``
    tuple.
    """
    ...

def hours_to_decimal(h): # -> float | NDArray[void] | Any:
    """
    Convert any parseable hour value into a float value.
    """
    ...

def hours_to_radians(h): # -> float | Any:
    """
    Convert an angle in Hours to Radians.
    """
    ...

def hours_to_hms(h): # -> tuple[Any, Any, Any]:
    """
    Convert an floating-point hour value into an ``(hour, minute,
    second)`` tuple.
    """
    ...

def radians_to_degrees(r): # -> float | Any:
    """
    Convert an angle in Radians to Degrees.
    """
    ...

def radians_to_hours(r): # -> float | Any:
    """
    Convert an angle in Radians to Hours.
    """
    ...

def radians_to_hms(r): # -> tuple[Any, Any, Any]:
    """
    Convert an angle in Radians to an ``(hour, minute, second)`` tuple.
    """
    ...

def radians_to_dms(r): # -> tuple[Any, Any, Any]:
    """
    Convert an angle in Radians to an ``(degree, arcminute,
    arcsecond)`` tuple.
    """
    ...

def sexagesimal_to_string(values, precision=..., pad=..., sep=..., fields=...): # -> str:
    """
    Given an already separated tuple of sexagesimal values, returns
    a string.

    See `hours_to_string` and `degrees_to_string` for a higher-level
    interface to this functionality.
    """
    ...

def hours_to_string(h, precision=..., pad=..., sep=..., fields=...): # -> str:
    """
    Takes a decimal hour value and returns a string formatted as hms with
    separator specified by the 'sep' parameter.

    ``h`` must be a scalar.
    """
    ...

def degrees_to_string(d, precision=..., pad=..., sep=..., fields=...): # -> str:
    """
    Takes a decimal hour value and returns a string formatted as dms with
    separator specified by the 'sep' parameter.

    ``d`` must be a scalar.
    """
    ...

