"""
This type stub file was generated by pyright.
"""

from astropy.coordinates.baseframe import frame_transform_graph
from astropy.coordinates.transformations import AffineTransform, DynamicMatrixTransform, FunctionTransformWithFiniteDifference
from .icrs import ICRS
from .gcrs import GCRS
from .ecliptic import BarycentricMeanEcliptic, BarycentricTrueEcliptic, CustomBarycentricEcliptic, GeocentricMeanEcliptic, GeocentricTrueEcliptic, HeliocentricEclipticIAU76, HeliocentricMeanEcliptic, HeliocentricTrueEcliptic

"""
Contains the transformation functions for getting to/from ecliptic systems.
"""
@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, GeocentricMeanEcliptic, finite_difference_frameattr_name='equinox')
def gcrs_to_geoecliptic(gcrs_coo, to_frame):
    ...

@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GeocentricMeanEcliptic, GCRS)
def geoecliptic_to_gcrs(from_coo, gcrs_frame): # -> Any:
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, BarycentricMeanEcliptic)
def icrs_to_baryecliptic(from_coo, to_frame):
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, BarycentricMeanEcliptic, ICRS)
def baryecliptic_to_icrs(from_coo, to_frame):
    ...

_NEED_ORIGIN_HINT = ...
@frame_transform_graph.transform(AffineTransform, ICRS, HeliocentricMeanEcliptic)
def icrs_to_helioecliptic(from_coo, to_frame): # -> tuple[Unknown, Unknown | CartesianRepresentation]:
    ...

@frame_transform_graph.transform(AffineTransform, HeliocentricMeanEcliptic, ICRS)
def helioecliptic_to_icrs(from_coo, to_frame): # -> tuple[Unknown, Unknown | CartesianRepresentation | tuple[CartesianRepresentation, CartesianRepresentation | Unbound]]:
    ...

@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, GeocentricTrueEcliptic, finite_difference_frameattr_name='equinox')
def gcrs_to_true_geoecliptic(gcrs_coo, to_frame):
    ...

@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GeocentricTrueEcliptic, GCRS)
def true_geoecliptic_to_gcrs(from_coo, gcrs_frame): # -> Any:
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, BarycentricTrueEcliptic)
def icrs_to_true_baryecliptic(from_coo, to_frame): # -> Any:
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, BarycentricTrueEcliptic, ICRS)
def true_baryecliptic_to_icrs(from_coo, to_frame): # -> Any:
    ...

@frame_transform_graph.transform(AffineTransform, ICRS, HeliocentricTrueEcliptic)
def icrs_to_true_helioecliptic(from_coo, to_frame): # -> tuple[Any, Unknown | CartesianRepresentation]:
    ...

@frame_transform_graph.transform(AffineTransform, HeliocentricTrueEcliptic, ICRS)
def true_helioecliptic_to_icrs(from_coo, to_frame): # -> tuple[Any, Unknown | CartesianRepresentation | tuple[CartesianRepresentation, CartesianRepresentation | Unbound]]:
    ...

@frame_transform_graph.transform(AffineTransform, HeliocentricEclipticIAU76, ICRS)
def ecliptic_to_iau76_icrs(from_coo, to_frame): # -> tuple[ndarray[Any, dtype[float64]] | Any, Unknown | CartesianRepresentation | tuple[CartesianRepresentation, CartesianRepresentation | Unbound]]:
    ...

@frame_transform_graph.transform(AffineTransform, ICRS, HeliocentricEclipticIAU76)
def icrs_to_iau76_ecliptic(from_coo, to_frame): # -> tuple[NDArray[float64] | Any, Unknown | CartesianRepresentation]:
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, CustomBarycentricEcliptic)
def icrs_to_custombaryecliptic(from_coo, to_frame): # -> NDArray[float64] | Any:
    ...

@frame_transform_graph.transform(DynamicMatrixTransform, CustomBarycentricEcliptic, ICRS)
def custombaryecliptic_to_icrs(from_coo, to_frame): # -> NDArray[float64] | Any:
    ...

