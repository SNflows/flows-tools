"""
This type stub file was generated by pyright.
"""

from astropy.utils.decorators import format_doc
from astropy.coordinates.baseframe import base_doc, frame_transform_graph
from astropy.coordinates.transformations import DynamicMatrixTransform, FunctionTransformWithFiniteDifference
from .baseradec import BaseRADecFrame, doc_components

__all__ = ['FK4', 'FK4NoETerms']
doc_footer_fk4 = ...
@format_doc(base_doc, components=doc_components, footer=doc_footer_fk4)
class FK4(BaseRADecFrame):
    """
    A coordinate or frame in the FK4 system.

    Note that this is a barycentric version of FK4 - that is, the origin for
    this frame is the Solar System Barycenter, *not* the Earth geocenter.

    The frame attributes are listed under **Other Parameters**.
    """
    equinox = ...
    obstime = ...


@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, FK4, FK4)
def fk4_to_fk4(fk4coord1, fk4frame2):
    ...

@format_doc(base_doc, components=doc_components, footer=doc_footer_fk4)
class FK4NoETerms(BaseRADecFrame):
    """
    A coordinate or frame in the FK4 system, but with the E-terms of aberration
    removed.

    The frame attributes are listed under **Other Parameters**.
    """
    equinox = ...
    obstime = ...


@frame_transform_graph.transform(DynamicMatrixTransform, FK4NoETerms, FK4NoETerms)
def fk4noe_to_fk4noe(fk4necoord1, fk4neframe2):
    ...

def fk4_e_terms(equinox): # -> tuple[Any, Any, Any]:
    """
    Return the e-terms of aberration vector

    Parameters
    ----------
    equinox : Time object
        The equinox for which to compute the e-terms
    """
    ...

@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, FK4, FK4NoETerms)
def fk4_to_fk4_no_e(fk4coord, fk4noeframe): # -> Any | FK4NoETerms:
    ...

@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, FK4NoETerms, FK4)
def fk4_no_e_to_fk4(fk4noecoord, fk4frame):
    ...

