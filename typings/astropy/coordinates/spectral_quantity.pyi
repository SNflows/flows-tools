"""
This type stub file was generated by pyright.
"""

from astropy.units.quantity import SpecificTypeQuantity
from astropy.units.decorators import quantity_input

__all__ = ['SpectralQuantity']
__doctest_skip__ = ...
KMS = ...
SPECTRAL_UNITS = ...
DOPPLER_CONVENTIONS = ...
class SpectralQuantity(SpecificTypeQuantity):
    """
    One or more value(s) with spectral units.

    The spectral units should be those for frequencies, wavelengths, energies,
    wavenumbers, or velocities (interpreted as Doppler velocities relative to a
    rest spectral value). The advantage of using this class over the regular
    `~astropy.units.Quantity` class is that in `SpectralQuantity`, the
    ``u.spectral`` equivalency is enabled by default (allowing automatic
    conversion between spectral units), and a preferred Doppler rest value and
    convention can be stored for easy conversion to/from velocities.

    Parameters
    ----------
    value : ndarray or `~astropy.units.Quantity` or `SpectralQuantity`
        Spectral axis data values.
    unit : unit-like
        Unit for the given data.
    doppler_rest : `~astropy.units.Quantity` ['speed'], optional
        The rest value to use for conversions from/to velocities
    doppler_convention : str, optional
        The convention to use when converting the spectral data to/from
        velocities.
    """
    _equivalent_unit = ...
    _include_easy_conversion_members = ...
    def __new__(cls, value, unit=..., doppler_rest=..., doppler_convention=..., **kwargs):
        ...
    
    def __array_finalize__(self, obj): # -> None:
        ...
    
    def __quantity_subclass__(self, unit): # -> tuple[Type[SpectralQuantity], Literal[True]] | tuple[Type[Quantity], Literal[False]]:
        ...
    
    def __array_ufunc__(self, function, method, *inputs, **kwargs): # -> Any | Self@SpectralQuantity | ndarray[Unknown, Unknown] | Quantity:
        ...
    
    @property
    def doppler_rest(self): # -> Any | None:
        """
        The rest value of the spectrum used for transformations to/from
        velocity space.

        Returns
        -------
        `~astropy.units.Quantity` ['speed']
            Rest value as an astropy `~astropy.units.Quantity` object.
        """
        ...
    
    @doppler_rest.setter
    @quantity_input(value=SPECTRAL_UNITS)
    def doppler_rest(self, value): # -> None:
        """
        New rest value needed for velocity-space conversions.

        Parameters
        ----------
        value : `~astropy.units.Quantity` ['speed']
            Rest value.
        """
        ...
    
    @property
    def doppler_convention(self): # -> Any | None:
        """
        The defined convention for conversions to/from velocity space.

        Returns
        -------
        str
            One of 'optical', 'radio', or 'relativistic' representing the
            equivalency used in the unit conversions.
        """
        ...
    
    @doppler_convention.setter
    def doppler_convention(self, value): # -> None:
        """
        New velocity convention used for velocity space conversions.

        Parameters
        ----------
        value

        Notes
        -----
        More information on the equations dictating the transformations can be
        found in the astropy documentation [1]_.

        References
        ----------
        .. [1] Astropy documentation: https://docs.astropy.org/en/stable/units/equivalencies.html#spectral-doppler-equivalencies

        """
        ...
    
    @quantity_input(doppler_rest=SPECTRAL_UNITS)
    def to(self, unit, equivalencies=..., doppler_rest=..., doppler_convention=...): # -> Self@SpectralQuantity | Any:
        """
        Return a new `~astropy.coordinates.SpectralQuantity` object with the specified unit.

        By default, the ``spectral`` equivalency will be enabled, as well as
        one of the Doppler equivalencies if converting to/from velocities.

        Parameters
        ----------
        unit : unit-like
            An object that represents the unit to convert to. Must be
            an `~astropy.units.UnitBase` object or a string parseable
            by the `~astropy.units` package, and should be a spectral unit.
        equivalencies : list of `~astropy.units.equivalencies.Equivalency`, optional
            A list of equivalence pairs to try if the units are not
            directly convertible (along with spectral).
            See :ref:`astropy:unit_equivalencies`.
            If not provided or ``[]``, spectral equivalencies will be used.
            If `None`, no equivalencies will be applied at all, not even any
            set globally or within a context.
        doppler_rest : `~astropy.units.Quantity` ['speed'], optional
            The rest value used when converting to/from velocities. This will
            also be set at an attribute on the output
            `~astropy.coordinates.SpectralQuantity`.
        doppler_convention : {'relativistic', 'optical', 'radio'}, optional
            The Doppler convention used when converting to/from velocities.
            This will also be set at an attribute on the output
            `~astropy.coordinates.SpectralQuantity`.

        Returns
        -------
        `SpectralQuantity`
            New spectral coordinate object with data converted to the new unit.
        """
        ...
    
    def to_value(self, unit=..., *args, **kwargs): # -> ndarray[Unknown, Unknown] | Any:
        ...
    


