"""
This type stub file was generated by pyright.
"""

from astropy.utils.decorators import deprecated_renamed_argument

__all__ = ["Parameter"]
class Parameter:
    r"""Cosmological parameter (descriptor).

    Should only be used with a :class:`~astropy.cosmology.Cosmology` subclass.

    Parameters
    ----------
    derived : bool (optional, keyword-only)
        Whether the Parameter is 'derived', default `False`.
        Derived parameters behave similarly to normal parameters, but are not
        sorted by the |Cosmology| signature (probably not there) and are not
        included in all methods. For reference, see ``Ode0`` in
        ``FlatFLRWMixin``, which removes :math:`\Omega_{de,0}`` as an
        independent parameter (:math:`\Omega_{de,0} \equiv 1 - \Omega_{tot}`).
    unit : unit-like or None (optional, keyword-only)
        The `~astropy.units.Unit` for the Parameter. If None (default) no
        unit as assumed.
    equivalencies : `~astropy.units.Equivalency` or sequence thereof
        Unit equivalencies for this Parameter.
    fvalidate : callable[[object, object, Any], Any] or str (optional, keyword-only)
        Function to validate the Parameter value from instances of the
        cosmology class. If "default", uses default validator to assign units
        (with equivalencies), if Parameter has units.
        For other valid string options, see ``Parameter._registry_validators``.
        'fvalidate' can also be set through a decorator with
        :meth:`~astropy.cosmology.Parameter.validator`.
    fmt : str (optional, keyword-only)
        `format` specification, used when making string representation
        of the containing Cosmology.
        See https://docs.python.org/3/library/string.html#formatspec

        .. deprecated::  5.1

    doc : str or None (optional, keyword-only)
        Parameter description.

    Examples
    --------
    For worked examples see :class:`~astropy.cosmology.FLRW`.
    """
    _registry_validators = ...
    @deprecated_renamed_argument("fmt", None, since="5.1")
    def __init__(self, *, derived=..., unit=..., equivalencies=..., fvalidate=..., fmt=..., doc=...) -> None:
        ...
    
    def __set_name__(self, cosmo_cls, name): # -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Parameter name."""
        ...
    
    @property
    def unit(self): # -> Unit | None:
        """Parameter unit."""
        ...
    
    @property
    def equivalencies(self):
        """Equivalencies used when initializing Parameter."""
        ...
    
    format_spec = ...
    @property
    def derived(self): # -> bool:
        """Whether the Parameter is derived; true parameters are not."""
        ...
    
    def __get__(self, cosmology, cosmo_cls=...): # -> Self@Parameter | Any:
        ...
    
    def __set__(self, cosmology, value): # -> None:
        """Allows attribute setting once. Raises AttributeError subsequently."""
        ...
    
    @property
    def fvalidate(self): # -> <callable subtype of str>:
        """Function to validate a potential value of this Parameter."""
        ...
    
    def validator(self, fvalidate): # -> Self@Parameter:
        """Make new Parameter with custom ``fvalidate``.

        Note: ``Parameter.fvalidator`` must be the top-most descriptor decorator.

        Parameters
        ----------
        fvalidate : callable[[type, type, Any], Any]

        Returns
        -------
        `~astropy.cosmology.Parameter`
            Copy of this Parameter but with custom ``fvalidate``.
        """
        ...
    
    def validate(self, cosmology, value):
        """Run the validator on this Parameter.

        Parameters
        ----------
        cosmology : `~astropy.cosmology.Cosmology` instance
        value : Any
            The object to validate.

        Returns
        -------
        Any
            The output of calling ``fvalidate(cosmology, self, value)``
            (yes, that parameter order).
        """
        ...
    
    @classmethod
    def register_validator(cls, key, fvalidate=...): # -> (fvalidate: Unknown) -> Unknown:
        """Decorator to register a new kind of validator function.

        Parameters
        ----------
        key : str
        fvalidate : callable[[object, object, Any], Any] or None, optional
            Value validation function.

        Returns
        -------
        ``validator`` or callable[``validator``]
            if validator is None returns a function that takes and registers a
            validator. This allows ``register_validator`` to be used as a
            decorator.
        """
        ...
    
    def clone(self, **kw): # -> Self@Parameter:
        """Clone this `Parameter`, changing any constructor argument.

        Parameters
        ----------
        **kw
            Passed to constructor. The current values, eg. ``fvalidate`` are
            used as the default values, so an empty ``**kw`` is an exact copy.

        Examples
        --------
        >>> p = Parameter()
        >>> p
        Parameter(derived=False, unit=None, equivalencies=[],
                  fvalidate='default', doc=None)

        >>> p.clone(unit="km")
        Parameter(derived=False, unit=Unit("km"), equivalencies=[],
                  fvalidate='default', doc=None)
        """
        ...
    
    def __eq__(self, other) -> bool:
        """Check Parameter equality. Only equal to other Parameter objects.

        Returns
        -------
        NotImplemented or True
            `True` if equal, `NotImplemented` otherwise. This allows `other` to
            be check for equality with ``other.__eq__``.

        Examples
        --------
        >>> p1, p2 = Parameter(unit="km"), Parameter(unit="km")
        >>> p1 == p2
        True

        >>> p3 = Parameter(unit="km / s")
        >>> p3 == p1
        False

        >>> p1 != 2
        True
        """
        ...
    
    def __repr__(self): # -> str:
        """String representation.

        ``eval(repr())`` should work, depending if contents like ``fvalidate``
        can be similarly round-tripped.
        """
        ...
    


