"""
This type stub file was generated by pyright.
"""

from astropy.utils.decorators import lazyproperty
from astropy.utils.exceptions import AstropyWarning

"""
Core units classes and functions
"""
__all__ = ['UnitsError', 'UnitsWarning', 'UnitConversionError', 'UnitTypeError', 'UnitBase', 'NamedUnit', 'IrreducibleUnit', 'Unit', 'CompositeUnit', 'PrefixUnit', 'UnrecognizedUnit', 'def_unit', 'get_current_unit_registry', 'set_enabled_units', 'add_enabled_units', 'set_enabled_equivalencies', 'add_enabled_equivalencies', 'set_enabled_aliases', 'add_enabled_aliases', 'dimensionless_unscaled', 'one']
UNITY = ...
class _UnitRegistry:
    """
    Manages a registry of the enabled units.
    """
    def __init__(self, init=..., equivalencies=..., aliases=...) -> None:
        ...
    
    @property
    def registry(self): # -> dict[Unknown, Unknown]:
        ...
    
    @property
    def all_units(self): # -> set[Unknown]:
        ...
    
    @property
    def non_prefix_units(self): # -> set[Unknown]:
        ...
    
    def set_enabled_units(self, units): # -> None:
        """
        Sets the units enabled in the unit registry.

        These units are searched when using
        `UnitBase.find_equivalent_units`, for example.

        Parameters
        ----------
        units : list of sequence, dict, or module
            This is a list of things in which units may be found
            (sequences, dicts or modules), or units themselves.  The
            entire set will be "enabled" for searching through by
            methods like `UnitBase.find_equivalent_units` and
            `UnitBase.compose`.
        """
        ...
    
    def add_enabled_units(self, units): # -> None:
        """
        Adds to the set of units enabled in the unit registry.

        These units are searched when using
        `UnitBase.find_equivalent_units`, for example.

        Parameters
        ----------
        units : list of sequence, dict, or module
            This is a list of things in which units may be found
            (sequences, dicts or modules), or units themselves.  The
            entire set will be added to the "enabled" set for
            searching through by methods like
            `UnitBase.find_equivalent_units` and `UnitBase.compose`.
        """
        ...
    
    def get_units_with_physical_type(self, unit): # -> set[Unknown]:
        """
        Get all units in the registry with the same physical type as
        the given unit.

        Parameters
        ----------
        unit : UnitBase instance
        """
        ...
    
    @property
    def equivalencies(self): # -> list[Unknown]:
        ...
    
    def set_enabled_equivalencies(self, equivalencies): # -> None:
        """
        Sets the equivalencies enabled in the unit registry.

        These equivalencies are used if no explicit equivalencies are given,
        both in unit conversion and in finding equivalent units.

        This is meant in particular for allowing angles to be dimensionless.
        Use with care.

        Parameters
        ----------
        equivalencies : list of tuple
            List of equivalent pairs, e.g., as returned by
            `~astropy.units.equivalencies.dimensionless_angles`.
        """
        ...
    
    def add_enabled_equivalencies(self, equivalencies): # -> None:
        """
        Adds to the set of equivalencies enabled in the unit registry.

        These equivalencies are used if no explicit equivalencies are given,
        both in unit conversion and in finding equivalent units.

        This is meant in particular for allowing angles to be dimensionless.
        Use with care.

        Parameters
        ----------
        equivalencies : list of tuple
            List of equivalent pairs, e.g., as returned by
            `~astropy.units.equivalencies.dimensionless_angles`.
        """
        ...
    
    @property
    def aliases(self): # -> dict[Unknown, Unknown]:
        ...
    
    def set_enabled_aliases(self, aliases): # -> None:
        """
        Set aliases for units.

        Parameters
        ----------
        aliases : dict of str, Unit
            The aliases to set. The keys must be the string aliases, and values
            must be the `astropy.units.Unit` that the alias will be mapped to.

        Raises
        ------
        ValueError
            If the alias already defines a different unit.

        """
        ...
    
    def add_enabled_aliases(self, aliases): # -> None:
        """
        Add aliases for units.

        Parameters
        ----------
        aliases : dict of str, Unit
            The aliases to add. The keys must be the string aliases, and values
            must be the `astropy.units.Unit` that the alias will be mapped to.

        Raises
        ------
        ValueError
            If the alias already defines a different unit.

        """
        ...
    


class _UnitContext:
    def __init__(self, init=..., equivalencies=...) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type, value, tb): # -> None:
        ...
    


_unit_registries = ...
def get_current_unit_registry(): # -> _UnitRegistry:
    ...

def set_enabled_units(units): # -> _UnitContext:
    """
    Sets the units enabled in the unit registry.

    These units are searched when using
    `UnitBase.find_equivalent_units`, for example.

    This may be used either permanently, or as a context manager using
    the ``with`` statement (see example below).

    Parameters
    ----------
    units : list of sequence, dict, or module
        This is a list of things in which units may be found
        (sequences, dicts or modules), or units themselves.  The
        entire set will be "enabled" for searching through by methods
        like `UnitBase.find_equivalent_units` and `UnitBase.compose`.

    Examples
    --------

    >>> from astropy import units as u
    >>> with u.set_enabled_units([u.pc]):
    ...     u.m.find_equivalent_units()
    ...
      Primary name | Unit definition | Aliases
    [
      pc           | 3.08568e+16 m   | parsec  ,
    ]
    >>> u.m.find_equivalent_units()
      Primary name | Unit definition | Aliases
    [
      AU           | 1.49598e+11 m   | au, astronomical_unit            ,
      Angstrom     | 1e-10 m         | AA, angstrom                     ,
      cm           | 0.01 m          | centimeter                       ,
      earthRad     | 6.3781e+06 m    | R_earth, Rearth                  ,
      jupiterRad   | 7.1492e+07 m    | R_jup, Rjup, R_jupiter, Rjupiter ,
      lsec         | 2.99792e+08 m   | lightsecond                      ,
      lyr          | 9.46073e+15 m   | lightyear                        ,
      m            | irreducible     | meter                            ,
      micron       | 1e-06 m         |                                  ,
      pc           | 3.08568e+16 m   | parsec                           ,
      solRad       | 6.957e+08 m     | R_sun, Rsun                      ,
    ]
    """
    ...

def add_enabled_units(units): # -> _UnitContext:
    """
    Adds to the set of units enabled in the unit registry.

    These units are searched when using
    `UnitBase.find_equivalent_units`, for example.

    This may be used either permanently, or as a context manager using
    the ``with`` statement (see example below).

    Parameters
    ----------
    units : list of sequence, dict, or module
        This is a list of things in which units may be found
        (sequences, dicts or modules), or units themselves.  The
        entire set will be added to the "enabled" set for searching
        through by methods like `UnitBase.find_equivalent_units` and
        `UnitBase.compose`.

    Examples
    --------

    >>> from astropy import units as u
    >>> from astropy.units import imperial
    >>> with u.add_enabled_units(imperial):
    ...     u.m.find_equivalent_units()
    ...
      Primary name | Unit definition | Aliases
    [
      AU           | 1.49598e+11 m   | au, astronomical_unit            ,
      Angstrom     | 1e-10 m         | AA, angstrom                     ,
      cm           | 0.01 m          | centimeter                       ,
      earthRad     | 6.3781e+06 m    | R_earth, Rearth                  ,
      ft           | 0.3048 m        | foot                             ,
      fur          | 201.168 m       | furlong                          ,
      inch         | 0.0254 m        |                                  ,
      jupiterRad   | 7.1492e+07 m    | R_jup, Rjup, R_jupiter, Rjupiter ,
      lsec         | 2.99792e+08 m   | lightsecond                      ,
      lyr          | 9.46073e+15 m   | lightyear                        ,
      m            | irreducible     | meter                            ,
      mi           | 1609.34 m       | mile                             ,
      micron       | 1e-06 m         |                                  ,
      mil          | 2.54e-05 m      | thou                             ,
      nmi          | 1852 m          | nauticalmile, NM                 ,
      pc           | 3.08568e+16 m   | parsec                           ,
      solRad       | 6.957e+08 m     | R_sun, Rsun                      ,
      yd           | 0.9144 m        | yard                             ,
    ]
    """
    ...

def set_enabled_equivalencies(equivalencies): # -> _UnitContext:
    """
    Sets the equivalencies enabled in the unit registry.

    These equivalencies are used if no explicit equivalencies are given,
    both in unit conversion and in finding equivalent units.

    This is meant in particular for allowing angles to be dimensionless.
    Use with care.

    Parameters
    ----------
    equivalencies : list of tuple
        list of equivalent pairs, e.g., as returned by
        `~astropy.units.equivalencies.dimensionless_angles`.

    Examples
    --------
    Exponentiation normally requires dimensionless quantities.  To avoid
    problems with complex phases::

        >>> from astropy import units as u
        >>> with u.set_enabled_equivalencies(u.dimensionless_angles()):
        ...     phase = 0.5 * u.cycle
        ...     np.exp(1j*phase)  # doctest: +FLOAT_CMP
        <Quantity -1.+1.2246468e-16j>
    """
    ...

def add_enabled_equivalencies(equivalencies): # -> _UnitContext:
    """
    Adds to the equivalencies enabled in the unit registry.

    These equivalencies are used if no explicit equivalencies are given,
    both in unit conversion and in finding equivalent units.

    This is meant in particular for allowing angles to be dimensionless.
    Since no equivalencies are enabled by default, generally it is recommended
    to use `set_enabled_equivalencies`.

    Parameters
    ----------
    equivalencies : list of tuple
        list of equivalent pairs, e.g., as returned by
        `~astropy.units.equivalencies.dimensionless_angles`.
    """
    ...

def set_enabled_aliases(aliases): # -> _UnitContext:
    """
    Set aliases for units.

    This is useful for handling alternate spellings for units, or
    misspelled units in files one is trying to read.

    Parameters
    ----------
    aliases : dict of str, Unit
        The aliases to set. The keys must be the string aliases, and values
        must be the `astropy.units.Unit` that the alias will be mapped to.

    Raises
    ------
    ValueError
        If the alias already defines a different unit.

    Examples
    --------
    To temporarily allow for a misspelled 'Angstroem' unit::

        >>> from astropy import units as u
        >>> with u.set_enabled_aliases({'Angstroem': u.Angstrom}):
        ...     print(u.Unit("Angstroem", parse_strict="raise") == u.Angstrom)
        True

    """
    ...

def add_enabled_aliases(aliases): # -> _UnitContext:
    """
    Add aliases for units.

    This is useful for handling alternate spellings for units, or
    misspelled units in files one is trying to read.

    Since no aliases are enabled by default, generally it is recommended
    to use `set_enabled_aliases`.

    Parameters
    ----------
    aliases : dict of str, Unit
        The aliases to add. The keys must be the string aliases, and values
        must be the `astropy.units.Unit` that the alias will be mapped to.

    Raises
    ------
    ValueError
        If the alias already defines a different unit.

    Examples
    --------
    To temporarily allow for a misspelled 'Angstroem' unit::

        >>> from astropy import units as u
        >>> with u.add_enabled_aliases({'Angstroem': u.Angstrom}):
        ...     print(u.Unit("Angstroem", parse_strict="raise") == u.Angstrom)
        True

    """
    ...

class UnitsError(Exception):
    """
    The base class for unit-specific exceptions.
    """
    ...


class UnitScaleError(UnitsError, ValueError):
    """
    Used to catch the errors involving scaled units,
    which are not recognized by FITS format.
    """
    ...


class UnitConversionError(UnitsError, ValueError):
    """
    Used specifically for errors related to converting between units or
    interpreting units in terms of other units.
    """
    ...


class UnitTypeError(UnitsError, TypeError):
    """
    Used specifically for errors in setting to units not allowed by a class.

    E.g., would be raised if the unit of an `~astropy.coordinates.Angle`
    instances were set to a non-angular unit.
    """
    ...


class UnitsWarning(AstropyWarning):
    """
    The base class for unit-specific warnings.
    """
    ...


class UnitBase:
    """
    Abstract base class for units.

    Most of the arithmetic operations on units are defined in this
    base class.

    Should not be instantiated by users directly.
    """
    __array_priority__ = ...
    _hash = ...
    def __deepcopy__(self, memo): # -> Self@UnitBase:
        ...
    
    def __bytes__(self): # -> bytes:
        """Return string representation for unit"""
        ...
    
    def __str__(self) -> str:
        """Return string representation for unit"""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def names(self):
        """
        Returns all of the names associated with this unit.
        """
        ...
    
    @property
    def name(self):
        """
        Returns the canonical (short) name associated with this unit.
        """
        ...
    
    @property
    def aliases(self):
        """
        Returns the alias (long) names for this unit.
        """
        ...
    
    @property
    def scale(self): # -> float:
        """
        Return the scale of the unit.
        """
        ...
    
    @property
    def bases(self): # -> list[Self@UnitBase]:
        """
        Return the bases of the unit.
        """
        ...
    
    @property
    def powers(self): # -> list[int]:
        """
        Return the powers of the unit.
        """
        ...
    
    def to_string(self, format=...): # -> LiteralString | None:
        """
        Output the unit in the given format as a string.

        Parameters
        ----------
        format : `astropy.units.format.Base` instance or str
            The name of a format or a formatter object.  If not
            provided, defaults to the generic format.
        """
        ...
    
    def __format__(self, format_spec): # -> LiteralString | str | None:
        """Try to format units using a formatter."""
        ...
    
    def __pow__(self, p): # -> CompositeUnit:
        ...
    
    def __truediv__(self, m): # -> Self@UnitBase | CompositeUnit | _NotImplementedType:
        ...
    
    def __rtruediv__(self, m): # -> Unit | CompositeUnit | _NotImplementedType | Quantity | NDArray[floating[Unknown]]:
        ...
    
    def __mul__(self, m): # -> Self@UnitBase | Unit | CompositeUnit | _NotImplementedType:
        ...
    
    def __rmul__(self, m): # -> Unit | CompositeUnit | _NotImplementedType | Quantity | NDArray[bool_]:
        ...
    
    def __rlshift__(self, m): # -> Quantity | _NotImplementedType:
        ...
    
    def __rrshift__(self, m): # -> _NotImplementedType:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __neg__(self): # -> Self@UnitBase | Unit | CompositeUnit | _NotImplementedType:
        ...
    
    def is_equivalent(self, other, equivalencies=...): # -> bool:
        """
        Returns `True` if this unit is equivalent to ``other``.

        Parameters
        ----------
        other : `~astropy.units.Unit`, str, or tuple
            The unit to convert to. If a tuple of units is specified, this
            method returns true if the unit matches any of those in the tuple.

        equivalencies : list of tuple
            A list of equivalence pairs to try if the units are not
            directly convertible.  See :ref:`astropy:unit_equivalencies`.
            This list is in addition to possible global defaults set by, e.g.,
            `set_enabled_equivalencies`.
            Use `None` to turn off all equivalencies.

        Returns
        -------
        bool
        """
        ...
    
    def to(self, other, value=..., equivalencies=...): # -> float:
        """
        Return the converted values in the specified unit.

        Parameters
        ----------
        other : unit-like
            The unit to convert to.

        value : int, float, or scalar array-like, optional
            Value(s) in the current unit to be converted to the
            specified unit.  If not provided, defaults to 1.0

        equivalencies : list of tuple
            A list of equivalence pairs to try if the units are not
            directly convertible.  See :ref:`astropy:unit_equivalencies`.
            This list is in addition to possible global defaults set by, e.g.,
            `set_enabled_equivalencies`.
            Use `None` to turn off all equivalencies.

        Returns
        -------
        values : scalar or array
            Converted value(s). Input value sequences are returned as
            numpy arrays.

        Raises
        ------
        UnitsError
            If units are inconsistent
        """
        ...
    
    def in_units(self, other, value=..., equivalencies=...): # -> float:
        """
        Alias for `to` for backward compatibility with pynbody.
        """
        ...
    
    def decompose(self, bases=...):
        """
        Return a unit object composed of only irreducible units.

        Parameters
        ----------
        bases : sequence of UnitBase, optional
            The bases to decompose into.  When not provided,
            decomposes down to any irreducible units.  When provided,
            the decomposed result will only contain the given units.
            This will raises a `UnitsError` if it's not possible
            to do so.

        Returns
        -------
        unit : `~astropy.units.CompositeUnit`
            New object containing only irreducible unit objects.
        """
        ...
    
    def compose(self, equivalencies=..., units=..., max_depth=..., include_prefix_units=...): # -> list[Unknown]:
        """
        Return the simplest possible composite unit(s) that represent
        the given unit.  Since there may be multiple equally simple
        compositions of the unit, a list of units is always returned.

        Parameters
        ----------
        equivalencies : list of tuple
            A list of equivalence pairs to also list.  See
            :ref:`astropy:unit_equivalencies`.
            This list is in addition to possible global defaults set by, e.g.,
            `set_enabled_equivalencies`.
            Use `None` to turn off all equivalencies.

        units : set of `~astropy.units.Unit`, optional
            If not provided, any known units may be used to compose
            into.  Otherwise, ``units`` is a dict, module or sequence
            containing the units to compose into.

        max_depth : int, optional
            The maximum recursion depth to use when composing into
            composite units.

        include_prefix_units : bool, optional
            When `True`, include prefixed units in the result.
            Default is `True` if a sequence is passed in to ``units``,
            `False` otherwise.

        Returns
        -------
        units : list of `CompositeUnit`
            A list of candidate compositions.  These will all be
            equally simple, but it may not be possible to
            automatically determine which of the candidates are
            better.
        """
        ...
    
    def to_system(self, system): # -> list[Unknown]:
        """
        Converts this unit into ones belonging to the given system.
        Since more than one result may be possible, a list is always
        returned.

        Parameters
        ----------
        system : module
            The module that defines the unit system.  Commonly used
            ones include `astropy.units.si` and `astropy.units.cgs`.

            To use your own module it must contain unit objects and a
            sequence member named ``bases`` containing the base units of
            the system.

        Returns
        -------
        units : list of `CompositeUnit`
            The list is ranked so that units containing only the base
            units of that system will appear first.
        """
        ...
    
    @lazyproperty
    def si(self):
        """
        Returns a copy of the current `Unit` instance in SI units.
        """
        ...
    
    @lazyproperty
    def cgs(self):
        """
        Returns a copy of the current `Unit` instance with CGS units.
        """
        ...
    
    @property
    def physical_type(self): # -> PhysicalType:
        """
        Physical type(s) dimensionally compatible with the unit.

        Returns
        -------
        `~astropy.units.physical.PhysicalType`
            A representation of the physical type(s) of a unit.

        Examples
        --------
        >>> from astropy import units as u
        >>> u.m.physical_type
        PhysicalType('length')
        >>> (u.m ** 2 / u.s).physical_type
        PhysicalType({'diffusivity', 'kinematic viscosity'})

        Physical types can be compared to other physical types
        (recommended in packages) or to strings.

        >>> area = (u.m ** 2).physical_type
        >>> area == u.m.physical_type ** 2
        True
        >>> area == "area"
        True

        `~astropy.units.physical.PhysicalType` objects can be used for
        dimensional analysis.

        >>> number_density = u.m.physical_type ** -3
        >>> velocity = (u.m / u.s).physical_type
        >>> number_density * velocity
        PhysicalType('particle flux')
        """
        ...
    
    class EquivalentUnitsList(list):
        """
        A class to handle pretty-printing the result of
        `find_equivalent_units`.
        """
        HEADING_NAMES = ...
        ROW_LEN = ...
        NO_EQUIV_UNITS_MSG = ...
        def __repr__(self): # -> str:
            ...
        
    
    
    def find_equivalent_units(self, equivalencies=..., units=..., include_prefix_units=...): # -> EquivalentUnitsList:
        """
        Return a list of all the units that are the same type as ``self``.

        Parameters
        ----------
        equivalencies : list of tuple
            A list of equivalence pairs to also list.  See
            :ref:`astropy:unit_equivalencies`.
            Any list given, including an empty one, supersedes global defaults
            that may be in effect (as set by `set_enabled_equivalencies`)

        units : set of `~astropy.units.Unit`, optional
            If not provided, all defined units will be searched for
            equivalencies.  Otherwise, may be a dict, module or
            sequence containing the units to search for equivalencies.

        include_prefix_units : bool, optional
            When `True`, include prefixed units in the result.
            Default is `False`.

        Returns
        -------
        units : list of `UnitBase`
            A list of unit objects that match ``u``.  A subclass of
            `list` (``EquivalentUnitsList``) is returned that
            pretty-prints the list of units when output.
        """
        ...
    
    def is_unity(self): # -> Literal[False]:
        """
        Returns `True` if the unit is unscaled and dimensionless.
        """
        ...
    


class NamedUnit(UnitBase):
    """
    The base class of units that have a name.

    Parameters
    ----------
    st : str, list of str, 2-tuple
        The name of the unit.  If a list of strings, the first element
        is the canonical (short) name, and the rest of the elements
        are aliases.  If a tuple of lists, the first element is a list
        of short names, and the second element is a list of long
        names; all but the first short name are considered "aliases".
        Each name *should* be a valid Python identifier to make it
        easy to access, but this is not required.

    namespace : dict, optional
        When provided, inject the unit, and all of its aliases, in the
        given namespace dictionary.  If a unit by the same name is
        already in the namespace, a ValueError is raised.

    doc : str, optional
        A docstring describing the unit.

    format : dict, optional
        A mapping to format-specific representations of this unit.
        For example, for the ``Ohm`` unit, it might be nice to have it
        displayed as ``\\Omega`` by the ``latex`` formatter.  In that
        case, `format` argument should be set to::

            {'latex': r'\\Omega'}

    Raises
    ------
    ValueError
        If any of the given unit names are already in the registry.

    ValueError
        If any of the given unit names are not valid Python tokens.
    """
    def __init__(self, st, doc=..., format=..., namespace=...) -> None:
        ...
    
    def get_format_name(self, format): # -> bytes | str:
        """
        Get a name for this unit that is specific to a particular
        format.

        Uses the dictionary passed into the `format` kwarg in the
        constructor.

        Parameters
        ----------
        format : str
            The name of the format

        Returns
        -------
        name : str
            The name of the unit for the given format.
        """
        ...
    
    @property
    def names(self): # -> list[bytes | str]:
        """
        Returns all of the names associated with this unit.
        """
        ...
    
    @property
    def name(self): # -> bytes | str:
        """
        Returns the canonical (short) name associated with this unit.
        """
        ...
    
    @property
    def aliases(self): # -> list[bytes | str]:
        """
        Returns the alias (long) names for this unit.
        """
        ...
    
    @property
    def short_names(self): # -> list[bytes | str] | list[Unknown]:
        """
        Returns all of the short names associated with this unit.
        """
        ...
    
    @property
    def long_names(self): # -> list[Unknown]:
        """
        Returns all of the long names associated with this unit.
        """
        ...
    


class IrreducibleUnit(NamedUnit):
    """
    Irreducible units are the units that all other units are defined
    in terms of.

    Examples are meters, seconds, kilograms, amperes, etc.  There is
    only once instance of such a unit per type.
    """
    def __reduce__(self): # -> tuple[(cls: Unknown, names: Unknown, registered: Unknown) -> Unknown, tuple[Type[Self@IrreducibleUnit], list[bytes | str], bool], dict[str, Any]]:
        ...
    
    @property
    def represents(self): # -> Self@IrreducibleUnit:
        """The unit that this named unit represents.

        For an irreducible unit, that is always itself.
        """
        ...
    
    def decompose(self, bases=...): # -> CompositeUnit | Self@IrreducibleUnit:
        ...
    


class UnrecognizedUnit(IrreducibleUnit):
    """
    A unit that did not parse correctly.  This allows for
    round-tripping it as a string, but no unit operations actually work
    on it.

    Parameters
    ----------
    st : str
        The name of the unit.
    """
    __reduce__ = ...
    def __repr__(self): # -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    def to_string(self, format=...): # -> bytes | str:
        ...
    
    __pow__ = ...
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def is_equivalent(self, other, equivalencies=...):
        ...
    
    def get_format_name(self, format): # -> bytes | str:
        ...
    
    def is_unity(self): # -> Literal[False]:
        ...
    


class _UnitMetaClass(type):
    """
    This metaclass exists because the Unit constructor should
    sometimes return instances that already exist.  This "overrides"
    the constructor before the new instance is actually created, so we
    can return an existing one.
    """
    def __call__(self, s=..., represents=..., format=..., namespace=..., doc=..., parse_strict=...): # -> str | Any | CompositeUnit | UnrecognizedUnit | <subclass of Unit and StructuredUnit> | StructuredUnit:
        ...
    


class Unit(NamedUnit, metaclass=_UnitMetaClass):
    """
    The main unit class.

    There are a number of different ways to construct a Unit, but
    always returns a `UnitBase` instance.  If the arguments refer to
    an already-existing unit, that existing unit instance is returned,
    rather than a new one.

    - From a string::

        Unit(s, format=None, parse_strict='silent')

      Construct from a string representing a (possibly compound) unit.

      The optional `format` keyword argument specifies the format the
      string is in, by default ``"generic"``.  For a description of
      the available formats, see `astropy.units.format`.

      The optional ``parse_strict`` keyword controls what happens when an
      unrecognized unit string is passed in.  It may be one of the following:

         - ``'raise'``: (default) raise a ValueError exception.

         - ``'warn'``: emit a Warning, and return an
           `UnrecognizedUnit` instance.

         - ``'silent'``: return an `UnrecognizedUnit` instance.

    - From a number::

        Unit(number)

      Creates a dimensionless unit.

    - From a `UnitBase` instance::

        Unit(unit)

      Returns the given unit unchanged.

    - From no arguments::

        Unit()

      Returns the dimensionless unit.

    - The last form, which creates a new `Unit` is described in detail
      below.

    See also: https://docs.astropy.org/en/stable/units/

    Parameters
    ----------
    st : str or list of str
        The name of the unit.  If a list, the first element is the
        canonical (short) name, and the rest of the elements are
        aliases.

    represents : UnitBase instance
        The unit that this named unit represents.

    doc : str, optional
        A docstring describing the unit.

    format : dict, optional
        A mapping to format-specific representations of this unit.
        For example, for the ``Ohm`` unit, it might be nice to have it
        displayed as ``\\Omega`` by the ``latex`` formatter.  In that
        case, `format` argument should be set to::

            {'latex': r'\\Omega'}

    namespace : dict, optional
        When provided, inject the unit (and all of its aliases) into
        the given namespace.

    Raises
    ------
    ValueError
        If any of the given unit names are already in the registry.

    ValueError
        If any of the given unit names are not valid Python tokens.
    """
    def __init__(self, st, represents=..., doc=..., format=..., namespace=...) -> None:
        ...
    
    @property
    def represents(self): # -> Unit:
        """The unit that this named unit represents."""
        ...
    
    def decompose(self, bases=...):
        ...
    
    def is_unity(self):
        ...
    
    def __hash__(self) -> int:
        ...
    


class PrefixUnit(Unit):
    """
    A unit that is simply a SI-prefixed version of another unit.

    For example, ``mm`` is a `PrefixUnit` of ``.001 * m``.

    The constructor is the same as for `Unit`.
    """
    ...


class CompositeUnit(UnitBase):
    """
    Create a composite unit using expressions of previously defined
    units.

    Direct use of this class is not recommended. Instead use the
    factory function `Unit` and arithmetic operators to compose
    units.

    Parameters
    ----------
    scale : number
        A scaling factor for the unit.

    bases : sequence of `UnitBase`
        A sequence of units this unit is composed of.

    powers : sequence of numbers
        A sequence of powers (in parallel with ``bases``) for each
        of the base units.
    """
    _decomposed_cache = ...
    def __init__(self, scale, bases, powers, decompose=..., decompose_bases=..., _error_check=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def scale(self): # -> float | complex | Unknown:
        """
        Return the scale of the composite unit.
        """
        ...
    
    @property
    def bases(self): # -> Unknown | list[Unknown]:
        """
        Return the bases of the composite unit.
        """
        ...
    
    @property
    def powers(self): # -> list[Any] | list[float | int | Unknown | Fraction] | Unknown | list[Unknown]:
        """
        Return the powers of the composite unit.
        """
        ...
    
    def __copy__(self): # -> CompositeUnit:
        """
        For compatibility with python copy module.
        """
        ...
    
    def decompose(self, bases=...): # -> CompositeUnit | Self@CompositeUnit:
        ...
    
    def is_unity(self): # -> bool:
        ...
    


si_prefixes = ...
binary_prefixes = ...
def def_unit(s, represents=..., doc=..., format=..., prefixes=..., exclude_prefixes=..., namespace=...): # -> Unit | IrreducibleUnit:
    """
    Factory function for defining new units.

    Parameters
    ----------
    s : str or list of str
        The name of the unit.  If a list, the first element is the
        canonical (short) name, and the rest of the elements are
        aliases.

    represents : UnitBase instance, optional
        The unit that this named unit represents.  If not provided,
        a new `IrreducibleUnit` is created.

    doc : str, optional
        A docstring describing the unit.

    format : dict, optional
        A mapping to format-specific representations of this unit.
        For example, for the ``Ohm`` unit, it might be nice to
        have it displayed as ``\\Omega`` by the ``latex``
        formatter.  In that case, `format` argument should be set
        to::

            {'latex': r'\\Omega'}

    prefixes : bool or list, optional
        When `True`, generate all of the SI prefixed versions of the
        unit as well.  For example, for a given unit ``m``, will
        generate ``mm``, ``cm``, ``km``, etc.  When a list, it is a list of
        prefix definitions of the form:

            (short_names, long_tables, factor)

        Default is `False`.  This function always returns the base
        unit object, even if multiple scaled versions of the unit were
        created.

    exclude_prefixes : list of str, optional
        If any of the SI prefixes need to be excluded, they may be
        listed here.  For example, ``Pa`` can be interpreted either as
        "petaannum" or "Pascal".  Therefore, when defining the
        prefixes for ``a``, ``exclude_prefixes`` should be set to
        ``["P"]``.

    namespace : dict, optional
        When provided, inject the unit (and all of its aliases and
        prefixes), into the given namespace dictionary.

    Returns
    -------
    unit : `~astropy.units.UnitBase`
        The newly-defined unit, or a matching unit that was already
        defined.
    """
    ...

def unit_scale_converter(val):
    """Function that just multiplies the value by unity.

    This is a separate function so it can be recognized and
    discarded in unit conversion.
    """
    ...

dimensionless_unscaled = ...
one = ...
