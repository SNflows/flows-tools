"""
This type stub file was generated by pyright.
"""

import numpy as np

"""Helper functions for Quantity.

In particular, this implements the logic that determines scaling and result
units for a given ufunc, given input units.
"""
def get_converter(from_unit, to_unit): # -> None:
    """Like Unit._get_converter, except returns None if no scaling is needed,
    i.e., if the inferred scale is unity."""
    ...

def get_converters_and_unit(f, unit1, unit2): # -> tuple[list[None], CompositeUnit] | tuple[list[None], Unknown]:
    ...

def helper_onearg_test(f, unit): # -> tuple[list[None], None]:
    ...

def helper_invariant(f, unit): # -> tuple[list[None], CompositeUnit | Unknown]:
    ...

def helper_square(f, unit): # -> tuple[list[None], Unknown | CompositeUnit]:
    ...

def helper_reciprocal(f, unit): # -> tuple[list[None], Unknown | CompositeUnit]:
    ...

one_half = ...
one_third = ...
def helper_sqrt(f, unit): # -> tuple[list[None], Unknown | CompositeUnit]:
    ...

def helper_cbrt(f, unit): # -> tuple[list[None], Unknown | CompositeUnit]:
    ...

def helper_modf(f, unit): # -> tuple[list[None], tuple[CompositeUnit, CompositeUnit]] | tuple[list[Unknown | None], tuple[CompositeUnit, CompositeUnit]]:
    ...

def helper__ones_like(f, unit): # -> tuple[list[None], CompositeUnit]:
    ...

def helper_dimensionless_to_dimensionless(f, unit): # -> tuple[list[None], CompositeUnit] | tuple[list[Unknown | None], CompositeUnit]:
    ...

def helper_dimensionless_to_radian(f, unit): # -> tuple[list[None], Unknown] | tuple[list[Unknown | None], Unknown]:
    ...

def helper_degree_to_radian(f, unit): # -> tuple[list[Unknown | None], Unknown]:
    ...

def helper_radian_to_degree(f, unit): # -> tuple[list[Unknown | None], Unknown]:
    ...

def helper_radian_to_dimensionless(f, unit): # -> tuple[list[Unknown | None], CompositeUnit]:
    ...

def helper_frexp(f, unit): # -> tuple[list[None], tuple[None, None]]:
    ...

def helper_multiplication(f, unit1, unit2): # -> tuple[list[None], CompositeUnit | Unit | Unknown | _NotImplementedType]:
    ...

def helper_division(f, unit1, unit2): # -> tuple[list[None], CompositeUnit | Unknown | _NotImplementedType]:
    ...

def helper_power(f, unit1, unit2): # -> tuple[list[None], Literal[False]] | tuple[list[Unknown | None], Literal[False]]:
    ...

def helper_ldexp(f, unit1, unit2): # -> tuple[list[None], CompositeUnit | Unknown]:
    ...

def helper_copysign(f, unit1, unit2): # -> tuple[list[None], None] | tuple[list[None], Unknown]:
    ...

def helper_heaviside(f, unit1, unit2): # -> tuple[list[Unknown | None], CompositeUnit]:
    ...

def helper_two_arg_dimensionless(f, unit1, unit2): # -> tuple[list[Unknown | None], CompositeUnit]:
    ...

helper_twoarg_invariant = ...
def helper_twoarg_comparison(f, unit1, unit2): # -> tuple[list[None], None]:
    ...

def helper_twoarg_invtrig(f, unit1, unit2): # -> tuple[list[None], Unknown]:
    ...

def helper_twoarg_floor_divide(f, unit1, unit2): # -> tuple[list[None], CompositeUnit]:
    ...

def helper_divmod(f, unit1, unit2): # -> tuple[list[None], tuple[CompositeUnit, CompositeUnit | Unknown]]:
    ...

def helper_clip(f, unit1, unit2, unit3): # -> tuple[list[None], CompositeUnit | Unknown]:
    ...

onearg_test_ufuncs = ...
invariant_ufuncs = ...
dimensionless_to_dimensionless_ufuncs = ...
if isinstance(getattr(np.core.umath, 'erf', None), np.ufunc):
    ...
dimensionless_to_radian_ufuncs = ...
degree_to_radian_ufuncs = ...
radian_to_degree_ufuncs = ...
radian_to_dimensionless_ufuncs = ...
two_arg_dimensionless_ufuncs = ...
twoarg_invariant_ufuncs = ...
twoarg_comparison_ufuncs = ...
twoarg_invtrig_ufuncs = ...
if isinstance(getattr(np.core.umath, '_arg', None), np.ufunc):
    ...
if isinstance(getattr(np, 'matmul', None), np.ufunc):
    ...
if isinstance(getattr(np.core.umath, 'clip', None), np.ufunc):
    ...
