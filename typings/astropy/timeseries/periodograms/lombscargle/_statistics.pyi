"""
This type stub file was generated by pyright.
"""

"""
Utilities for computing periodogram statistics.

This is an internal module; users should access this functionality via the
``false_alarm_probability`` and ``false_alarm_level`` methods of the
``astropy.timeseries.LombScargle`` API.
"""
def vectorize_first_argument(func): # -> (x: Unknown, *args: Unknown, **kwargs: Unknown) -> ndarray[Any, dtype[Unknown]]:
    ...

def pdf_single(z, N, normalization, dH=..., dK=...): # -> NDArray[Any]:
    """Probability density function for Lomb-Scargle periodogram

    Compute the expected probability density function of the periodogram
    for the null hypothesis - i.e. data consisting of Gaussian noise.

    Parameters
    ----------
    z : array-like
        The periodogram value.
    N : int
        The number of data points from which the periodogram was computed.
    normalization : {'standard', 'model', 'log', 'psd'}
        The periodogram normalization.
    dH, dK : int, optional
        The number of parameters in the null hypothesis and the model.

    Returns
    -------
    pdf : np.ndarray
        The expected probability density function.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.
    All expressions used here are adapted from Table 1 of Baluev 2008 [1]_.

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

def fap_single(z, N, normalization, dH=..., dK=...): # -> NDArray[Any] | Any:
    """Single-frequency false alarm probability for the Lomb-Scargle periodogram

    This is equal to 1 - cdf, where cdf is the cumulative distribution.
    The single-frequency false alarm probability should not be confused with
    the false alarm probability for the largest peak.

    Parameters
    ----------
    z : array-like
        The periodogram value.
    N : int
        The number of data points from which the periodogram was computed.
    normalization : {'standard', 'model', 'log', 'psd'}
        The periodogram normalization.
    dH, dK : int, optional
        The number of parameters in the null hypothesis and the model.

    Returns
    -------
    false_alarm_probability : np.ndarray
        The single-frequency false alarm probability.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.
    All expressions used here are adapted from Table 1 of Baluev 2008 [1]_.

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

def inv_fap_single(fap, N, normalization, dH=..., dK=...): # -> NDArray[Any]:
    """Single-frequency inverse false alarm probability

    This function computes the periodogram value associated with the specified
    single-frequency false alarm probability. This should not be confused with
    the false alarm level of the largest peak.

    Parameters
    ----------
    fap : array-like
        The false alarm probability.
    N : int
        The number of data points from which the periodogram was computed.
    normalization : {'standard', 'model', 'log', 'psd'}
        The periodogram normalization.
    dH, dK : int, optional
        The number of parameters in the null hypothesis and the model.

    Returns
    -------
    z : np.ndarray
        The periodogram power corresponding to the single-peak false alarm
        probability.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.
    All expressions used here are adapted from Table 1 of Baluev 2008 [1]_.

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

def cdf_single(z, N, normalization, dH=..., dK=...): # -> NDArray[signedinteger[Any]] | Any:
    """Cumulative distribution for the Lomb-Scargle periodogram

    Compute the expected cumulative distribution of the periodogram
    for the null hypothesis - i.e. data consisting of Gaussian noise.

    Parameters
    ----------
    z : array-like
        The periodogram value.
    N : int
        The number of data points from which the periodogram was computed.
    normalization : {'standard', 'model', 'log', 'psd'}
        The periodogram normalization.
    dH, dK : int, optional
        The number of parameters in the null hypothesis and the model.

    Returns
    -------
    cdf : np.ndarray
        The expected cumulative distribution function.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.
    All expressions used here are adapted from Table 1 of Baluev 2008 [1]_.

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

def tau_davies(Z, fmax, t, y, dy, normalization=..., dH=..., dK=...):
    """tau factor for estimating Davies bound (Baluev 2008, Table 1)"""
    ...

def fap_naive(Z, fmax, t, y, dy, normalization=...): # -> Any:
    """False Alarm Probability based on estimated number of indep frequencies"""
    ...

def inv_fap_naive(fap, fmax, t, y, dy, normalization=...): # -> NDArray[Any] | NDArray[floating[Any]]:
    """Inverse FAP based on estimated number of indep frequencies"""
    ...

def fap_davies(Z, fmax, t, y, dy, normalization=...):
    """Davies upper-bound to the false alarm probability

    (Eqn 5 of Baluev 2008)
    """
    ...

@vectorize_first_argument
def inv_fap_davies(p, fmax, t, y, dy, normalization=...):
    """Inverse of the davies upper-bound"""
    ...

def fap_baluev(Z, fmax, t, y, dy, normalization=...): # -> Any:
    """Alias-free approximation to false alarm probability

    (Eqn 6 of Baluev 2008)
    """
    ...

@vectorize_first_argument
def inv_fap_baluev(p, fmax, t, y, dy, normalization=...):
    """Inverse of the Baluev alias-free approximation"""
    ...

def fap_bootstrap(Z, fmax, t, y, dy, normalization=..., n_bootstraps=..., random_seed=...): # -> floating[_NBitIntP]:
    """Bootstrap estimate of the false alarm probability"""
    ...

def inv_fap_bootstrap(fap, fmax, t, y, dy, normalization=..., n_bootstraps=..., random_seed=...): # -> Quantity | Any | NDArray[Any]:
    """Bootstrap estimate of the inverse false alarm probability"""
    ...

METHODS = ...
def false_alarm_probability(Z, fmax, t, y, dy, normalization=..., method=..., method_kwds=...): # -> NDArray[Any] | NDArray[floating[Any]] | Any | floating[_NBitIntP]:
    """Compute the approximate false alarm probability for periodogram peaks Z

    This gives an estimate of the false alarm probability for the largest value
    in a periodogram, based on the null hypothesis of non-varying data with
    Gaussian noise. The true probability cannot be computed analytically, so
    each method available here is an approximation to the true value.

    Parameters
    ----------
    Z : array-like
        The periodogram value.
    fmax : float
        The maximum frequency of the periodogram.
    t, y, dy : array-like
        The data times, values, and errors.
    normalization : {'standard', 'model', 'log', 'psd'}, optional
        The periodogram normalization.
    method : {'baluev', 'davies', 'naive', 'bootstrap'}, optional
        The approximation method to use.
    method_kwds : dict, optional
        Additional method-specific keywords.

    Returns
    -------
    false_alarm_probability : np.ndarray
        The false alarm probability.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.

    See Also
    --------
    false_alarm_level : compute the periodogram level for a particular fap

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

INV_METHODS = ...
def false_alarm_level(p, fmax, t, y, dy, normalization, method=..., method_kwds=...): # -> NDArray[Any] | NDArray[floating[Any]] | Quantity | Any:
    """Compute the approximate periodogram level given a false alarm probability

    This gives an estimate of the periodogram level corresponding to a specified
    false alarm probability for the largest peak, assuming a null hypothesis
    of non-varying data with Gaussian noise. The true level cannot be computed
    analytically, so each method available here is an approximation to the true
    value.

    Parameters
    ----------
    p : array-like
        The false alarm probability (0 < p < 1).
    fmax : float
        The maximum frequency of the periodogram.
    t, y, dy : arrays
        The data times, values, and errors.
    normalization : {'standard', 'model', 'log', 'psd'}, optional
        The periodogram normalization.
    method : {'baluev', 'davies', 'naive', 'bootstrap'}, optional
        The approximation method to use.
    method_kwds : dict, optional
        Additional method-specific keywords.

    Returns
    -------
    z : np.ndarray
        The periodogram level.

    Notes
    -----
    For normalization='psd', the distribution can only be computed for
    periodograms constructed with errors specified.

    See Also
    --------
    false_alarm_probability : compute the fap for a given periodogram level

    References
    ----------
    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)
    """
    ...

