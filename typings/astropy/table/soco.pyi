"""
This type stub file was generated by pyright.
"""

from astropy.utils.compat.optional_deps import HAS_SORTEDCONTAINERS

"""
The SCEngine class uses the ``sortedcontainers`` package to implement an
Index engine for Tables.
"""
if HAS_SORTEDCONTAINERS:
    ...
class Node:
    __slots__ = ...
    def __init__(self, key, value) -> None:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    __hash__ = ...
    def __repr__(self): # -> str:
        ...
    


class SCEngine:
    '''
    Fast tree-based implementation for indexing, using the
    ``sortedcontainers`` package.

    Parameters
    ----------
    data : Table
        Sorted columns of the original table
    row_index : Column object
        Row numbers corresponding to data columns
    unique : bool
        Whether the values of the index must be unique.
        Defaults to False.
    '''
    def __init__(self, data, row_index, unique=...) -> None:
        ...
    
    def add(self, key, value): # -> None:
        '''
        Add a key, value pair.
        '''
        ...
    
    def find(self, key): # -> list[Unknown]:
        '''
        Find rows corresponding to the given key.
        '''
        ...
    
    def remove(self, key, data=...): # -> bool:
        '''
        Remove data from the given key.
        '''
        ...
    
    def shift_left(self, row): # -> None:
        '''
        Decrement rows larger than the given row.
        '''
        ...
    
    def shift_right(self, row): # -> None:
        '''
        Increment rows greater than or equal to the given row.
        '''
        ...
    
    def items(self): # -> _odict_items[Unknown, Unknown]:
        '''
        Return a list of key, data tuples.
        '''
        ...
    
    def sort(self): # -> None:
        '''
        Make row order align with key order.
        '''
        ...
    
    def sorted_data(self): # -> list[Unknown]:
        '''
        Return a list of rows in order sorted by key.
        '''
        ...
    
    def range(self, lower, upper, bounds=...): # -> list[Unknown]:
        '''
        Return row values in the given range.
        '''
        ...
    
    def replace_rows(self, row_map): # -> None:
        '''
        Replace rows with the values in row_map.
        '''
        ...
    
    def __repr__(self): # -> str:
        ...
    


