"""
This type stub file was generated by pyright.
"""

import configparser
from functools import lru_cache
from typing import Optional

"""
Functions for dealing with configuration of Tendrils API using .ini files or secrets.
"""

@lru_cache(maxsize=1)
def load_config(filename: str = ...) -> configparser.ConfigParser:
    """
    Load configuration file. Defaults to searching for config.ini but a custom name can be given.

    Returns:
        ``configparser.ConfigParser``: Configuration file.

    .. codeauthor:: Rasmus Handberg <rasmush@phys.au.dk>
    .. codeauthor:: Emir Karamehmetoglu <emir.k@phys.au.dk>
    """
    ...

def clear_config_cache():  # -> None:
    """
    Clear the config cache.
    """
    ...

def set_api_token(token: Optional[str] = ..., filename: Optional[str] = ..., overwrite: bool = ...) -> None:
    """
    For updating FLOWS API token.
    Args:
        token (str, optional): FLOWS api token
        filename (str): filename of config file, defaults to `config.ini`.
        overwrite (bool): Whether to overwrite the config if the field is not "None".
        True by default. Set to false if you don't want to overwrite if field is not "None".
    """
    ...

def update_api_token() -> str:
    """
    Update API token in config file via explicit query.
    """
    ...

def get_api_token() -> str:
    """
    Get api token from config file or raise.
    Returns: str = token as a string

    """
    ...

def set_photometry_folders(
    output: Optional[str] = ..., archive_local: Optional[str] = ..., filename: str = ..., overwrite: bool = ...
) -> None:
    """
    For updating FLOWS photometry output and local archive folders.
    Args:
        output (str, optional): path to desired photometry output directory.
        archive_local (str, optional): path to desired local archive directory.
        filename (str): default = 'config.ini'. Filename for config file
        overwrite (bool): Whether to overwrite existing field if field is not "None".
    """
    ...

def set_tns_token(api_key: Optional[str] = ..., filename: str = ..., overwrite: bool = ...) -> None: ...
def create_config(tns: bool = ...): ...
def copy_from_other_config(filepath: str, filename: str = ...): ...
