"""
This type stub file was generated by pyright.
"""

import tempfile
from typing import Optional, Union
from configparser import ConfigParser
from astropy.table import Table

"""
Upload photometry results to Flows server.
"""

def get_photcache(config: Optional[ConfigParser] = ...) -> tuple[str, Optional[tempfile.TemporaryDirectory]]:
    """
    Get photometry cache from config or create a temporary one
    Args:
        config: ConfigParser instance with 'api' and 'photometry_cache' defined.

    Returns: tuple[str, str]: tuple (photcache path, reference to tmpdir).
     If photometry_cache was supplied via config, the latter is None.
    """
    ...

def create_photdir(config: ConfigParser, target_name: str, fileid: Union[int, str]) -> str:
    """
    Get photdir for given fileid and target_name
    Args:
        fileid (int, str): fileid
        target_name (str): target_name
        config (configparser.ConfigParser): current config instance
    Returns: photdir: absolute path to photdir.

    """
    ...

def make_zip(files: list, fileid: Union[int, str], current_dir: Union[tempfile.TemporaryDirectory, str]): ...
def get_photometry(photid: int) -> Table:
    """
    Retrieve lightcurve from Flows server.

    Please note that it can significantly speed up repeated calls to this function
    to specify a cache directory in the config-file under api -> photometry_cache.
    This will download the files only once and store them in this local cache for
    use in subsequent calls.

    Parameters:
        photid (int): Fileid for the photometry file.

    Returns:
        :class:`astropy.table.Table`: Table containing photometry.
    """
    ...

def upload_photometry(fileid: Union[int, str], delete_completed: bool = ...) -> None:
    """
    Upload photometry results to Flows server.

    This will make the uploaded photometry the active/newest/best photometry and
    be used in plots and shown on the website.

    Parameters:
        fileid: [int, str]: File ID of photometry to upload to server.
        delete_completed: bool, optional: Delete the photometry from the local
            working directory if the upload was successful. Default=False.
    """
    ...
