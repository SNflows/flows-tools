"""
This type stub file was generated by pyright.
"""

from astroquery.query import BaseQuery
from astroquery.utils import async_to_sync

"""
Simbad query class for accessing the Simbad Service
"""
__all__ = ['Simbad', 'SimbadClass', 'SimbadBaseQuery']
def validate_epoch(value):
    ...

def validate_equinox(value): # -> float:
    ...

def validate_epoch_decorator(func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
    """
    A method decorator that checks if the epoch value entered by the user
    is acceptable.
    """
    ...

def validate_equinox_decorator(func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
    """
    A method decorator that checks if the equinox value entered by the user
    is acceptable.
    """
    ...

def strip_field(field, keep_filters=...):
    """Helper tool: remove parameters from VOTABLE fields
    However, this should only be applied to a subset of VOTABLE fields:

     * ra
     * dec
     * otype
     * id
     * coo
     * bibcodelist

    *if* keep_filters is specified
    """
    ...

error_regex = ...
SimbadError = ...
VersionInfo = ...
class SimbadResult:
    __sections = ...
    def __init__(self, txt, verbose=...) -> None:
        ...
    
    @property
    def script(self): # -> None:
        ...
    
    @property
    def console(self): # -> None:
        ...
    
    @property
    def error_raw(self): # -> None:
        ...
    
    @property
    def data(self): # -> None:
        ...
    
    @property
    def errors(self): # -> list[Unknown]:
        ...
    
    @property
    def nb_errors(self): # -> int:
        ...
    


class SimbadVOTableResult(SimbadResult):
    """VOTable-type Simbad result"""
    def __init__(self, txt, verbose=..., pedantic=...) -> None:
        ...
    
    @property
    def table(self):
        ...
    


bibcode_regex = ...
class SimbadBibcodeResult(SimbadResult):
    """Bibliography-type Simbad result"""
    @property
    def table(self): # -> Table:
        ...
    


class SimbadObjectIDsResult(SimbadResult):
    """Object identifier list Simbad result"""
    @property
    def table(self): # -> Table:
        ...
    


class SimbadBaseQuery(BaseQuery):
    """
    SimbadBaseQuery overloads the base query because we know that SIMBAD will
    sometimes blacklist users for exceeding rate limits.  This warning results
    in a "connection refused" error (error 61) instead of a more typical "error
    8" that you would get from not having an internet connection at all.
    """
    ...


@async_to_sync
class SimbadClass(SimbadBaseQuery):
    """
    The class for querying the Simbad web service.

    Note that SIMBAD suggests submitting no more than 6 queries per second; if
    you submit more than that, your IP may be temporarily blacklisted
    (http://simbad.u-strasbg.fr/simbad/sim-help?Page=sim-url)

    """
    SIMBAD_URL = ...
    TIMEOUT = ...
    WILDCARDS = ...
    _ORDERED_WILDCARDS = ...
    _function_to_command = ...
    ROW_LIMIT = ...
    _VOTABLE_FIELDS = ...
    def __init__(self) -> None:
        ...
    
    def list_wildcards(self): # -> None:
        """
        Displays the available wildcards that may be used in Simbad queries and
        their usage.

        Examples
        --------
        >>> from astroquery.simbad import Simbad
        >>> Simbad.list_wildcards()
        * : Any string of characters (including an empty one)...

        [^0-9] : Any (one) character not in the list.

        ? : Any character (exactly one character)

        [abc] : Exactly one character taken in the list.
                Can also be defined by a range of characters: [A-Z]
        """
        ...
    
    def list_votable_fields(self): # -> None:
        """
        Lists all the fields that can be fetched for a VOTable.

        Examples
        --------
        >>> from astroquery.simbad import Simbad
        >>> Simbad.list_votable_fields()
        --NOTES--...
        """
        ...
    
    def get_field_description(self, field_name): # -> None:
        """
        Displays a description of the VOTable field.

        Parameters
        ----------
        field_name : str
            the name of the field to describe. Must be one of those listed
            by `list_votable_fields`.

        Examples
        --------
        >>> from astroquery.simbad import Simbad
        >>> Simbad.get_field_description('main_id')
        main identifier of an astronomical object. It is the same as id(1)
        >>> Simbad.get_field_description('bibcodelist(y1-y2)')
        number of references. The parameter is optional and limit the count to
        the references between the years y1 and y2
        """
        ...
    
    def get_votable_fields(self): # -> list[str]:
        """
        Display votable fields

        Examples
        --------
        >>> from astroquery.simbad import Simbad
        >>> Simbad.get_votable_fields()
        ['main_id', 'coordinates']
        """
        ...
    
    def add_votable_fields(self, *args): # -> None:
        """
        Sets fields to be fetched in the VOTable. Must be one of those listed
        by `list_votable_fields`.

        Parameters
        ----------
        list of field_names
        """
        ...
    
    def remove_votable_fields(self, *args, **kwargs): # -> None:
        """
        Removes the specified field names from ``SimbadClass._VOTABLE_FIELDS``

        Parameters
        ----------
        list of field_names to be removed
        strip_params: bool
            If true, strip the specified keywords before removing them:
            e.g., ra(foo) would remove ra(bar) if this is True
        """
        ...
    
    def reset_votable_fields(self): # -> None:
        """
        resets VOTABLE_FIELDS to defaults
        """
        ...
    
    def query_criteria(self, *args, **kwargs): # -> None:
        """
        Query SIMBAD based on any criteria.

        Parameters
        ----------
        args:
            String arguments passed directly to SIMBAD's script
            (e.g., 'region(box, GAL, 10.5 -10.5, 0.5d 0.5d)')
        kwargs:
            Keyword / value pairs passed to SIMBAD's script engine
            (e.g., {'otype':'SNR'} will be rendered as otype=SNR)

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table
        """
        ...
    
    def query_criteria_async(self, *args, **kwargs): # -> tuple[str, Response | None] | str | Response:
        """
        Query SIMBAD based on any criteria.

        Parameters
        ----------
        args:
            String arguments passed directly to SIMBAD's script
            (e.g., 'region(box, GAL, 10.5 -10.5, 0.5d 0.5d)')
        kwargs:
            Keyword / value pairs passed to SIMBAD's script engine
            (e.g., {'otype':'SNR'} will be rendered as otype=SNR)
        cache : bool
            Cache the query?

        Returns
        -------
        response : `requests.Response`
            Response of the query from the server
        """
        ...
    
    def query_object(self, object_name, wildcard=..., verbose=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Queries Simbad for the given object and returns the result as a
        `~astropy.table.Table`. Object names may also be specified with
        wildcard.  See examples below.

        Parameters
        ----------
        object_name : str
            name of object to be queried
        wildcard : boolean, optional
            When it is set to `True` it implies that the object is specified
            with wildcards. Defaults to `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table
        """
        ...
    
    def query_object_async(self, object_name, wildcard=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_object`, but
        only collects the response from the Simbad server and returns.

        Parameters
        ----------
        object_name : str
            name of object to be queried
        wildcard : boolean, optional
            When it is set to `True` it implies that the object is specified
            with wildcards. Defaults to `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
            Response of the query from the server
        """
        ...
    
    def query_objects(self, object_names, wildcard=..., verbose=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Queries Simbad for the specified list of objects and returns the
        results as a `~astropy.table.Table`. Object names may be specified
        with wildcards if desired.

        Parameters
        ----------
        object_names : sequence of strs
            names of objects to be queried
        wildcard : boolean, optional
            When `True`, the names may have wildcards in them. Defaults to
            `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table
        """
        ...
    
    def query_objects_async(self, object_names, wildcard=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Same as `query_objects`, but only collects the response from the
        Simbad server and returns.

        Parameters
        ----------
        object_names : sequence of strs
            names of objects to be queried
        wildcard : boolean, optional
            When `True`, the names may have wildcards in them. Defaults to
            `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
            Response of the query from the server
        """
        ...
    
    def query_region_async(self, coordinates, radius=..., equinox=..., epoch=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_region`, but
        only collects the response from the Simbad server and returns.

        Parameters
        ----------
        coordinates : str or `astropy.coordinates` object
            the identifier or coordinates around which to query.
        radius : str or `~astropy.units.Quantity`, optional
            the radius of the region. If missing, set to default
            value of 2 arcmin.
        equinox : float, optional
            the equinox of the coordinates. If missing set to
            default 2000.0.
        epoch : str, optional
            the epoch of the input coordinates. Must be specified as
            [J|B] <epoch>. If missing, set to default J2000.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
             Response of the query from the server.
        """
        ...
    
    def query_catalog(self, catalog, verbose=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Queries a whole catalog.

        Results may be very large -number of rows
        should be controlled by configuring `SimbadClass.ROW_LIMIT`.

        Parameters
        ----------
        catalog : str
            the name of the catalog.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table
        """
        ...
    
    def query_catalog_async(self, catalog, cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_catalog`, but
        only collects the response from the Simbad server and returns.

        Parameters
        ----------
        catalog : str
            the name of the catalog.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
             Response of the query from the server.

        """
        ...
    
    def query_bibobj(self, bibcode, verbose=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Query all the objects that are contained in the article specified by
        the bibcode, and return results as a `~astropy.table.Table`.

        Parameters
        ----------
        bibcode : str
            the bibcode of the article
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table
        """
        ...
    
    def query_bibobj_async(self, bibcode, cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_bibobj`, but only collects the
        response from the Simbad server and returns.

        Parameters
        ----------
        bibcode : str
            the bibcode of the article
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
             Response of the query from the server.

        """
        ...
    
    def query_bibcode(self, bibcode, wildcard=..., verbose=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Queries the references corresponding to a given bibcode, and returns
        the results in a `~astropy.table.Table`. Wildcards may be used to
        specify bibcodes.

        Parameters
        ----------
        bibcode : str
            the bibcode of the article
        wildcard : boolean, optional
            When it is set to `True` it implies that the object is specified
            with wildcards. Defaults to `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table

        """
        ...
    
    def query_bibcode_async(self, bibcode, wildcard=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_bibcode`, but
        only collects the response from the Simbad server and returns.

        Parameters
        ----------
        bibcode : str
            the bibcode of the article
        wildcard : boolean, optional
            When it is set to `True` it implies that the object is specified
            with wildcards. Defaults to `False`.
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        response : `requests.Response`
             Response of the query from the server.

        """
        ...
    
    def query_objectids(self, object_name, verbose=..., cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response | None:
        """
        Query Simbad with an object name, and return a table of all
        names associated with that object in a `~astropy.table.Table`.

        Parameters
        ----------
        object_name : str
            name of object to be queried
        get_query_payload : bool, optional
            When set to `True` the method returns the HTTP request parameters.
            Defaults to `False`.

        Returns
        -------
        table : `~astropy.table.Table`
            Query results table

        """
        ...
    
    def query_objectids_async(self, object_name, cache=..., get_query_payload=...): # -> dict[str, str] | tuple[str, Response | None] | str | Response:
        """
        Serves the same function as `query_objectids`, but
        only collects the response from the Simbad server and returns.

        Parameters
        ----------
        object_name : str
            name of object to be queried

        Returns
        -------
        response : `requests.Response`
             Response of the query from the server.

        """
        ...
    


Simbad = SimbadClass()
