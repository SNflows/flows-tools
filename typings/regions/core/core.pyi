import abc
from _typeshed import Incomplete

from .metadata import RegionMeta, RegionVisual
from .pixcoord import PixCoord as PixCoord
from .registry import RegionsRegistry

class Region(abc.ABC, metaclass=abc.ABCMeta):
    def copy(self, **changes): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @abc.abstractmethod
    def intersection(self, other): ...
    @abc.abstractmethod
    def symmetric_difference(self, other): ...
    @abc.abstractmethod
    def union(self, other): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __xor__(self, other): ...
    @classmethod
    def get_formats(cls): ...
    def write(self, filename, format: Incomplete | None = ..., overwrite: bool = ..., **kwargs): ...
    def serialize(self, format: Incomplete | None = ..., **kwargs): ...

class PixelRegion(Region, metaclass=abc.ABCMeta):
    meta: Incomplete
    visual: Incomplete
    def intersection(self, other): ...
    def symmetric_difference(self, other): ...
    def union(self, other): ...
    @abc.abstractmethod
    def contains(self, pixcoord): ...
    def __contains__(self, coord) -> bool: ...
    @abc.abstractmethod
    def to_sky(self, wcs): ...
    @property
    @abc.abstractmethod
    def area(self): ...
    @property
    @abc.abstractmethod
    def bounding_box(self): ...
    @abc.abstractmethod
    def to_mask(self, mode: str = ..., subpixels: int = ...): ...
    @abc.abstractmethod
    def as_artist(self, origin=..., **kwargs): ...
    def plot(self, origin=..., ax: Incomplete | None = ..., **kwargs): ...

class SkyRegion(Region, metaclass=abc.ABCMeta):
    def intersection(self, other): ...
    def symmetric_difference(self, other): ...
    def union(self, other): ...
    def contains(self, skycoord, wcs): ...
    @abc.abstractmethod
    def to_pixel(self, wcs): ...
    def plot(self, ax: Incomplete | None = ..., **kwargs): ...
