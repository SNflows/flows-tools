import matplotlib.artist as martist
import matplotlib.text as mtext
from _typeshed import Incomplete
from matplotlib.font_manager import FontProperties as FontProperties
from matplotlib.image import BboxImage as BboxImage
from matplotlib.patches import FancyArrowPatch as FancyArrowPatch, FancyBboxPatch as FancyBboxPatch
from matplotlib.transforms import Bbox as Bbox, BboxBase as BboxBase, TransformedBbox as TransformedBbox

DEBUG: bool

def bbox_artist(*args, **kwargs) -> None: ...

class OffsetBox(martist.Artist):
    def __init__(self, *args, **kwargs) -> None: ...
    def set_figure(self, fig) -> None: ...
    def axes(self, ax) -> None: ...
    def contains(self, mouseevent): ...
    stale: bool
    def set_offset(self, xy) -> None: ...
    def get_offset(self, width, height, xdescent, ydescent, renderer): ...
    width: Incomplete
    def set_width(self, width) -> None: ...
    height: Incomplete
    def set_height(self, height) -> None: ...
    def get_visible_children(self): ...
    def get_children(self): ...
    def get_extent_offsets(self, renderer) -> None: ...
    def get_extent(self, renderer): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def draw(self, renderer) -> None: ...

class PackerBase(OffsetBox):
    height: Incomplete
    width: Incomplete
    sep: Incomplete
    pad: Incomplete
    mode: Incomplete
    align: Incomplete
    def __init__(self, pad: Incomplete | None = ..., sep: Incomplete | None = ..., width: Incomplete | None = ..., height: Incomplete | None = ..., align: str = ..., mode: str = ..., children: Incomplete | None = ...) -> None: ...

class VPacker(PackerBase):
    def get_extent_offsets(self, renderer): ...

class HPacker(PackerBase):
    def get_extent_offsets(self, renderer): ...

class PaddedBox(OffsetBox):
    pad: Incomplete
    patch: Incomplete
    def __init__(self, child, pad: Incomplete | None = ..., draw_frame: bool = ..., patch_attrs: Incomplete | None = ...) -> None: ...
    def get_extent_offsets(self, renderer): ...
    stale: bool
    def draw(self, renderer) -> None: ...
    def update_frame(self, bbox, fontsize: Incomplete | None = ...) -> None: ...
    def draw_frame(self, renderer) -> None: ...

class DrawingArea(OffsetBox):
    width: Incomplete
    height: Incomplete
    xdescent: Incomplete
    ydescent: Incomplete
    offset_transform: Incomplete
    dpi_transform: Incomplete
    def __init__(self, width, height, xdescent: float = ..., ydescent: float = ..., clip: bool = ...) -> None: ...
    @property
    def clip_children(self): ...
    stale: bool
    @clip_children.setter
    def clip_children(self, val) -> None: ...
    def get_transform(self): ...
    def set_transform(self, t) -> None: ...
    def set_offset(self, xy) -> None: ...
    def get_offset(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_extent(self, renderer): ...
    def add_artist(self, a) -> None: ...
    def draw(self, renderer) -> None: ...

class TextArea(OffsetBox):
    offset_transform: Incomplete
    def __init__(self, s, textprops: Incomplete | None = ..., multilinebaseline: bool = ...) -> None: ...
    stale: bool
    def set_text(self, s) -> None: ...
    def get_text(self): ...
    def set_multilinebaseline(self, t) -> None: ...
    def get_multilinebaseline(self): ...
    def set_transform(self, t) -> None: ...
    def set_offset(self, xy) -> None: ...
    def get_offset(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_extent(self, renderer): ...
    def draw(self, renderer) -> None: ...

class AuxTransformBox(OffsetBox):
    aux_transform: Incomplete
    offset_transform: Incomplete
    ref_offset_transform: Incomplete
    def __init__(self, aux_transform) -> None: ...
    stale: bool
    def add_artist(self, a) -> None: ...
    def get_transform(self): ...
    def set_transform(self, t) -> None: ...
    def set_offset(self, xy) -> None: ...
    def get_offset(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_extent(self, renderer): ...
    def draw(self, renderer) -> None: ...

class AnchoredOffsetbox(OffsetBox):
    zorder: int
    codes: Incomplete
    loc: Incomplete
    borderpad: Incomplete
    pad: Incomplete
    prop: Incomplete
    patch: Incomplete
    def __init__(self, loc, pad: float = ..., borderpad: float = ..., child: Incomplete | None = ..., prop: Incomplete | None = ..., frameon: bool = ..., bbox_to_anchor: Incomplete | None = ..., bbox_transform: Incomplete | None = ..., **kwargs) -> None: ...
    stale: bool
    def set_child(self, child) -> None: ...
    def get_child(self): ...
    def get_children(self): ...
    def get_extent(self, renderer): ...
    def get_bbox_to_anchor(self): ...
    def set_bbox_to_anchor(self, bbox, transform: Incomplete | None = ...) -> None: ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def update_frame(self, bbox, fontsize: Incomplete | None = ...) -> None: ...
    def draw(self, renderer) -> None: ...

class AnchoredText(AnchoredOffsetbox):
    txt: Incomplete
    def __init__(self, s, loc, pad: float = ..., borderpad: float = ..., prop: Incomplete | None = ..., **kwargs) -> None: ...

class OffsetImage(OffsetBox):
    image: Incomplete
    def __init__(self, arr, zoom: int = ..., cmap: Incomplete | None = ..., norm: Incomplete | None = ..., interpolation: Incomplete | None = ..., origin: Incomplete | None = ..., filternorm: bool = ..., filterrad: float = ..., resample: bool = ..., dpi_cor: bool = ..., **kwargs) -> None: ...
    stale: bool
    def set_data(self, arr) -> None: ...
    def get_data(self): ...
    def set_zoom(self, zoom) -> None: ...
    def get_zoom(self): ...
    def get_offset(self): ...
    def get_children(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_extent(self, renderer): ...
    def draw(self, renderer) -> None: ...

class AnnotationBbox(martist.Artist, mtext._AnnotationBase):
    zorder: int
    offsetbox: Incomplete
    arrowprops: Incomplete
    xybox: Incomplete
    boxcoords: Incomplete
    arrow_patch: Incomplete
    patch: Incomplete
    def __init__(self, offsetbox, xy, xybox: Incomplete | None = ..., xycoords: str = ..., boxcoords: Incomplete | None = ..., frameon: bool = ..., pad: float = ..., annotation_clip: Incomplete | None = ..., box_alignment=..., bboxprops: Incomplete | None = ..., arrowprops: Incomplete | None = ..., fontsize: Incomplete | None = ..., **kwargs) -> None: ...
    @property
    def xyann(self): ...
    stale: bool
    @xyann.setter
    def xyann(self, xyann) -> None: ...
    @property
    def anncoords(self): ...
    @anncoords.setter
    def anncoords(self, coords) -> None: ...
    def contains(self, mouseevent): ...
    def get_children(self): ...
    def set_figure(self, fig) -> None: ...
    prop: Incomplete
    def set_fontsize(self, s: Incomplete | None = ...) -> None: ...
    def get_fontsize(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_tightbbox(self, renderer: Incomplete | None = ...): ...
    def update_positions(self, renderer) -> None: ...
    def draw(self, renderer) -> None: ...

class DraggableBase:
    ref_artist: Incomplete
    got_artist: bool
    canvas: Incomplete
    cids: Incomplete
    def __init__(self, ref_artist, use_blit: bool = ...) -> None: ...
    def on_motion(self, evt) -> None: ...
    mouse_x: Incomplete
    mouse_y: Incomplete
    background: Incomplete
    def on_pick(self, evt) -> None: ...
    def on_release(self, event) -> None: ...
    def disconnect(self) -> None: ...
    def save_offset(self) -> None: ...
    def update_offset(self, dx, dy) -> None: ...
    def finalize_offset(self) -> None: ...

class DraggableOffsetBox(DraggableBase):
    offsetbox: Incomplete
    def __init__(self, ref_artist, offsetbox, use_blit: bool = ...) -> None: ...
    def save_offset(self) -> None: ...
    def update_offset(self, dx, dy) -> None: ...
    def get_loc_in_canvas(self): ...

class DraggableAnnotation(DraggableBase):
    annotation: Incomplete
    def __init__(self, annotation, use_blit: bool = ...) -> None: ...
    def save_offset(self) -> None: ...
    def update_offset(self, dx, dy) -> None: ...
