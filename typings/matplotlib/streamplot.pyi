from _typeshed import Incomplete

def streamplot(axes, x, y, u, v, density: int = ..., linewidth: Incomplete | None = ..., color: Incomplete | None = ..., cmap: Incomplete | None = ..., norm: Incomplete | None = ..., arrowsize: int = ..., arrowstyle: str = ..., minlength: float = ..., transform: Incomplete | None = ..., zorder: Incomplete | None = ..., start_points: Incomplete | None = ..., maxlength: float = ..., integration_direction: str = ..., broken_streamlines: bool = ...): ...

class StreamplotSet:
    lines: Incomplete
    arrows: Incomplete
    def __init__(self, lines, arrows) -> None: ...

class DomainMap:
    grid: Incomplete
    mask: Incomplete
    x_grid2mask: Incomplete
    y_grid2mask: Incomplete
    x_mask2grid: Incomplete
    y_mask2grid: Incomplete
    x_data2grid: Incomplete
    y_data2grid: Incomplete
    def __init__(self, grid, mask) -> None: ...
    def grid2mask(self, xi, yi): ...
    def mask2grid(self, xm, ym): ...
    def data2grid(self, xd, yd): ...
    def grid2data(self, xg, yg): ...
    def start_trajectory(self, xg, yg, broken_streamlines: bool = ...) -> None: ...
    def reset_start_point(self, xg, yg) -> None: ...
    def update_trajectory(self, xg, yg, broken_streamlines: bool = ...) -> None: ...
    def undo_trajectory(self) -> None: ...

class Grid:
    nx: Incomplete
    ny: Incomplete
    dx: Incomplete
    dy: Incomplete
    x_origin: Incomplete
    y_origin: Incomplete
    width: Incomplete
    height: Incomplete
    def __init__(self, x, y) -> None: ...
    @property
    def shape(self): ...
    def within_grid(self, xi, yi): ...

class StreamMask:
    shape: Incomplete
    def __init__(self, density) -> None: ...
    def __getitem__(self, args): ...

class InvalidIndexError(Exception): ...
class TerminateTrajectory(Exception): ...
class OutOfBounds(IndexError): ...
