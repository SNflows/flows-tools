import matplotlib.artist as martist
from _typeshed import Incomplete
from matplotlib import cbook as cbook

GRIDLINE_INTERPOLATION_STEPS: int

class Tick(martist.Artist):
    axes: Incomplete
    tick1line: Incomplete
    tick2line: Incomplete
    gridline: Incomplete
    label1: Incomplete
    label2: Incomplete
    def __init__(self, axes, loc, *, size: Incomplete | None = ..., width: Incomplete | None = ..., color: Incomplete | None = ..., tickdir: Incomplete | None = ..., pad: Incomplete | None = ..., labelsize: Incomplete | None = ..., labelcolor: Incomplete | None = ..., zorder: Incomplete | None = ..., gridOn: Incomplete | None = ..., tick1On: bool = ..., tick2On: bool = ..., label1On: bool = ..., label2On: bool = ..., major: bool = ..., labelrotation: int = ..., grid_color: Incomplete | None = ..., grid_linestyle: Incomplete | None = ..., grid_linewidth: Incomplete | None = ..., grid_alpha: Incomplete | None = ..., **kwargs) -> None: ...
    @property
    def label(self): ...
    stale: bool
    def apply_tickdir(self, tickdir) -> None: ...
    def get_tickdir(self): ...
    def get_tick_padding(self): ...
    def get_children(self): ...
    def set_clip_path(self, clippath, transform: Incomplete | None = ...) -> None: ...
    def get_pad_pixels(self): ...
    def contains(self, mouseevent): ...
    def set_pad(self, val) -> None: ...
    def get_pad(self): ...
    def get_loc(self): ...
    def draw(self, renderer) -> None: ...
    def set_label1(self, s) -> None: ...
    set_label: Incomplete
    def set_label2(self, s) -> None: ...
    def set_url(self, url) -> None: ...
    def get_view_interval(self) -> None: ...
    def update_position(self, loc) -> None: ...

class XTick(Tick):
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    stale: bool
    def update_position(self, loc) -> None: ...
    def get_view_interval(self): ...

class YTick(Tick):
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    stale: bool
    def update_position(self, loc) -> None: ...
    def get_view_interval(self): ...

class Ticker:
    def __init__(self) -> None: ...
    @property
    def locator(self): ...
    @locator.setter
    def locator(self, locator) -> None: ...
    @property
    def formatter(self): ...
    @formatter.setter
    def formatter(self, formatter) -> None: ...

class _LazyTickList:
    def __init__(self, major) -> None: ...
    def __get__(self, instance, cls): ...

class Axis(martist.Artist):
    OFFSETTEXTPAD: int
    isDefault_label: bool
    axes: Incomplete
    major: Incomplete
    minor: Incomplete
    callbacks: Incomplete
    label: Incomplete
    offsetText: Incomplete
    labelpad: Incomplete
    pickradius: Incomplete
    def __init__(self, axes, pickradius: int = ...) -> None: ...
    @property
    def isDefault_majloc(self): ...
    @isDefault_majloc.setter
    def isDefault_majloc(self, value) -> None: ...
    @property
    def isDefault_majfmt(self): ...
    @isDefault_majfmt.setter
    def isDefault_majfmt(self, value) -> None: ...
    @property
    def isDefault_minloc(self): ...
    @isDefault_minloc.setter
    def isDefault_minloc(self, value) -> None: ...
    @property
    def isDefault_minfmt(self): ...
    @isDefault_minfmt.setter
    def isDefault_minfmt(self, value) -> None: ...
    majorTicks: Incomplete
    minorTicks: Incomplete
    def get_remove_overlapping_locs(self): ...
    def set_remove_overlapping_locs(self, val) -> None: ...
    remove_overlapping_locs: Incomplete
    stale: bool
    def set_label_coords(self, x, y, transform: Incomplete | None = ...) -> None: ...
    def get_transform(self): ...
    def get_scale(self): ...
    def limit_range_for_scale(self, vmin, vmax): ...
    def get_children(self): ...
    converter: Incomplete
    units: Incomplete
    def clear(self) -> None: ...
    def reset_ticks(self) -> None: ...
    def set_tick_params(self, which: str = ..., reset: bool = ..., **kwargs) -> None: ...
    def set_clip_path(self, clippath, transform: Incomplete | None = ...) -> None: ...
    def get_view_interval(self) -> None: ...
    def set_view_interval(self, vmin, vmax, ignore: bool = ...) -> None: ...
    def get_data_interval(self) -> None: ...
    def set_data_interval(self, vmin, vmax, ignore: bool = ...) -> None: ...
    def get_inverted(self): ...
    def set_inverted(self, inverted) -> None: ...
    def set_default_intervals(self) -> None: ...
    def get_ticklabel_extents(self, renderer): ...
    def get_tightbbox(self, renderer: Incomplete | None = ..., *, for_layout_only: bool = ...): ...
    def get_tick_padding(self): ...
    def draw(self, renderer, *args, **kwargs) -> None: ...
    def get_gridlines(self): ...
    def get_label(self): ...
    def get_offset_text(self): ...
    def get_pickradius(self): ...
    def get_majorticklabels(self): ...
    def get_minorticklabels(self): ...
    def get_ticklabels(self, minor: bool = ..., which: Incomplete | None = ...): ...
    def get_majorticklines(self): ...
    def get_minorticklines(self): ...
    def get_ticklines(self, minor: bool = ...): ...
    def get_majorticklocs(self): ...
    def get_minorticklocs(self): ...
    def get_ticklocs(self, *, minor: bool = ...): ...
    def get_ticks_direction(self, minor: bool = ...): ...
    def get_label_text(self): ...
    def get_major_locator(self): ...
    def get_minor_locator(self): ...
    def get_major_formatter(self): ...
    def get_minor_formatter(self): ...
    def get_major_ticks(self, numticks: Incomplete | None = ...): ...
    def get_minor_ticks(self, numticks: Incomplete | None = ...): ...
    def grid(self, visible: Incomplete | None = ..., which: str = ..., **kwargs) -> None: ...
    def update_units(self, data): ...
    def have_units(self): ...
    def convert_units(self, x): ...
    def set_units(self, u) -> None: ...
    def get_units(self): ...
    def set_label_text(self, label, fontdict: Incomplete | None = ..., **kwargs): ...
    def set_major_formatter(self, formatter) -> None: ...
    def set_minor_formatter(self, formatter) -> None: ...
    def set_major_locator(self, locator) -> None: ...
    def set_minor_locator(self, locator) -> None: ...
    def set_pickradius(self, pickradius) -> None: ...
    def set_ticklabels(self, ticklabels, *, minor: bool = ..., **kwargs): ...
    def set_ticks(self, ticks, labels: Incomplete | None = ..., *, minor: bool = ..., **kwargs): ...
    def axis_date(self, tz: Incomplete | None = ...) -> None: ...
    def get_tick_space(self) -> None: ...
    def get_label_position(self): ...
    def set_label_position(self, position) -> None: ...
    def get_minpos(self) -> None: ...

class XAxis(Axis):
    __name__: str
    axis_name: str
    label_position: str
    offset_text_position: str
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, mouseevent): ...
    stale: bool
    def set_label_position(self, position) -> None: ...
    def get_text_heights(self, renderer): ...
    def set_ticks_position(self, position) -> None: ...
    def tick_top(self) -> None: ...
    def tick_bottom(self) -> None: ...
    def get_ticks_position(self): ...
    get_view_interval: Incomplete
    set_view_interval: Incomplete
    get_data_interval: Incomplete
    set_data_interval: Incomplete
    def get_minpos(self): ...
    def set_default_intervals(self) -> None: ...
    def get_tick_space(self): ...

class YAxis(Axis):
    __name__: str
    axis_name: str
    label_position: str
    offset_text_position: str
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, mouseevent): ...
    stale: bool
    def set_label_position(self, position) -> None: ...
    def set_offset_position(self, position) -> None: ...
    def get_text_widths(self, renderer): ...
    def set_ticks_position(self, position) -> None: ...
    def tick_right(self) -> None: ...
    def tick_left(self) -> None: ...
    def get_ticks_position(self): ...
    get_view_interval: Incomplete
    set_view_interval: Incomplete
    get_data_interval: Incomplete
    set_data_interval: Incomplete
    def get_minpos(self): ...
    def set_default_intervals(self) -> None: ...
    def get_tick_space(self): ...
