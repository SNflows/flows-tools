from . import qt_compat as qt_compat
from .qt_compat import QT_API as QT_API, QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from _typeshed import Incomplete
from matplotlib import backend_tools as backend_tools, cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import CloseEvent as CloseEvent, FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, KeyEvent as KeyEvent, LocationEvent as LocationEvent, MouseButton as MouseButton, MouseEvent as MouseEvent, NavigationToolbar2 as NavigationToolbar2, ResizeEvent as ResizeEvent, TimerBase as TimerBase, ToolContainerBase as ToolContainerBase, _Backend, cursors as cursors

SPECIAL_KEYS: Incomplete
cursord: Incomplete

class __getattr__:
    qApp: Incomplete

class TimerQT(TimerBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...

class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
    required_interactive_framework: str
    manager_class: Incomplete
    buttond: Incomplete
    def __init__(self, figure: Incomplete | None = ...) -> None: ...
    def showEvent(self, event) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def mouseEventCoords(self, pos: Incomplete | None = ...): ...
    def enterEvent(self, event) -> None: ...
    def leaveEvent(self, event) -> None: ...
    def mousePressEvent(self, event) -> None: ...
    def mouseDoubleClickEvent(self, event) -> None: ...
    def mouseMoveEvent(self, event) -> None: ...
    def mouseReleaseEvent(self, event) -> None: ...
    def wheelEvent(self, event) -> None: ...
    def keyPressEvent(self, event) -> None: ...
    def keyReleaseEvent(self, event) -> None: ...
    def resizeEvent(self, event) -> None: ...
    def sizeHint(self): ...
    def minumumSizeHint(self): ...
    def flush_events(self) -> None: ...
    def start_event_loop(self, timeout: int = ...) -> None: ...
    def stop_event_loop(self, event: Incomplete | None = ...) -> None: ...
    def draw(self) -> None: ...
    def draw_idle(self) -> None: ...
    def blit(self, bbox: Incomplete | None = ...) -> None: ...
    def drawRectangle(self, rect) -> None: ...

class MainWindow(QtWidgets.QMainWindow):
    closing: Incomplete
    def closeEvent(self, event) -> None: ...

class FigureManagerQT(FigureManagerBase):
    window: Incomplete
    def __init__(self, canvas, num) -> None: ...
    def full_screen_toggle(self) -> None: ...
    def resize(self, width, height) -> None: ...
    def show(self) -> None: ...
    def destroy(self, *args) -> None: ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...

class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
    message: Incomplete
    toolitems: Incomplete
    coordinates: Incomplete
    locLabel: Incomplete
    def __init__(self, canvas, parent: Incomplete | None = ..., coordinates: bool = ...) -> None: ...
    def edit_parameters(self) -> None: ...
    def pan(self, *args) -> None: ...
    def zoom(self, *args) -> None: ...
    def set_message(self, s) -> None: ...
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def configure_subplots(self): ...
    def save_figure(self, *args) -> None: ...
    def set_history_buttons(self) -> None: ...

class SubplotToolQt(QtWidgets.QDialog):
    def __init__(self, targetfig, parent) -> None: ...
    def update_from_current_subplotpars(self) -> None: ...

class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
    def __init__(self, toolmanager, parent: Incomplete | None = ...) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle) -> None: ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def set_message(self, s) -> None: ...

class ConfigureSubplotsQt(backend_tools.ConfigureSubplotsBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def trigger(self, *args) -> None: ...

class SaveFigureQt(backend_tools.SaveFigureBase):
    def trigger(self, *args) -> None: ...

class SetCursorQt(backend_tools.SetCursorBase):
    def set_cursor(self, cursor) -> None: ...

class RubberbandQt(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...

class HelpQt(backend_tools.ToolHelpBase):
    def trigger(self, *args) -> None: ...

class ToolCopyToClipboardQT(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs) -> None: ...

class _BackendQT(_Backend):
    backend_version: Incomplete
    FigureCanvas: Incomplete
    FigureManager: Incomplete
    @staticmethod
    def mainloop() -> None: ...
