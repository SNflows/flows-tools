from _typeshed import Incomplete
from matplotlib import backend_tools as backend_tools, cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import FigureManagerBase as FigureManagerBase, NavigationToolbar2 as NavigationToolbar2, TimerBase as TimerBase, _Backend
from matplotlib.backend_tools import Cursors as Cursors

def mpl_to_gtk_cursor_name(mpl_cursor): ...

class TimerGTK(TimerBase):
    def __init__(self, *args, **kwargs) -> None: ...

class _FigureManagerGTK(FigureManagerBase):
    window: Incomplete
    vbox: Incomplete
    def __init__(self, canvas, num) -> None: ...
    def destroy(self, *args) -> None: ...
    def show(self) -> None: ...
    def full_screen_toggle(self): ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...
    def resize(self, width, height) -> None: ...

class _NavigationToolbar2GTK(NavigationToolbar2):
    def set_message(self, s) -> None: ...
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def pan(self, *args) -> None: ...
    def zoom(self, *args) -> None: ...
    def set_history_buttons(self) -> None: ...

class RubberbandGTK(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...

class ConfigureSubplotsGTK(backend_tools.ConfigureSubplotsBase):
    def trigger(self, *args) -> None: ...

class _BackendGTK(_Backend):
    backend_version: Incomplete
    @staticmethod
    def mainloop() -> None: ...
