from ._mathtext import RasterParse as RasterParse, VectorParse as VectorParse, get_unicode_index as get_unicode_index
from _typeshed import Incomplete
from matplotlib.font_manager import FontProperties as FontProperties
from matplotlib.ft2font import FT2Image as FT2Image, LOAD_NO_HINTING as LOAD_NO_HINTING
from typing import NamedTuple

class MathtextBackend:
    width: int
    height: int
    depth: int
    def __init__(self) -> None: ...
    def set_canvas_size(self, w, h, d) -> None: ...
    def render_glyph(self, ox, oy, info) -> None: ...
    def render_rect_filled(self, x1, y1, x2, y2) -> None: ...
    def get_results(self, box) -> None: ...
    def get_hinting_type(self): ...

class MathtextBackendAgg(MathtextBackend):
    ox: int
    oy: int
    image: Incomplete
    mode: str
    bbox: Incomplete
    def __init__(self) -> None: ...
    def set_canvas_size(self, w, h, d) -> None: ...
    def render_glyph(self, ox, oy, info) -> None: ...
    def render_rect_filled(self, x1, y1, x2, y2) -> None: ...
    def get_results(self, box): ...
    def get_hinting_type(self): ...

class MathtextBackendPath(MathtextBackend):

    class _Result(NamedTuple):
        width: Incomplete
        height: Incomplete
        depth: Incomplete
        glyphs: Incomplete
        rects: Incomplete
    glyphs: Incomplete
    rects: Incomplete
    def __init__(self) -> None: ...
    def render_glyph(self, ox, oy, info) -> None: ...
    def render_rect_filled(self, x1, y1, x2, y2) -> None: ...
    def get_results(self, box): ...

class MathTextWarning(Warning): ...

class MathTextParser:
    def __init__(self, output) -> None: ...
    def parse(self, s, dpi: int = ..., prop: Incomplete | None = ...): ...

def math_to_image(s, filename_or_obj, prop: Incomplete | None = ..., dpi: Incomplete | None = ..., format: Incomplete | None = ..., *, color: Incomplete | None = ...): ...
