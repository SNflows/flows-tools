from _typeshed import Incomplete

class _Token:
    kind: str
    pos: Incomplete
    raw: Incomplete
    def __init__(self, pos, raw) -> None: ...
    def endpos(self): ...
    def is_keyword(self, *names): ...
    def is_slash_name(self): ...
    def is_delim(self): ...
    def is_number(self): ...
    def value(self): ...

class _NameToken(_Token):
    kind: str
    def is_slash_name(self): ...
    def value(self): ...

class _BooleanToken(_Token):
    kind: str
    def value(self): ...

class _KeywordToken(_Token):
    kind: str
    def is_keyword(self, *names): ...

class _DelimiterToken(_Token):
    kind: str
    def is_delim(self): ...
    def opposite(self): ...

class _WhitespaceToken(_Token):
    kind: str

class _StringToken(_Token):
    kind: str
    def value(self): ...

class _BinaryToken(_Token):
    kind: str
    def value(self): ...

class _NumberToken(_Token):
    kind: str
    def is_number(self): ...
    def value(self): ...

class _BalancedExpression(_Token): ...

class Type1Font:
    parts: Incomplete
    decrypted: Incomplete
    def __init__(self, input) -> None: ...
    def transform(self, effects): ...
