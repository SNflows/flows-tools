from _typeshed import Incomplete
from matplotlib.backend_bases import MouseButton as MouseButton

class BlockingInput:
    fig: Incomplete
    eventslist: Incomplete
    def __init__(self, fig, eventslist=...) -> None: ...
    def on_event(self, event) -> None: ...
    def post_event(self) -> None: ...
    callbacks: Incomplete
    def cleanup(self) -> None: ...
    def add_event(self, event) -> None: ...
    def pop_event(self, index: int = ...) -> None: ...
    pop: Incomplete
    n: Incomplete
    events: Incomplete
    def __call__(self, n: int = ..., timeout: int = ...): ...

class BlockingMouseInput(BlockingInput):
    button_add: Incomplete
    button_pop: Incomplete
    button_stop: Incomplete
    def __init__(self, fig, mouse_add=..., mouse_pop=..., mouse_stop=...) -> None: ...
    def post_event(self) -> None: ...
    def mouse_event(self) -> None: ...
    def key_event(self) -> None: ...
    def mouse_event_add(self, event) -> None: ...
    def mouse_event_stop(self, event) -> None: ...
    def mouse_event_pop(self, event) -> None: ...
    def add_click(self, event) -> None: ...
    def pop_click(self, event, index: int = ...) -> None: ...
    def pop(self, event, index: int = ...) -> None: ...
    marks: Incomplete
    def cleanup(self, event: Incomplete | None = ...) -> None: ...
    show_clicks: Incomplete
    clicks: Incomplete
    def __call__(self, n: int = ..., timeout: int = ..., show_clicks: bool = ...): ...

class BlockingContourLabeler(BlockingMouseInput):
    cs: Incomplete
    def __init__(self, cs) -> None: ...
    def add_click(self, event) -> None: ...
    def pop_click(self, event, index: int = ...) -> None: ...
    def button1(self, event) -> None: ...
    def button3(self, event) -> None: ...
    inline: Incomplete
    inline_spacing: Incomplete
    def __call__(self, inline, inline_spacing: int = ..., n: int = ..., timeout: int = ...) -> None: ...

class BlockingKeyMouseInput(BlockingInput):
    def __init__(self, fig) -> None: ...
    keyormouse: Incomplete
    def post_event(self) -> None: ...
    def __call__(self, timeout: int = ...): ...
