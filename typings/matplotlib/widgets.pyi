from . import backend_tools as backend_tools, cbook as cbook, colors as colors, ticker as ticker, transforms as transforms
from .lines import Line2D as Line2D
from .patches import Circle as Circle, Ellipse as Ellipse, Polygon as Polygon, Rectangle as Rectangle
from .transforms import Affine2D as Affine2D, TransformedPatchPath as TransformedPatchPath
from _typeshed import Incomplete

class LockDraw:
    def __init__(self) -> None: ...
    def __call__(self, o) -> None: ...
    def release(self, o) -> None: ...
    def available(self, o): ...
    def isowner(self, o): ...
    def locked(self): ...

class Widget:
    drawon: bool
    eventson: bool
    def set_active(self, active) -> None: ...
    def get_active(self): ...
    active: Incomplete
    def ignore(self, event): ...

class AxesWidget(Widget):
    ax: Incomplete
    canvas: Incomplete
    def __init__(self, ax) -> None: ...
    def connect_event(self, event, callback) -> None: ...
    def disconnect_events(self) -> None: ...

class Button(AxesWidget):
    label: Incomplete
    color: Incomplete
    hovercolor: Incomplete
    def __init__(self, ax, label, image: Incomplete | None = ..., color: str = ..., hovercolor: str = ...) -> None: ...
    def on_clicked(self, func): ...
    def disconnect(self, cid) -> None: ...

class SliderBase(AxesWidget):
    orientation: Incomplete
    closedmin: Incomplete
    closedmax: Incomplete
    valmin: Incomplete
    valmax: Incomplete
    valstep: Incomplete
    drag_active: bool
    valfmt: Incomplete
    def __init__(self, ax, orientation, closedmin, closedmax, valmin, valmax, valfmt, dragging, valstep) -> None: ...
    def disconnect(self, cid) -> None: ...
    def reset(self) -> None: ...

class Slider(SliderBase):
    slidermin: Incomplete
    slidermax: Incomplete
    val: Incomplete
    valinit: Incomplete
    track: Incomplete
    poly: Incomplete
    hline: Incomplete
    vline: Incomplete
    label: Incomplete
    valtext: Incomplete
    def __init__(self, ax, label, valmin, valmax, valinit: float = ..., valfmt: Incomplete | None = ..., closedmin: bool = ..., closedmax: bool = ..., slidermin: Incomplete | None = ..., slidermax: Incomplete | None = ..., dragging: bool = ..., valstep: Incomplete | None = ..., orientation: str = ..., *, initcolor: str = ..., track_color: str = ..., handle_style: Incomplete | None = ..., **kwargs) -> None: ...
    def set_val(self, val) -> None: ...
    def on_changed(self, func): ...

class RangeSlider(SliderBase):
    val: Incomplete
    valinit: Incomplete
    track: Incomplete
    poly: Incomplete
    label: Incomplete
    valtext: Incomplete
    def __init__(self, ax, label, valmin, valmax, valinit: Incomplete | None = ..., valfmt: Incomplete | None = ..., closedmin: bool = ..., closedmax: bool = ..., dragging: bool = ..., valstep: Incomplete | None = ..., orientation: str = ..., track_color: str = ..., handle_style: Incomplete | None = ..., **kwargs) -> None: ...
    def set_min(self, min) -> None: ...
    def set_max(self, max) -> None: ...
    def set_val(self, val) -> None: ...
    def on_changed(self, func): ...

class CheckButtons(AxesWidget):
    labels: Incomplete
    lines: Incomplete
    rectangles: Incomplete
    def __init__(self, ax, labels, actives: Incomplete | None = ...) -> None: ...
    def set_active(self, index) -> None: ...
    def get_status(self): ...
    def on_clicked(self, func): ...
    def disconnect(self, cid) -> None: ...

class TextBox(AxesWidget):
    DIST_FROM_LEFT: Incomplete
    label: Incomplete
    text_disp: Incomplete
    cursor_index: int
    cursor: Incomplete
    color: Incomplete
    hovercolor: Incomplete
    capturekeystrokes: bool
    def __init__(self, ax, label, initial: str = ..., color: str = ..., hovercolor: str = ..., label_pad: float = ..., textalignment: str = ...) -> None: ...
    @property
    def text(self): ...
    def set_val(self, val) -> None: ...
    def begin_typing(self, x) -> None: ...
    def stop_typing(self) -> None: ...
    def position_cursor(self, x) -> None: ...
    def on_text_change(self, func): ...
    def on_submit(self, func): ...
    def disconnect(self, cid) -> None: ...

class RadioButtons(AxesWidget):
    activecolor: Incomplete
    value_selected: Incomplete
    labels: Incomplete
    circles: Incomplete
    def __init__(self, ax, labels, active: int = ..., activecolor: str = ...) -> None: ...
    def set_active(self, index) -> None: ...
    def on_clicked(self, func): ...
    def disconnect(self, cid) -> None: ...

class SubplotTool(Widget):
    figure: Incomplete
    targetfig: Incomplete
    buttonreset: Incomplete
    def __init__(self, targetfig, toolfig) -> None: ...

class Cursor(AxesWidget):
    visible: bool
    horizOn: Incomplete
    vertOn: Incomplete
    useblit: Incomplete
    lineh: Incomplete
    linev: Incomplete
    background: Incomplete
    needclear: bool
    def __init__(self, ax, horizOn: bool = ..., vertOn: bool = ..., useblit: bool = ..., **lineprops) -> None: ...
    def clear(self, event) -> None: ...
    def onmove(self, event) -> None: ...

class MultiCursor(Widget):
    axes: Incomplete
    horizOn: Incomplete
    vertOn: Incomplete
    visible: bool
    useblit: Incomplete
    needclear: bool
    vlines: Incomplete
    hlines: Incomplete
    def __init__(self, canvas, axes, useblit: bool = ..., horizOn: bool = ..., vertOn: bool = ..., **lineprops) -> None: ...
    canvas: Incomplete
    background: Incomplete
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def clear(self, event) -> None: ...
    def onmove(self, event) -> None: ...

class _SelectorWidget(AxesWidget):
    onselect: Incomplete
    useblit: Incomplete
    background: Incomplete
    validButtons: Incomplete
    def __init__(self, ax, onselect, useblit: bool = ..., button: Incomplete | None = ..., state_modifier_keys: Incomplete | None = ..., use_data_coordinates: bool = ...) -> None: ...
    eventpress: Incomplete
    eventrelease: Incomplete
    state: Incomplete
    state_modifier_keys: Incomplete
    def set_active(self, active) -> None: ...
    def update_background(self, event): ...
    def connect_default_events(self) -> None: ...
    def ignore(self, event): ...
    def update(self): ...
    def press(self, event): ...
    def release(self, event): ...
    def onmove(self, event): ...
    def on_scroll(self, event) -> None: ...
    def on_key_press(self, event) -> None: ...
    def on_key_release(self, event) -> None: ...
    def set_visible(self, visible) -> None: ...
    def get_visible(self): ...
    @property
    def visible(self): ...
    @visible.setter
    def visible(self, visible) -> None: ...
    def clear(self) -> None: ...
    @property
    def artists(self): ...
    def set_props(self, **props) -> None: ...
    def set_handle_props(self, **handle_props) -> None: ...
    def add_state(self, state) -> None: ...
    def remove_state(self, state) -> None: ...

class SpanSelector(_SelectorWidget):
    snap_values: Incomplete
    onmove_callback: Incomplete
    minspan: Incomplete
    grab_range: Incomplete
    drag_from_anywhere: Incomplete
    ignore_event_outside: Incomplete
    canvas: Incomplete
    def __init__(self, ax, onselect, direction, minspan: int = ..., useblit: bool = ..., props: Incomplete | None = ..., onmove_callback: Incomplete | None = ..., interactive: bool = ..., button: Incomplete | None = ..., handle_props: Incomplete | None = ..., grab_range: int = ..., state_modifier_keys: Incomplete | None = ..., drag_from_anywhere: bool = ..., ignore_event_outside: bool = ..., snap_values: Incomplete | None = ...) -> None: ...
    rect: Incomplete
    rectprops: Incomplete
    active_handle: Incomplete
    pressv: Incomplete
    span_stays: Incomplete
    prev: Incomplete
    ax: Incomplete
    def new_axes(self, ax) -> None: ...
    def connect_default_events(self) -> None: ...
    @property
    def direction(self): ...
    @direction.setter
    def direction(self, direction) -> None: ...
    @property
    def extents(self): ...
    @extents.setter
    def extents(self, extents) -> None: ...

class ToolLineHandles:
    ax: Incomplete
    def __init__(self, ax, positions, direction, line_props: Incomplete | None = ..., useblit: bool = ...) -> None: ...
    @property
    def artists(self): ...
    @property
    def positions(self): ...
    @property
    def direction(self): ...
    def set_data(self, positions) -> None: ...
    def set_visible(self, value) -> None: ...
    def set_animated(self, value) -> None: ...
    def remove(self) -> None: ...
    def closest(self, x, y): ...

class ToolHandles:
    ax: Incomplete
    def __init__(self, ax, x, y, marker: str = ..., marker_props: Incomplete | None = ..., useblit: bool = ...) -> None: ...
    @property
    def x(self): ...
    @property
    def y(self): ...
    @property
    def artists(self): ...
    def set_data(self, pts, y: Incomplete | None = ...) -> None: ...
    def set_visible(self, val) -> None: ...
    def set_animated(self, val) -> None: ...
    def closest(self, x, y): ...

class RectangleSelector(_SelectorWidget):
    drag_from_anywhere: Incomplete
    ignore_event_outside: Incomplete
    minspanx: Incomplete
    minspany: Incomplete
    spancoords: Incomplete
    grab_range: Incomplete
    def __init__(self, ax, onselect, drawtype: str = ..., minspanx: int = ..., minspany: int = ..., useblit: bool = ..., lineprops: Incomplete | None = ..., props: Incomplete | None = ..., spancoords: str = ..., button: Incomplete | None = ..., grab_range: int = ..., handle_props: Incomplete | None = ..., interactive: bool = ..., state_modifier_keys: Incomplete | None = ..., drag_from_anywhere: bool = ..., ignore_event_outside: bool = ..., use_data_coordinates: bool = ...) -> None: ...
    to_draw: Incomplete
    drawtype: Incomplete
    active_handle: Incomplete
    interactive: Incomplete
    maxdist: Incomplete
    @property
    def corners(self): ...
    @property
    def edge_centers(self): ...
    @property
    def center(self): ...
    @property
    def extents(self): ...
    @extents.setter
    def extents(self, extents) -> None: ...
    @property
    def rotation(self): ...
    @rotation.setter
    def rotation(self, value) -> None: ...
    draw_shape: Incomplete
    @property
    def geometry(self): ...

class EllipseSelector(RectangleSelector):
    draw_shape: Incomplete

class LassoSelector(_SelectorWidget):
    verts: Incomplete
    def __init__(self, ax, onselect: Incomplete | None = ..., useblit: bool = ..., props: Incomplete | None = ..., button: Incomplete | None = ...) -> None: ...
    def onpress(self, event) -> None: ...
    def onrelease(self, event) -> None: ...

class PolygonSelector(_SelectorWidget):
    grab_range: Incomplete
    def __init__(self, ax, onselect, useblit: bool = ..., props: Incomplete | None = ..., handle_props: Incomplete | None = ..., grab_range: int = ..., *, draw_bounding_box: bool = ..., box_handle_props: Incomplete | None = ..., box_props: Incomplete | None = ...) -> None: ...
    line: Incomplete
    vertex_select_radius: Incomplete
    def onmove(self, event): ...
    @property
    def verts(self): ...
    @verts.setter
    def verts(self, xys) -> None: ...

class Lasso(AxesWidget):
    useblit: Incomplete
    background: Incomplete
    verts: Incomplete
    line: Incomplete
    callback: Incomplete
    def __init__(self, ax, xy, callback: Incomplete | None = ..., useblit: bool = ...) -> None: ...
    def onrelease(self, event) -> None: ...
    def onmove(self, event) -> None: ...
