from .deprecation import MatplotlibDeprecationWarning as MatplotlibDeprecationWarning, delete_parameter as delete_parameter, deprecate_method_override as deprecate_method_override, deprecate_privatize_attribute as deprecate_privatize_attribute, deprecated as deprecated, make_keyword_only as make_keyword_only, rename_parameter as rename_parameter, suppress_matplotlib_deprecation_warning as suppress_matplotlib_deprecation_warning, warn_deprecated as warn_deprecated
from _typeshed import Incomplete
from collections.abc import Generator

class classproperty:
    fset: Incomplete
    fdel: Incomplete
    def __init__(self, fget, fset: Incomplete | None = ..., fdel: Incomplete | None = ..., doc: Incomplete | None = ...) -> None: ...
    def __get__(self, instance, owner): ...
    @property
    def fget(self): ...

def check_isinstance(_types, **kwargs): ...
def check_in_list(_values, *, _print_supported_values: bool = ..., **kwargs) -> None: ...
def check_shape(_shape, **kwargs) -> None: ...
def check_getitem(_mapping, **kwargs): ...
def caching_module_getattr(cls): ...
def define_aliases(alias_d, cls: Incomplete | None = ...): ...
def select_matching_signature(funcs, *args, **kwargs): ...
def recursive_subclasses(cls) -> Generator[Incomplete, None, None]: ...
def warn_external(message, category: Incomplete | None = ...) -> None: ...
