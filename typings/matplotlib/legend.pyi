from . import legend_handler as legend_handler
from _typeshed import Incomplete
from matplotlib import colors as colors, offsetbox as offsetbox
from matplotlib.artist import Artist as Artist, allow_rasterization as allow_rasterization
from matplotlib.cbook import silent_list as silent_list
from matplotlib.collections import CircleCollection as CircleCollection, Collection as Collection, LineCollection as LineCollection, PathCollection as PathCollection, PolyCollection as PolyCollection, RegularPolyCollection as RegularPolyCollection
from matplotlib.container import BarContainer as BarContainer, ErrorbarContainer as ErrorbarContainer, StemContainer as StemContainer
from matplotlib.font_manager import FontProperties as FontProperties
from matplotlib.lines import Line2D as Line2D
from matplotlib.offsetbox import AnchoredOffsetbox as AnchoredOffsetbox, DraggableOffsetBox as DraggableOffsetBox, DrawingArea as DrawingArea, HPacker as HPacker, TextArea as TextArea, VPacker as VPacker
from matplotlib.patches import FancyBboxPatch as FancyBboxPatch, Patch as Patch, Rectangle as Rectangle, Shadow as Shadow, StepPatch as StepPatch
from matplotlib.text import Text as Text
from matplotlib.transforms import Bbox as Bbox, BboxBase as BboxBase, BboxTransformFrom as BboxTransformFrom, BboxTransformTo as BboxTransformTo, TransformedBbox as TransformedBbox

class DraggableLegend(DraggableOffsetBox):
    legend: Incomplete
    def __init__(self, legend, use_blit: bool = ..., update: str = ...) -> None: ...
    def finalize_offset(self) -> None: ...

class Legend(Artist):
    codes: Incomplete
    zorder: int
    prop: Incomplete
    texts: Incomplete
    legendHandles: Incomplete
    numpoints: Incomplete
    markerscale: Incomplete
    scatterpoints: Incomplete
    borderpad: Incomplete
    labelspacing: Incomplete
    handlelength: Incomplete
    handleheight: Incomplete
    handletextpad: Incomplete
    borderaxespad: Incomplete
    columnspacing: Incomplete
    shadow: Incomplete
    isaxes: bool
    axes: Incomplete
    parent: Incomplete
    legendPatch: Incomplete
    def __init__(self, parent, handles, labels, loc: Incomplete | None = ..., numpoints: Incomplete | None = ..., markerscale: Incomplete | None = ..., markerfirst: bool = ..., scatterpoints: Incomplete | None = ..., scatteryoffsets: Incomplete | None = ..., prop: Incomplete | None = ..., fontsize: Incomplete | None = ..., labelcolor: Incomplete | None = ..., borderpad: Incomplete | None = ..., labelspacing: Incomplete | None = ..., handlelength: Incomplete | None = ..., handleheight: Incomplete | None = ..., handletextpad: Incomplete | None = ..., borderaxespad: Incomplete | None = ..., columnspacing: Incomplete | None = ..., ncols: int = ..., mode: Incomplete | None = ..., fancybox: Incomplete | None = ..., shadow: Incomplete | None = ..., title: Incomplete | None = ..., title_fontsize: Incomplete | None = ..., framealpha: Incomplete | None = ..., edgecolor: Incomplete | None = ..., facecolor: Incomplete | None = ..., bbox_to_anchor: Incomplete | None = ..., bbox_transform: Incomplete | None = ..., frameon: Incomplete | None = ..., handler_map: Incomplete | None = ..., title_fontproperties: Incomplete | None = ..., alignment: str = ..., *, ncol: int = ...) -> None: ...
    def set_ncols(self, ncols) -> None: ...
    stale: bool
    def draw(self, renderer) -> None: ...
    @classmethod
    def get_default_handler_map(cls): ...
    @classmethod
    def set_default_handler_map(cls, handler_map) -> None: ...
    @classmethod
    def update_default_handler_map(cls, handler_map) -> None: ...
    def get_legend_handler_map(self): ...
    @staticmethod
    def get_legend_handler(legend_handler_map, orig_handle): ...
    def get_children(self): ...
    def get_frame(self): ...
    def get_lines(self): ...
    def get_patches(self): ...
    def get_texts(self): ...
    def set_alignment(self, alignment) -> None: ...
    def get_alignment(self): ...
    def set_title(self, title, prop: Incomplete | None = ...) -> None: ...
    def get_title(self): ...
    def get_window_extent(self, renderer: Incomplete | None = ...): ...
    def get_tightbbox(self, renderer: Incomplete | None = ...): ...
    def get_frame_on(self): ...
    def set_frame_on(self, b) -> None: ...
    draw_frame: Incomplete
    def get_bbox_to_anchor(self): ...
    def set_bbox_to_anchor(self, bbox, transform: Incomplete | None = ...) -> None: ...
    def contains(self, event): ...
    def set_draggable(self, state, use_blit: bool = ..., update: str = ...): ...
    def get_draggable(self): ...
